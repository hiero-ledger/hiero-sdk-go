//*
// # Staking Node Information
// This is an entry describing the staking characteristics of a single active
// node.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119)
// and clarified in [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: staking_node_info.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// An Hedera Token Service staking info entity.
//
// Staking info is per node. Shard and Realm are implied based on the network
// address book entry for this node.
type StakingNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The entity number of this node.<br/>
	// The shard and realm numbers are implied, based on the network address
	// book entry for this node.
	// <p>
	// This value SHALL be unique within a given shard and realm.<br/>
	// This value MAY be repeated across shards and/or realms.
	NodeNumber int64 `protobuf:"varint,1,opt,name=node_number,json=nodeNumber,proto3" json:"node_number,omitempty"`
	// *
	// The minimum stake, in tinybar, that is required for this node to have a
	// non-zero weight in the network consensus.
	// <p>
	// If the current value of `stake` is below this value, this node SHALL have
	// a zero weight in network consensus.
	MinStake int64 `protobuf:"varint,2,opt,name=min_stake,json=minStake,proto3" json:"min_stake,omitempty"`
	// *
	// The maximum stake to this node that is considered to calculate its weight
	// in the network consensus.
	// <p>
	// If the current `stake` value is above this limit, the excess staked HBAR
	// SHALL NOT be considered when determining consensus weight.
	MaxStake int64 `protobuf:"varint,3,opt,name=max_stake,json=maxStake,proto3" json:"max_stake,omitempty"`
	// *
	// The sum of balances of all accounts staked to this node, considering only
	// accounts that choose to receive rewards.
	StakeToReward int64 `protobuf:"varint,4,opt,name=stake_to_reward,json=stakeToReward,proto3" json:"stake_to_reward,omitempty"`
	// *
	// The sum of balances of all accounts staked to this node, considering only
	// accounts that decline to receive rewards.
	StakeToNotReward int64 `protobuf:"varint,5,opt,name=stake_to_not_reward,json=stakeToNotReward,proto3" json:"stake_to_not_reward,omitempty"`
	// *
	// The snapshot of stake_to_reward value at the beginning of the current
	// staking period.
	// <p>
	// This is necessary when calculating rewards for the current staking period
	// without considering changes to `stake_to_reward` _within_ the current
	// staking period.<br/>
	// This value SHALL be reset at the beginning of every staking period.
	StakeRewardStart int64 `protobuf:"varint,6,opt,name=stake_reward_start,json=stakeRewardStart,proto3" json:"stake_reward_start,omitempty"`
	// *
	// The amount of staked HBAR from `stake_reward_start` that will have
	// unclaimed rewards due to accounts changing their staking metadata in a
	// way that disqualifies them for the current staking period.
	// <p>
	// This value SHALL be reset at the beginning of every staking period.
	UnclaimedStakeRewardStart int64 `protobuf:"varint,7,opt,name=unclaimed_stake_reward_start,json=unclaimedStakeRewardStart,proto3" json:"unclaimed_stake_reward_start,omitempty"`
	// *
	// The total amount of HBAR staked to this node.
	// <p>
	// This is sum of stake_to_reward and stake_to_not_reward.<br/>
	// If the sum is greater than `max_stake`, then the _effective_ stake
	// SHALL be `max_stake`.<br/>
	// If the sum is less than `min_stake`, then the _effective_ stake
	// SHALL be `0`.
	Stake int64 `protobuf:"varint,8,opt,name=stake,proto3" json:"stake,omitempty"`
	// *
	// A running list of reward amounts for the last 365+1 staking periods
	// (typically a year and a day).
	// <p>
	// The first element SHALL be the reward up to and including the last full
	// period prior to the present reward period.<br/>
	// The second element SHALL be the reward up to and including the period
	// before the last full period prior to the present period.<br/>
	// The list SHALL continue in reverse chronological order until the reward
	// history limit is reached.
	RewardSumHistory []int64 `protobuf:"varint,9,rep,packed,name=reward_sum_history,json=rewardSumHistory,proto3" json:"reward_sum_history,omitempty"`
	// *
	// The consensus weight of this node in the network.
	// <p>
	// This is recomputed based on the `stake` of this node at midnight UTC of
	// each day. If the `stake` of this node at that time is less than
	// `min_stake`, then the weight SHALL be 0.<br/>
	// <p>
	// Given the following:
	// <ul>
	//
	//	<li>The `effective stake` of a single node SHALL be `0` if the node
	//	    `stake` is less than `min_stake`.</li>
	//	<li>The `effective stake` SHALL be `max_stake` if the node `stake` is
	//	    greater than `max_stake`.</li>
	//	<li>The `effective stake` SHALL be the actual value of `stake` if
	//	    `min_stake` < `stake` < `max_stake`.</li>
	//	<li>The `effective network stake` SHALL be calculated as âˆ‘(`effective
	//	    stake` of each node) for all nodes in the network address book.</li>
	//
	// </ul>
	// <p>
	// This field is deprecated and SHALL NOT be used when RosterLifecycle
	// is enabled. The weight SHALL be same as the `effective_stake` described above.
	//
	// Deprecated: Marked as deprecated in staking_node_info.proto.
	Weight int32 `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
	// *
	// The total staking rewards in tinybars that MAY be collected by all
	// accounts staking to the current node after the end of this staking
	// period.
	// <p>
	// This SHALL be calculated assuming that no account "renounces" its
	// rewards by setting `decline_reward` to true, or is ineligible for
	// some other reason.<br/>
	// When the current node is deleted, this amount SHALL be subtracted from
	// the total pending rewards of all accounts staking to all nodes in the
	// network in NetworkStakingRewards.
	PendingRewards int64 `protobuf:"varint,11,opt,name=pending_rewards,json=pendingRewards,proto3" json:"pending_rewards,omitempty"`
	// *
	// A flag indicating that this node has been removed from this network.
	Deleted bool `protobuf:"varint,12,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *StakingNodeInfo) Reset() {
	*x = StakingNodeInfo{}
	mi := &file_staking_node_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakingNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingNodeInfo) ProtoMessage() {}

func (x *StakingNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_staking_node_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingNodeInfo.ProtoReflect.Descriptor instead.
func (*StakingNodeInfo) Descriptor() ([]byte, []int) {
	return file_staking_node_info_proto_rawDescGZIP(), []int{0}
}

func (x *StakingNodeInfo) GetNodeNumber() int64 {
	if x != nil {
		return x.NodeNumber
	}
	return 0
}

func (x *StakingNodeInfo) GetMinStake() int64 {
	if x != nil {
		return x.MinStake
	}
	return 0
}

func (x *StakingNodeInfo) GetMaxStake() int64 {
	if x != nil {
		return x.MaxStake
	}
	return 0
}

func (x *StakingNodeInfo) GetStakeToReward() int64 {
	if x != nil {
		return x.StakeToReward
	}
	return 0
}

func (x *StakingNodeInfo) GetStakeToNotReward() int64 {
	if x != nil {
		return x.StakeToNotReward
	}
	return 0
}

func (x *StakingNodeInfo) GetStakeRewardStart() int64 {
	if x != nil {
		return x.StakeRewardStart
	}
	return 0
}

func (x *StakingNodeInfo) GetUnclaimedStakeRewardStart() int64 {
	if x != nil {
		return x.UnclaimedStakeRewardStart
	}
	return 0
}

func (x *StakingNodeInfo) GetStake() int64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *StakingNodeInfo) GetRewardSumHistory() []int64 {
	if x != nil {
		return x.RewardSumHistory
	}
	return nil
}

// Deprecated: Marked as deprecated in staking_node_info.proto.
func (x *StakingNodeInfo) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *StakingNodeInfo) GetPendingRewards() int64 {
	if x != nil {
		return x.PendingRewards
	}
	return 0
}

func (x *StakingNodeInfo) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

var File_staking_node_info_proto protoreflect.FileDescriptor

var file_staking_node_info_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd5, 0x03, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54,
	0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x4e, 0x6f, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x75, 0x6e, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x75, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_staking_node_info_proto_rawDescOnce sync.Once
	file_staking_node_info_proto_rawDescData = file_staking_node_info_proto_rawDesc
)

func file_staking_node_info_proto_rawDescGZIP() []byte {
	file_staking_node_info_proto_rawDescOnce.Do(func() {
		file_staking_node_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_staking_node_info_proto_rawDescData)
	})
	return file_staking_node_info_proto_rawDescData
}

var file_staking_node_info_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_staking_node_info_proto_goTypes = []any{
	(*StakingNodeInfo)(nil), // 0: proto.StakingNodeInfo
}
var file_staking_node_info_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_staking_node_info_proto_init() }
func file_staking_node_info_proto_init() {
	if File_staking_node_info_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_staking_node_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_staking_node_info_proto_goTypes,
		DependencyIndexes: file_staking_node_info_proto_depIdxs,
		MessageInfos:      file_staking_node_info_proto_msgTypes,
	}.Build()
	File_staking_node_info_proto = out.File
	file_staking_node_info_proto_rawDesc = nil
	file_staking_node_info_proto_goTypes = nil
	file_staking_node_info_proto_depIdxs = nil
}
