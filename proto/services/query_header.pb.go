//*
// # Query Header
// Messages that comprise a header sent with each query request.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: query_header.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// The type of query response.<br/>
//
// This SHALL be answer-only as a default.<br/>
// This value SHALL support an "estimated cost" type.<br/>
// This value SHOULD support a "state proof" type, when available.
type ResponseType int32

const (
	// *
	// A response with the query answer.
	ResponseType_ANSWER_ONLY ResponseType = 0
	// *
	// A response with both the query answer and a state proof.
	ResponseType_ANSWER_STATE_PROOF ResponseType = 1
	// *
	// A response with the estimated cost to answer the query.
	ResponseType_COST_ANSWER ResponseType = 2
	// *
	// A response with the estimated cost to answer and a state proof.
	ResponseType_COST_ANSWER_STATE_PROOF ResponseType = 3
)

// Enum value maps for ResponseType.
var (
	ResponseType_name = map[int32]string{
		0: "ANSWER_ONLY",
		1: "ANSWER_STATE_PROOF",
		2: "COST_ANSWER",
		3: "COST_ANSWER_STATE_PROOF",
	}
	ResponseType_value = map[string]int32{
		"ANSWER_ONLY":             0,
		"ANSWER_STATE_PROOF":      1,
		"COST_ANSWER":             2,
		"COST_ANSWER_STATE_PROOF": 3,
	}
)

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_query_header_proto_enumTypes[0].Descriptor()
}

func (ResponseType) Type() protoreflect.EnumType {
	return &file_query_header_proto_enumTypes[0]
}

func (x ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseType.Descriptor instead.
func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_query_header_proto_rawDescGZIP(), []int{0}
}

// *
// A standard query header.<br/>
// Each query from the client to the node must contain a QueryHeader, which
// specifies the desired response type, and includes a payment transaction
// that will compensate the network for responding to the query.
// The payment may be blank if the query is free.
//
// The payment transaction MUST be a `cryptoTransfer` from the payer account
// to the account of the node where the query is submitted.<br/>
// If the payment is sufficient, the network SHALL respond with the response
// type requested.<br/>
// If the response type is `COST_ANSWER` the payment MUST be unset.
// A state proof SHALL be available for some types of information.<br/>
// A state proof SHALL be available for a Record, but not a receipt, and the
// response entry for each supported "get info" query.
type QueryHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A signed `CryptoTransferTransaction` to pay query fees.
	// <p>
	// This MUST transfer HBAR from the "payer" to the responding node account
	// sufficient to pay the query fees.
	Payment *Transaction `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
	// *
	// A type of query response requested.
	ResponseType  ResponseType `protobuf:"varint,2,opt,name=responseType,proto3,enum=proto.ResponseType" json:"responseType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryHeader) Reset() {
	*x = QueryHeader{}
	mi := &file_query_header_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHeader) ProtoMessage() {}

func (x *QueryHeader) ProtoReflect() protoreflect.Message {
	mi := &file_query_header_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHeader.ProtoReflect.Descriptor instead.
func (*QueryHeader) Descriptor() ([]byte, []int) {
	return file_query_header_proto_rawDescGZIP(), []int{0}
}

func (x *QueryHeader) GetPayment() *Transaction {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *QueryHeader) GetResponseType() ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return ResponseType_ANSWER_ONLY
}

var File_query_header_proto protoreflect.FileDescriptor

const file_query_header_proto_rawDesc = "" +
	"\n" +
	"\x12query_header.proto\x12\x05proto\x1a\x11transaction.proto\"t\n" +
	"\vQueryHeader\x12,\n" +
	"\apayment\x18\x01 \x01(\v2\x12.proto.TransactionR\apayment\x127\n" +
	"\fresponseType\x18\x02 \x01(\x0e2\x13.proto.ResponseTypeR\fresponseType*e\n" +
	"\fResponseType\x12\x0f\n" +
	"\vANSWER_ONLY\x10\x00\x12\x16\n" +
	"\x12ANSWER_STATE_PROOF\x10\x01\x12\x0f\n" +
	"\vCOST_ANSWER\x10\x02\x12\x1b\n" +
	"\x17COST_ANSWER_STATE_PROOF\x10\x03B&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_query_header_proto_rawDescOnce sync.Once
	file_query_header_proto_rawDescData []byte
)

func file_query_header_proto_rawDescGZIP() []byte {
	file_query_header_proto_rawDescOnce.Do(func() {
		file_query_header_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_query_header_proto_rawDesc), len(file_query_header_proto_rawDesc)))
	})
	return file_query_header_proto_rawDescData
}

var file_query_header_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_query_header_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_query_header_proto_goTypes = []any{
	(ResponseType)(0),   // 0: proto.ResponseType
	(*QueryHeader)(nil), // 1: proto.QueryHeader
	(*Transaction)(nil), // 2: proto.Transaction
}
var file_query_header_proto_depIdxs = []int32{
	2, // 0: proto.QueryHeader.payment:type_name -> proto.Transaction
	0, // 1: proto.QueryHeader.responseType:type_name -> proto.ResponseType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_query_header_proto_init() }
func file_query_header_proto_init() {
	if File_query_header_proto != nil {
		return
	}
	file_transaction_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_query_header_proto_rawDesc), len(file_query_header_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_query_header_proto_goTypes,
		DependencyIndexes: file_query_header_proto_depIdxs,
		EnumInfos:         file_query_header_proto_enumTypes,
		MessageInfos:      file_query_header_proto_msgTypes,
	}.Build()
	File_query_header_proto = out.File
	file_query_header_proto_goTypes = nil
	file_query_header_proto_depIdxs = nil
}
