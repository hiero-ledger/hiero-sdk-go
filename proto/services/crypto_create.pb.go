//*
// # Crypto Create
// Messages to create a new end-user account within the distributed ledger.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: crypto_create.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Create a new account.
//
// If the auto_renew_account field is set, the key of the referenced account
// MUST sign this transaction.<br/>
// Current limitations REQUIRE that `shardID` and `realmID` both MUST be `0`.
// This is expected to change in the future.
//
// ### Block Stream Effects
// The newly created account SHALL be included in State Changes.
type CryptoCreateTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The identifying key for this account.
	// This key represents the account owner, and is required for most actions
	// involving this account that do not modify the account itself. This key
	// may also identify the account for smart contracts.
	// <p>
	// This field is REQUIRED.
	// This `Key` MUST NOT be an empty `KeyList` and MUST contain at least one
	// "primitive" (i.e. cryptographic) key value.
	Key *Key `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// *
	// An amount, in tinybar, to deposit to the newly created account.
	// <p>
	// The deposited amount SHALL be debited to the "payer" account for this
	// transaction.
	InitialBalance uint64 `protobuf:"varint,2,opt,name=initialBalance,proto3" json:"initialBalance,omitempty"`
	// *
	// Use `staked_id` instead.<br/>
	// An account identifier for a staking proxy.
	//
	// Deprecated: Marked as deprecated in crypto_create.proto.
	ProxyAccountID *AccountID `protobuf:"bytes,3,opt,name=proxyAccountID,proto3" json:"proxyAccountID,omitempty"`
	// *
	// Removed prior to the first available history, and may be related to an
	// early design dead-end.<br/>
	// An amount below which record stream records would not be created for
	// a transaction that reduces this account balance.
	//
	// Deprecated: Marked as deprecated in crypto_create.proto.
	SendRecordThreshold uint64 `protobuf:"varint,6,opt,name=sendRecordThreshold,proto3" json:"sendRecordThreshold,omitempty"`
	// *
	// Removed prior to the first available history, and may be related to an
	// early design dead-end.<br/>
	// An amount below which record stream records would not be created for
	// a transaction that increases this account balance.
	//
	// Deprecated: Marked as deprecated in crypto_create.proto.
	ReceiveRecordThreshold uint64 `protobuf:"varint,7,opt,name=receiveRecordThreshold,proto3" json:"receiveRecordThreshold,omitempty"`
	// *
	// A flag indicating the account holder must authorize all incoming
	// token transfers.
	// <p>
	// If this flag is set then any transaction that would result in adding
	// hbar or other tokens to this account balance MUST be signed by the
	// identifying key of this account (that is, the `key` field).<br/>
	// If this flag is set, then the account key (`key` field) MUST sign
	// this create transaction, in addition to the transaction payer.
	ReceiverSigRequired bool `protobuf:"varint,8,opt,name=receiverSigRequired,proto3" json:"receiverSigRequired,omitempty"`
	// *
	// The duration between account automatic renewals.<br/>
	// All entities in state may be charged "rent" occasionally (typically
	// every 90 days) to prevent unnecessary growth of the ledger. This value
	// sets the interval between such events for this account.
	// <p>
	// If the account balance (in HBAR) is insufficient to pay the full renewal
	// fee, the entire HBAR balance SHALL be consumed and the expiration for
	// the account SHALL be extended as far as the available balance can
	// support.<br/>
	// If the account HBAR balance is `0` when the account must be renewed, then
	// the account SHALL be deleted, and subsequently removed from state.
	AutoRenewPeriod *Duration `protobuf:"bytes,9,opt,name=autoRenewPeriod,proto3" json:"autoRenewPeriod,omitempty"`
	// *
	// The shard in which this account is created
	// <p>
	// Currently, this MUST be `0`.<br/>
	// If the desired shard is `0`, this SHOULD NOT be set.
	ShardID *ShardID `protobuf:"bytes,10,opt,name=shardID,proto3" json:"shardID,omitempty"`
	// *
	// The realm in which this account is created.
	// <p>
	// The shard number for this realm MUST match the value in `shardID`.<br/>
	// Currently, this MUST be `0` for both fields.<br/>
	// If the desired realm is `0`, this SHOULD NOT be set.
	RealmID *RealmID `protobuf:"bytes,11,opt,name=realmID,proto3" json:"realmID,omitempty"`
	// *
	// This field was never actually used or enabled, and is not expected to
	// ever be used in the future.<br/>
	//
	// Deprecated: Marked as deprecated in crypto_create.proto.
	NewRealmAdminKey *Key `protobuf:"bytes,12,opt,name=newRealmAdminKey,proto3" json:"newRealmAdminKey,omitempty"`
	// *
	// A short description of this Account.
	// <p>
	// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
	// (default 100) bytes when encoded as UTF-8.
	Memo string `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// A maximum number of tokens that can be auto-associated
	// with this account.<br/>
	// By default this value is 0 for all accounts except for automatically
	// created accounts (e.g. smart contracts), which default to -1.
	// <p>
	// If this value is `0`, then this account MUST manually associate to
	// a token before holding or transacting in that token.<br/>
	// This value MAY also be `-1` to indicate no limit.<br/>
	// This value MUST NOT be less than `-1`.
	MaxAutomaticTokenAssociations int32 `protobuf:"varint,14,opt,name=max_automatic_token_associations,json=maxAutomaticTokenAssociations,proto3" json:"max_automatic_token_associations,omitempty"`
	// Types that are valid to be assigned to StakedId:
	//
	//	*CryptoCreateTransactionBody_StakedAccountId
	//	*CryptoCreateTransactionBody_StakedNodeId
	StakedId isCryptoCreateTransactionBody_StakedId `protobuf_oneof:"staked_id"`
	// *
	// A boolean indicating that this account has chosen to decline rewards for
	// staking its balances.
	// <p>
	// This account MAY still stake its balances, but SHALL NOT receive reward
	// payments for doing so, if this value is set.
	DeclineReward bool `protobuf:"varint,17,opt,name=decline_reward,json=declineReward,proto3" json:"decline_reward,omitempty"`
	// *
	// Bytes to be used as the account's alias.
	// <p>
	// This value, if set, MUST be one of the following values<br/>
	// <ul>
	//
	//	<li>The 32-byte serialized form of the ED25519 account key.</li>
	//	<li>The 33-byte _compressed_ serialized form of the ECDSA(secp256k1)
	//	    account key.</li>
	//	<li>The 20-byte EVM address derived from a keccak-256 hash of the
	//	    ECDSA(secp256k1) account key</li>
	//
	// </ul>
	// All aliases within the network MUST be unique. If this value matches an
	// existing account alias, this `create` transaction SHALL fail.<br/>
	// If an account exists with a particular alias value, any transaction to
	// transfer value _to_ that alias SHALL deposit the transferred value in
	// the existing account, and SHALL NOT assess an account creation fee.<br/>
	// Once set, an account alias is immutable and MUST NOT be changed.
	Alias         []byte `protobuf:"bytes,18,opt,name=alias,proto3" json:"alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CryptoCreateTransactionBody) Reset() {
	*x = CryptoCreateTransactionBody{}
	mi := &file_crypto_create_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptoCreateTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoCreateTransactionBody) ProtoMessage() {}

func (x *CryptoCreateTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_create_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoCreateTransactionBody.ProtoReflect.Descriptor instead.
func (*CryptoCreateTransactionBody) Descriptor() ([]byte, []int) {
	return file_crypto_create_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoCreateTransactionBody) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CryptoCreateTransactionBody) GetInitialBalance() uint64 {
	if x != nil {
		return x.InitialBalance
	}
	return 0
}

// Deprecated: Marked as deprecated in crypto_create.proto.
func (x *CryptoCreateTransactionBody) GetProxyAccountID() *AccountID {
	if x != nil {
		return x.ProxyAccountID
	}
	return nil
}

// Deprecated: Marked as deprecated in crypto_create.proto.
func (x *CryptoCreateTransactionBody) GetSendRecordThreshold() uint64 {
	if x != nil {
		return x.SendRecordThreshold
	}
	return 0
}

// Deprecated: Marked as deprecated in crypto_create.proto.
func (x *CryptoCreateTransactionBody) GetReceiveRecordThreshold() uint64 {
	if x != nil {
		return x.ReceiveRecordThreshold
	}
	return 0
}

func (x *CryptoCreateTransactionBody) GetReceiverSigRequired() bool {
	if x != nil {
		return x.ReceiverSigRequired
	}
	return false
}

func (x *CryptoCreateTransactionBody) GetAutoRenewPeriod() *Duration {
	if x != nil {
		return x.AutoRenewPeriod
	}
	return nil
}

func (x *CryptoCreateTransactionBody) GetShardID() *ShardID {
	if x != nil {
		return x.ShardID
	}
	return nil
}

func (x *CryptoCreateTransactionBody) GetRealmID() *RealmID {
	if x != nil {
		return x.RealmID
	}
	return nil
}

// Deprecated: Marked as deprecated in crypto_create.proto.
func (x *CryptoCreateTransactionBody) GetNewRealmAdminKey() *Key {
	if x != nil {
		return x.NewRealmAdminKey
	}
	return nil
}

func (x *CryptoCreateTransactionBody) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CryptoCreateTransactionBody) GetMaxAutomaticTokenAssociations() int32 {
	if x != nil {
		return x.MaxAutomaticTokenAssociations
	}
	return 0
}

func (x *CryptoCreateTransactionBody) GetStakedId() isCryptoCreateTransactionBody_StakedId {
	if x != nil {
		return x.StakedId
	}
	return nil
}

func (x *CryptoCreateTransactionBody) GetStakedAccountId() *AccountID {
	if x != nil {
		if x, ok := x.StakedId.(*CryptoCreateTransactionBody_StakedAccountId); ok {
			return x.StakedAccountId
		}
	}
	return nil
}

func (x *CryptoCreateTransactionBody) GetStakedNodeId() int64 {
	if x != nil {
		if x, ok := x.StakedId.(*CryptoCreateTransactionBody_StakedNodeId); ok {
			return x.StakedNodeId
		}
	}
	return 0
}

func (x *CryptoCreateTransactionBody) GetDeclineReward() bool {
	if x != nil {
		return x.DeclineReward
	}
	return false
}

func (x *CryptoCreateTransactionBody) GetAlias() []byte {
	if x != nil {
		return x.Alias
	}
	return nil
}

type isCryptoCreateTransactionBody_StakedId interface {
	isCryptoCreateTransactionBody_StakedId()
}

type CryptoCreateTransactionBody_StakedAccountId struct {
	// *
	// ID of the account to which this account is staking its balances.
	// <p>
	// If this account is not currently staking its balances, then this
	// field, if set, MUST be the sentinel value of `0.0.0`.
	StakedAccountId *AccountID `protobuf:"bytes,15,opt,name=staked_account_id,json=stakedAccountId,proto3,oneof"`
}

type CryptoCreateTransactionBody_StakedNodeId struct {
	// *
	// ID of the node this account is staked to.
	// <p>
	// If this account is not currently staking its balances, then this
	// field, if set, SHALL be the sentinel value of `-1`.<br/>
	// Wallet software SHOULD surface staking issues to users and provide a
	// simple mechanism to update staking to a new node ID in the event the
	// prior staked node ID ceases to be valid.
	StakedNodeId int64 `protobuf:"varint,16,opt,name=staked_node_id,json=stakedNodeId,proto3,oneof"`
}

func (*CryptoCreateTransactionBody_StakedAccountId) isCryptoCreateTransactionBody_StakedId() {}

func (*CryptoCreateTransactionBody_StakedNodeId) isCryptoCreateTransactionBody_StakedId() {}

var File_crypto_create_proto protoreflect.FileDescriptor

const file_crypto_create_proto_rawDesc = "" +
	"\n" +
	"\x13crypto_create.proto\x12\x05proto\x1a\x11basic_types.proto\x1a\x0eduration.proto\"\xab\x06\n" +
	"\x1bCryptoCreateTransactionBody\x12\x1c\n" +
	"\x03key\x18\x01 \x01(\v2\n" +
	".proto.KeyR\x03key\x12&\n" +
	"\x0einitialBalance\x18\x02 \x01(\x04R\x0einitialBalance\x12<\n" +
	"\x0eproxyAccountID\x18\x03 \x01(\v2\x10.proto.AccountIDB\x02\x18\x01R\x0eproxyAccountID\x124\n" +
	"\x13sendRecordThreshold\x18\x06 \x01(\x04B\x02\x18\x01R\x13sendRecordThreshold\x12:\n" +
	"\x16receiveRecordThreshold\x18\a \x01(\x04B\x02\x18\x01R\x16receiveRecordThreshold\x120\n" +
	"\x13receiverSigRequired\x18\b \x01(\bR\x13receiverSigRequired\x129\n" +
	"\x0fautoRenewPeriod\x18\t \x01(\v2\x0f.proto.DurationR\x0fautoRenewPeriod\x12(\n" +
	"\ashardID\x18\n" +
	" \x01(\v2\x0e.proto.ShardIDR\ashardID\x12(\n" +
	"\arealmID\x18\v \x01(\v2\x0e.proto.RealmIDR\arealmID\x12:\n" +
	"\x10newRealmAdminKey\x18\f \x01(\v2\n" +
	".proto.KeyB\x02\x18\x01R\x10newRealmAdminKey\x12\x12\n" +
	"\x04memo\x18\r \x01(\tR\x04memo\x12G\n" +
	" max_automatic_token_associations\x18\x0e \x01(\x05R\x1dmaxAutomaticTokenAssociations\x12>\n" +
	"\x11staked_account_id\x18\x0f \x01(\v2\x10.proto.AccountIDH\x00R\x0fstakedAccountId\x12&\n" +
	"\x0estaked_node_id\x18\x10 \x01(\x03H\x00R\fstakedNodeId\x12%\n" +
	"\x0edecline_reward\x18\x11 \x01(\bR\rdeclineReward\x12\x14\n" +
	"\x05alias\x18\x12 \x01(\fR\x05aliasB\v\n" +
	"\tstaked_idJ\x04\b\x04\x10\x05J\x04\b\x05\x10\x06B&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_crypto_create_proto_rawDescOnce sync.Once
	file_crypto_create_proto_rawDescData []byte
)

func file_crypto_create_proto_rawDescGZIP() []byte {
	file_crypto_create_proto_rawDescOnce.Do(func() {
		file_crypto_create_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_crypto_create_proto_rawDesc), len(file_crypto_create_proto_rawDesc)))
	})
	return file_crypto_create_proto_rawDescData
}

var file_crypto_create_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_crypto_create_proto_goTypes = []any{
	(*CryptoCreateTransactionBody)(nil), // 0: proto.CryptoCreateTransactionBody
	(*Key)(nil),                         // 1: proto.Key
	(*AccountID)(nil),                   // 2: proto.AccountID
	(*Duration)(nil),                    // 3: proto.Duration
	(*ShardID)(nil),                     // 4: proto.ShardID
	(*RealmID)(nil),                     // 5: proto.RealmID
}
var file_crypto_create_proto_depIdxs = []int32{
	1, // 0: proto.CryptoCreateTransactionBody.key:type_name -> proto.Key
	2, // 1: proto.CryptoCreateTransactionBody.proxyAccountID:type_name -> proto.AccountID
	3, // 2: proto.CryptoCreateTransactionBody.autoRenewPeriod:type_name -> proto.Duration
	4, // 3: proto.CryptoCreateTransactionBody.shardID:type_name -> proto.ShardID
	5, // 4: proto.CryptoCreateTransactionBody.realmID:type_name -> proto.RealmID
	1, // 5: proto.CryptoCreateTransactionBody.newRealmAdminKey:type_name -> proto.Key
	2, // 6: proto.CryptoCreateTransactionBody.staked_account_id:type_name -> proto.AccountID
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_crypto_create_proto_init() }
func file_crypto_create_proto_init() {
	if File_crypto_create_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_duration_proto_init()
	file_crypto_create_proto_msgTypes[0].OneofWrappers = []any{
		(*CryptoCreateTransactionBody_StakedAccountId)(nil),
		(*CryptoCreateTransactionBody_StakedNodeId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_crypto_create_proto_rawDesc), len(file_crypto_create_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_crypto_create_proto_goTypes,
		DependencyIndexes: file_crypto_create_proto_depIdxs,
		MessageInfos:      file_crypto_create_proto_msgTypes,
	}.Build()
	File_crypto_create_proto = out.File
	file_crypto_create_proto_goTypes = nil
	file_crypto_create_proto_depIdxs = nil
}
