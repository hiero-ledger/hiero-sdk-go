//*
// # Smart Contract Service
// gRPC service definitions for calls to the Hedera EVM-compatible
// Smart Contract service.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: smart_contract_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SmartContractService_CreateContract_FullMethodName          = "/proto.SmartContractService/createContract"
	SmartContractService_UpdateContract_FullMethodName          = "/proto.SmartContractService/updateContract"
	SmartContractService_ContractCallMethod_FullMethodName      = "/proto.SmartContractService/contractCallMethod"
	SmartContractService_ContractCallLocalMethod_FullMethodName = "/proto.SmartContractService/contractCallLocalMethod"
	SmartContractService_GetContractInfo_FullMethodName         = "/proto.SmartContractService/getContractInfo"
	SmartContractService_ContractGetBytecode_FullMethodName     = "/proto.SmartContractService/ContractGetBytecode"
	SmartContractService_GetBySolidityID_FullMethodName         = "/proto.SmartContractService/getBySolidityID"
	SmartContractService_GetTxRecordByContractID_FullMethodName = "/proto.SmartContractService/getTxRecordByContractID"
	SmartContractService_DeleteContract_FullMethodName          = "/proto.SmartContractService/deleteContract"
	SmartContractService_SystemDelete_FullMethodName            = "/proto.SmartContractService/systemDelete"
	SmartContractService_SystemUndelete_FullMethodName          = "/proto.SmartContractService/systemUndelete"
	SmartContractService_CallEthereum_FullMethodName            = "/proto.SmartContractService/callEthereum"
)

// SmartContractServiceClient is the client API for SmartContractService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// The Hedera Smart Contract Service (HSCS) provides an interface to an EVM
// compatible environment to create, store, manage, and execute smart contract
// calls. Smart Contracts implement useful and often highly complex
// interactions between individuals, systems, and the distributed ledger.
type SmartContractServiceClient interface {
	// *
	// Create a new smart contract.
	// <p>
	// If this transaction succeeds, the `ContractID` for the new smart
	// contract SHALL be set in the transaction receipt.<br/>
	// The contract is defined by the initial bytecode (or `initcode`).
	// The `initcode` SHALL be provided either in a previously created file,
	// or in the transaction body itself for very small contracts.<br/>
	// As part of contract creation, the constructor defined for the new
	// smart contract SHALL run with the parameters provided in
	// the `constructorParameters` field.<br/>
	// The gas to "power" that constructor MUST be provided via the `gas`
	// field, and SHALL be charged to the payer for this transaction.<br/>
	// If the contract _constructor_ stores information, it is charged gas for
	// that storage. There is a separate fee in HBAR to maintain that storage
	// until the expiration, and that fee SHALL be added to this transaction
	// as part of the _transaction fee_, rather than gas.
	CreateContract(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Modify a smart contract.<br/>
	// Any change other than updating the expiration time requires that the
	// contract be modifiable (has a valid `adminKey`) and that the
	// transaction be signed by the `adminKey`
	// <p>
	// Fields _not set_ on the request SHALL NOT be modified.
	UpdateContract(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Call a function of a given smart contract, providing function parameter
	// inputs as needed.
	// <p>
	// Resource ("gas") charges SHALL include all relevant fees incurred by
	// the contract execution, including any storage required.<br/>
	// The total transaction fee SHALL incorporate all of the "gas" actually
	// consumed as well as the standard fees for transaction handling,
	// data transfers, signature verification, etc...
	ContractCallMethod(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Call a query function of a given smart contract, providing
	// function parameter inputs as needed.<br/>
	// This is performed locally on the particular node that the client is
	// communicating with. Executing the call locally is faster and less
	// costly, but imposes certain restrictions.
	// <p>
	// The call MUST NOT change the state of the contract instance. This also
	// precludes any expenditure or transfer of HBAR or other tokens.<br/>
	// The call SHALL NOT have a separate consensus timestamp.<br/>
	// The call SHALL NOT generate a record nor a receipt.<br/>
	// The response SHALL contain the output returned by the function call.<br/>
	// <p>
	// This is generally useful for calling accessor functions which read
	// (query) state without changes or side effects. Any contract call that
	// would use the `STATICCALL` opcode MAY be called via contract call local
	// with performance and cost benefits.
	// <p>
	// Unlike a ContractCall transaction, the node SHALL always consume the
	// _entire_ amount of offered "gas" in determining the fee for this query,
	// so accurate gas estimation is important.
	ContractCallLocalMethod(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// A standard query to obtain detailed information for a smart contract.
	GetContractInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// A standard query to read the current bytecode for a smart contract.
	ContractGetBytecode(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// Deprecated: Do not use.
	// *
	// A standard query to obtain account and contract identifiers for a smart
	// contract, given the Solidity identifier for that contract.
	GetBySolidityID(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// Deprecated: Do not use.
	// *
	// <blockquote>This query is no longer supported.</blockquote>
	// This query always returned an empty record list.
	GetTxRecordByContractID(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// Delete a smart contract, and transfer any remaining HBAR balance
	// to a designated account.
	// <p>
	// If this call succeeds then all subsequent calls to that smart
	// contract SHALL fail.<br/>
	DeleteContract(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Deprecated: Do not use.
	// *
	// Delete a smart contract, as a system-initiated deletion, this
	// SHALL NOT transfer balances.
	// <blockquote>
	// This call is an administrative function of the Hedera network, and
	// SHALL require network administration authorization.<br/>
	// This transaction MUST be signed by one of the network administration
	// accounts (typically `0.0.2` through `0.0.59`, as defined in the
	// `api-permission.properties` file).
	// </blockquote>
	// If this call succeeds then all subsequent calls to that smart
	// contract SHALL fail.<br/>
	SystemDelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Deprecated: Do not use.
	// *
	// Un-Delete a smart contract, returning it (mostly) to its state
	// prior to deletion.
	// <p>
	// The contract to be restored MUST have been deleted via `systemDelete`.
	// If the contract was deleted via `deleteContract`, it
	// SHALL NOT be recoverable.
	// <blockquote>
	// This call is an administrative function of the Hedera network, and
	// SHALL require network administration authorization.<br/>
	// This transaction MUST be signed by one of the network administration
	// accounts (typically `0.0.2` through `0.0.59`, as defined in the
	// `api-permission.properties` file).
	// </blockquote>
	// If this call succeeds then subsequent calls to that smart
	// contract MAY succeed.<br/>
	SystemUndelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Make an Ethereum transaction "call" with all data in Ethereum formats,
	// including the contract alias.
	// <p>
	// Call data MAY be in the transaction, or stored within a "File".<br/>
	// The caller MAY offer additional gas above what is offered in the call
	// data, but MAY be charged up to 80% of that value if the amount required
	// is less than this "floor" amount.
	CallEthereum(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type smartContractServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmartContractServiceClient(cc grpc.ClientConnInterface) SmartContractServiceClient {
	return &smartContractServiceClient{cc}
}

func (c *smartContractServiceClient) CreateContract(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_CreateContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) UpdateContract(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_UpdateContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) ContractCallMethod(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_ContractCallMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) ContractCallLocalMethod(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SmartContractService_ContractCallLocalMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) GetContractInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SmartContractService_GetContractInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) ContractGetBytecode(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SmartContractService_ContractGetBytecode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *smartContractServiceClient) GetBySolidityID(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SmartContractService_GetBySolidityID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *smartContractServiceClient) GetTxRecordByContractID(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SmartContractService_GetTxRecordByContractID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) DeleteContract(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_DeleteContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *smartContractServiceClient) SystemDelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_SystemDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *smartContractServiceClient) SystemUndelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_SystemUndelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) CallEthereum(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_CallEthereum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmartContractServiceServer is the server API for SmartContractService service.
// All implementations must embed UnimplementedSmartContractServiceServer
// for forward compatibility.
//
// *
// The Hedera Smart Contract Service (HSCS) provides an interface to an EVM
// compatible environment to create, store, manage, and execute smart contract
// calls. Smart Contracts implement useful and often highly complex
// interactions between individuals, systems, and the distributed ledger.
type SmartContractServiceServer interface {
	// *
	// Create a new smart contract.
	// <p>
	// If this transaction succeeds, the `ContractID` for the new smart
	// contract SHALL be set in the transaction receipt.<br/>
	// The contract is defined by the initial bytecode (or `initcode`).
	// The `initcode` SHALL be provided either in a previously created file,
	// or in the transaction body itself for very small contracts.<br/>
	// As part of contract creation, the constructor defined for the new
	// smart contract SHALL run with the parameters provided in
	// the `constructorParameters` field.<br/>
	// The gas to "power" that constructor MUST be provided via the `gas`
	// field, and SHALL be charged to the payer for this transaction.<br/>
	// If the contract _constructor_ stores information, it is charged gas for
	// that storage. There is a separate fee in HBAR to maintain that storage
	// until the expiration, and that fee SHALL be added to this transaction
	// as part of the _transaction fee_, rather than gas.
	CreateContract(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Modify a smart contract.<br/>
	// Any change other than updating the expiration time requires that the
	// contract be modifiable (has a valid `adminKey`) and that the
	// transaction be signed by the `adminKey`
	// <p>
	// Fields _not set_ on the request SHALL NOT be modified.
	UpdateContract(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Call a function of a given smart contract, providing function parameter
	// inputs as needed.
	// <p>
	// Resource ("gas") charges SHALL include all relevant fees incurred by
	// the contract execution, including any storage required.<br/>
	// The total transaction fee SHALL incorporate all of the "gas" actually
	// consumed as well as the standard fees for transaction handling,
	// data transfers, signature verification, etc...
	ContractCallMethod(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Call a query function of a given smart contract, providing
	// function parameter inputs as needed.<br/>
	// This is performed locally on the particular node that the client is
	// communicating with. Executing the call locally is faster and less
	// costly, but imposes certain restrictions.
	// <p>
	// The call MUST NOT change the state of the contract instance. This also
	// precludes any expenditure or transfer of HBAR or other tokens.<br/>
	// The call SHALL NOT have a separate consensus timestamp.<br/>
	// The call SHALL NOT generate a record nor a receipt.<br/>
	// The response SHALL contain the output returned by the function call.<br/>
	// <p>
	// This is generally useful for calling accessor functions which read
	// (query) state without changes or side effects. Any contract call that
	// would use the `STATICCALL` opcode MAY be called via contract call local
	// with performance and cost benefits.
	// <p>
	// Unlike a ContractCall transaction, the node SHALL always consume the
	// _entire_ amount of offered "gas" in determining the fee for this query,
	// so accurate gas estimation is important.
	ContractCallLocalMethod(context.Context, *Query) (*Response, error)
	// *
	// A standard query to obtain detailed information for a smart contract.
	GetContractInfo(context.Context, *Query) (*Response, error)
	// *
	// A standard query to read the current bytecode for a smart contract.
	ContractGetBytecode(context.Context, *Query) (*Response, error)
	// Deprecated: Do not use.
	// *
	// A standard query to obtain account and contract identifiers for a smart
	// contract, given the Solidity identifier for that contract.
	GetBySolidityID(context.Context, *Query) (*Response, error)
	// Deprecated: Do not use.
	// *
	// <blockquote>This query is no longer supported.</blockquote>
	// This query always returned an empty record list.
	GetTxRecordByContractID(context.Context, *Query) (*Response, error)
	// *
	// Delete a smart contract, and transfer any remaining HBAR balance
	// to a designated account.
	// <p>
	// If this call succeeds then all subsequent calls to that smart
	// contract SHALL fail.<br/>
	DeleteContract(context.Context, *Transaction) (*TransactionResponse, error)
	// Deprecated: Do not use.
	// *
	// Delete a smart contract, as a system-initiated deletion, this
	// SHALL NOT transfer balances.
	// <blockquote>
	// This call is an administrative function of the Hedera network, and
	// SHALL require network administration authorization.<br/>
	// This transaction MUST be signed by one of the network administration
	// accounts (typically `0.0.2` through `0.0.59`, as defined in the
	// `api-permission.properties` file).
	// </blockquote>
	// If this call succeeds then all subsequent calls to that smart
	// contract SHALL fail.<br/>
	SystemDelete(context.Context, *Transaction) (*TransactionResponse, error)
	// Deprecated: Do not use.
	// *
	// Un-Delete a smart contract, returning it (mostly) to its state
	// prior to deletion.
	// <p>
	// The contract to be restored MUST have been deleted via `systemDelete`.
	// If the contract was deleted via `deleteContract`, it
	// SHALL NOT be recoverable.
	// <blockquote>
	// This call is an administrative function of the Hedera network, and
	// SHALL require network administration authorization.<br/>
	// This transaction MUST be signed by one of the network administration
	// accounts (typically `0.0.2` through `0.0.59`, as defined in the
	// `api-permission.properties` file).
	// </blockquote>
	// If this call succeeds then subsequent calls to that smart
	// contract MAY succeed.<br/>
	SystemUndelete(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Make an Ethereum transaction "call" with all data in Ethereum formats,
	// including the contract alias.
	// <p>
	// Call data MAY be in the transaction, or stored within a "File".<br/>
	// The caller MAY offer additional gas above what is offered in the call
	// data, but MAY be charged up to 80% of that value if the amount required
	// is less than this "floor" amount.
	CallEthereum(context.Context, *Transaction) (*TransactionResponse, error)
	mustEmbedUnimplementedSmartContractServiceServer()
}

// UnimplementedSmartContractServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSmartContractServiceServer struct{}

func (UnimplementedSmartContractServiceServer) CreateContract(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContract not implemented")
}
func (UnimplementedSmartContractServiceServer) UpdateContract(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContract not implemented")
}
func (UnimplementedSmartContractServiceServer) ContractCallMethod(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCallMethod not implemented")
}
func (UnimplementedSmartContractServiceServer) ContractCallLocalMethod(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCallLocalMethod not implemented")
}
func (UnimplementedSmartContractServiceServer) GetContractInfo(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractInfo not implemented")
}
func (UnimplementedSmartContractServiceServer) ContractGetBytecode(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractGetBytecode not implemented")
}
func (UnimplementedSmartContractServiceServer) GetBySolidityID(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySolidityID not implemented")
}
func (UnimplementedSmartContractServiceServer) GetTxRecordByContractID(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxRecordByContractID not implemented")
}
func (UnimplementedSmartContractServiceServer) DeleteContract(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContract not implemented")
}
func (UnimplementedSmartContractServiceServer) SystemDelete(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemDelete not implemented")
}
func (UnimplementedSmartContractServiceServer) SystemUndelete(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemUndelete not implemented")
}
func (UnimplementedSmartContractServiceServer) CallEthereum(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallEthereum not implemented")
}
func (UnimplementedSmartContractServiceServer) mustEmbedUnimplementedSmartContractServiceServer() {}
func (UnimplementedSmartContractServiceServer) testEmbeddedByValue()                              {}

// UnsafeSmartContractServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmartContractServiceServer will
// result in compilation errors.
type UnsafeSmartContractServiceServer interface {
	mustEmbedUnimplementedSmartContractServiceServer()
}

func RegisterSmartContractServiceServer(s grpc.ServiceRegistrar, srv SmartContractServiceServer) {
	// If the following call pancis, it indicates UnimplementedSmartContractServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SmartContractService_ServiceDesc, srv)
}

func _SmartContractService_CreateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).CreateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_CreateContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).CreateContract(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_UpdateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).UpdateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_UpdateContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).UpdateContract(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_ContractCallMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).ContractCallMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_ContractCallMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).ContractCallMethod(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_ContractCallLocalMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).ContractCallLocalMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_ContractCallLocalMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).ContractCallLocalMethod(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_GetContractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).GetContractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_GetContractInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).GetContractInfo(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_ContractGetBytecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).ContractGetBytecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_ContractGetBytecode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).ContractGetBytecode(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_GetBySolidityID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).GetBySolidityID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_GetBySolidityID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).GetBySolidityID(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_GetTxRecordByContractID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).GetTxRecordByContractID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_GetTxRecordByContractID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).GetTxRecordByContractID(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_DeleteContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).DeleteContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_DeleteContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).DeleteContract(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_SystemDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).SystemDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_SystemDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).SystemDelete(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_SystemUndelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).SystemUndelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_SystemUndelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).SystemUndelete(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_CallEthereum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).CallEthereum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_CallEthereum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).CallEthereum(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

// SmartContractService_ServiceDesc is the grpc.ServiceDesc for SmartContractService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmartContractService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SmartContractService",
	HandlerType: (*SmartContractServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createContract",
			Handler:    _SmartContractService_CreateContract_Handler,
		},
		{
			MethodName: "updateContract",
			Handler:    _SmartContractService_UpdateContract_Handler,
		},
		{
			MethodName: "contractCallMethod",
			Handler:    _SmartContractService_ContractCallMethod_Handler,
		},
		{
			MethodName: "contractCallLocalMethod",
			Handler:    _SmartContractService_ContractCallLocalMethod_Handler,
		},
		{
			MethodName: "getContractInfo",
			Handler:    _SmartContractService_GetContractInfo_Handler,
		},
		{
			MethodName: "ContractGetBytecode",
			Handler:    _SmartContractService_ContractGetBytecode_Handler,
		},
		{
			MethodName: "getBySolidityID",
			Handler:    _SmartContractService_GetBySolidityID_Handler,
		},
		{
			MethodName: "getTxRecordByContractID",
			Handler:    _SmartContractService_GetTxRecordByContractID_Handler,
		},
		{
			MethodName: "deleteContract",
			Handler:    _SmartContractService_DeleteContract_Handler,
		},
		{
			MethodName: "systemDelete",
			Handler:    _SmartContractService_SystemDelete_Handler,
		},
		{
			MethodName: "systemUndelete",
			Handler:    _SmartContractService_SystemUndelete_Handler,
		},
		{
			MethodName: "callEthereum",
			Handler:    _SmartContractService_CallEthereum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smart_contract_service.proto",
}
