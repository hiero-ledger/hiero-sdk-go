//*
// # Freeze
// Transaction body for a network "freeze" transaction.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: freeze.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A transaction body for all five freeze transactions.
//
// Combining five different transactions into a single message, this
// transaction body MUST support options to schedule a freeze, abort a
// scheduled freeze, prepare a software upgrade, prepare a telemetry
// upgrade, or initiate a software upgrade.
//
// For a scheduled freeze, at the scheduled time, according to
// network consensus time
//   - A freeze (`FREEZE_ONLY`) causes the network nodes to stop creating
//     events or accepting transactions, and enter a persistent
//     maintenance state.
//   - A freeze upgrade (`FREEZE_UPGRADE`) causes the network nodes to stop
//     creating events or accepting transactions, and upgrade the node software
//     from a previously prepared upgrade package. The network nodes then
//     restart and rejoin the network after upgrading.
//
// For other freeze types, immediately upon processing the freeze transaction
//   - A Freeze Abort (`FREEZE_ABORT`) cancels any pending scheduled freeze.
//   - A prepare upgrade (`PREPARE_UPGRADE`) begins to extract the contents of
//     the specified upgrade file to the local filesystem.
//   - A telemetry upgrade (`TELEMETRY_UPGRADE`) causes the network nodes to
//     extract a telemetry upgrade package to the local filesystem and signal
//     other software on the machine to upgrade, without impacting the node or
//     network processing.
//
// ### Block Stream Effects
// Unknown
type FreezeTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Rejected if set; replace with `start_time`.<br/>
	// The start hour (in UTC time), a value between 0 and 23
	//
	// Deprecated: Marked as deprecated in freeze.proto.
	StartHour int32 `protobuf:"varint,1,opt,name=startHour,proto3" json:"startHour,omitempty"`
	// *
	// Rejected if set; replace with `start_time`.<br/>
	// The start minute (in UTC time), a value between 0 and 59
	//
	// Deprecated: Marked as deprecated in freeze.proto.
	StartMin int32 `protobuf:"varint,2,opt,name=startMin,proto3" json:"startMin,omitempty"`
	// *
	// Rejected if set; end time is neither assigned nor guaranteed and depends
	// on many uncontrolled factors.<br/>
	// The end hour (in UTC time), a value between 0 and 23
	//
	// Deprecated: Marked as deprecated in freeze.proto.
	EndHour int32 `protobuf:"varint,3,opt,name=endHour,proto3" json:"endHour,omitempty"`
	// *
	// Rejected if set; end time is neither assigned nor guaranteed and depends
	// on many uncontrolled factors.<br/>
	// The end minute (in UTC time), a value between 0 and 59
	//
	// Deprecated: Marked as deprecated in freeze.proto.
	EndMin int32 `protobuf:"varint,4,opt,name=endMin,proto3" json:"endMin,omitempty"`
	// *
	// An upgrade file.
	// <p>
	// If set, the identifier of a file in network state.<br/>
	// The contents of this file MUST be a `zip` file and this data
	// SHALL be extracted to the node filesystem during a
	// `PREPARE_UPGRADE` or `TELEMETRY_UPGRADE` freeze type.<br/>
	// The `file_hash` field MUST match the SHA384 hash of the content
	// of this file.<br/>
	// The extracted data SHALL be used to perform a network software update
	// if a `FREEZE_UPGRADE` freeze type is subsequently processed.
	UpdateFile *FileID `protobuf:"bytes,5,opt,name=update_file,json=updateFile,proto3" json:"update_file,omitempty"`
	// *
	// A SHA384 hash of file content.<br/>
	// This is a hash of the file identified by `update_file`.
	// <p>
	// This MUST be set if `update_file` is set, and MUST match the
	// SHA384 hash of the contents of that file.
	FileHash []byte `protobuf:"bytes,6,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	// *
	// A start time for the freeze.
	// <p>
	// If this field is REQUIRED for the specified `freeze_type`, then
	// when the network consensus time reaches this instant<ol>
	//
	//	<li>The network SHALL stop accepting transactions.</li>
	//	<li>The network SHALL gossip a freeze state.</li>
	//	<li>The nodes SHALL, in coordinated order, disconnect and
	//	    shut down.</li>
	//	<li>The nodes SHALL halt or perform a software upgrade, depending
	//	    on `freeze_type`.</li>
	//	<li>If the `freeze_type` is `FREEZE_UPGRADE`, the nodes SHALL
	//	    restart and rejoin the network upon completion of the
	//	    software upgrade.</li>
	//
	// </ol>
	// <blockquote>
	// If the `freeze_type` is `TELEMETRY_UPGRADE`, the start time is required,
	// but the network SHALL NOT stop, halt, or interrupt transaction
	// processing. The required field is an historical anomaly and SHOULD
	// change in a future release.</blockquote>
	StartTime *Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// *
	// The type of freeze.
	// <p>
	// This REQUIRED field effectively selects between five quite different
	// transactions in the same transaction body. Depending on this value
	// the service may schedule a freeze, prepare upgrades, perform upgrades,
	// or even abort a previously scheduled freeze.
	FreezeType    FreezeType `protobuf:"varint,8,opt,name=freeze_type,json=freezeType,proto3,enum=proto.FreezeType" json:"freeze_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FreezeTransactionBody) Reset() {
	*x = FreezeTransactionBody{}
	mi := &file_freeze_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreezeTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreezeTransactionBody) ProtoMessage() {}

func (x *FreezeTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_freeze_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreezeTransactionBody.ProtoReflect.Descriptor instead.
func (*FreezeTransactionBody) Descriptor() ([]byte, []int) {
	return file_freeze_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in freeze.proto.
func (x *FreezeTransactionBody) GetStartHour() int32 {
	if x != nil {
		return x.StartHour
	}
	return 0
}

// Deprecated: Marked as deprecated in freeze.proto.
func (x *FreezeTransactionBody) GetStartMin() int32 {
	if x != nil {
		return x.StartMin
	}
	return 0
}

// Deprecated: Marked as deprecated in freeze.proto.
func (x *FreezeTransactionBody) GetEndHour() int32 {
	if x != nil {
		return x.EndHour
	}
	return 0
}

// Deprecated: Marked as deprecated in freeze.proto.
func (x *FreezeTransactionBody) GetEndMin() int32 {
	if x != nil {
		return x.EndMin
	}
	return 0
}

func (x *FreezeTransactionBody) GetUpdateFile() *FileID {
	if x != nil {
		return x.UpdateFile
	}
	return nil
}

func (x *FreezeTransactionBody) GetFileHash() []byte {
	if x != nil {
		return x.FileHash
	}
	return nil
}

func (x *FreezeTransactionBody) GetStartTime() *Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *FreezeTransactionBody) GetFreezeType() FreezeType {
	if x != nil {
		return x.FreezeType
	}
	return FreezeType_UNKNOWN_FREEZE_TYPE
}

var File_freeze_proto protoreflect.FileDescriptor

const file_freeze_proto_rawDesc = "" +
	"\n" +
	"\ffreeze.proto\x12\x05proto\x1a\x0ftimestamp.proto\x1a\x11basic_types.proto\x1a\x11freeze_type.proto\"\xc5\x02\n" +
	"\x15FreezeTransactionBody\x12 \n" +
	"\tstartHour\x18\x01 \x01(\x05B\x02\x18\x01R\tstartHour\x12\x1e\n" +
	"\bstartMin\x18\x02 \x01(\x05B\x02\x18\x01R\bstartMin\x12\x1c\n" +
	"\aendHour\x18\x03 \x01(\x05B\x02\x18\x01R\aendHour\x12\x1a\n" +
	"\x06endMin\x18\x04 \x01(\x05B\x02\x18\x01R\x06endMin\x12.\n" +
	"\vupdate_file\x18\x05 \x01(\v2\r.proto.FileIDR\n" +
	"updateFile\x12\x1b\n" +
	"\tfile_hash\x18\x06 \x01(\fR\bfileHash\x12/\n" +
	"\n" +
	"start_time\x18\a \x01(\v2\x10.proto.TimestampR\tstartTime\x122\n" +
	"\vfreeze_type\x18\b \x01(\x0e2\x11.proto.FreezeTypeR\n" +
	"freezeTypeB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_freeze_proto_rawDescOnce sync.Once
	file_freeze_proto_rawDescData []byte
)

func file_freeze_proto_rawDescGZIP() []byte {
	file_freeze_proto_rawDescOnce.Do(func() {
		file_freeze_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_freeze_proto_rawDesc), len(file_freeze_proto_rawDesc)))
	})
	return file_freeze_proto_rawDescData
}

var file_freeze_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_freeze_proto_goTypes = []any{
	(*FreezeTransactionBody)(nil), // 0: proto.FreezeTransactionBody
	(*FileID)(nil),                // 1: proto.FileID
	(*Timestamp)(nil),             // 2: proto.Timestamp
	(FreezeType)(0),               // 3: proto.FreezeType
}
var file_freeze_proto_depIdxs = []int32{
	1, // 0: proto.FreezeTransactionBody.update_file:type_name -> proto.FileID
	2, // 1: proto.FreezeTransactionBody.start_time:type_name -> proto.Timestamp
	3, // 2: proto.FreezeTransactionBody.freeze_type:type_name -> proto.FreezeType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_freeze_proto_init() }
func file_freeze_proto_init() {
	if File_freeze_proto != nil {
		return
	}
	file_timestamp_proto_init()
	file_basic_types_proto_init()
	file_freeze_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_freeze_proto_rawDesc), len(file_freeze_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_freeze_proto_goTypes,
		DependencyIndexes: file_freeze_proto_depIdxs,
		MessageInfos:      file_freeze_proto_msgTypes,
	}.Build()
	File_freeze_proto = out.File
	file_freeze_proto_goTypes = nil
	file_freeze_proto_depIdxs = nil
}
