//*
// # Token Mint
// Mint new tokens and deliver them to the token treasury. This is akin
// to how a fiat treasury will mint new coinage for circulation.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: token_mint.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Mint tokens and deliver the new tokens to the token treasury account.
//
// The token MUST have a `supply_key` set and that key MUST NOT
// be an empty `KeyList`.<br/>
// The token `supply_key` MUST sign this transaction.<br/>
// This operation SHALL increase the total supply for the token type by
// the number of tokens "minted".<br/>
// The total supply for the token type MUST NOT be increased above the
// maximum supply limit (2^63-1) by this transaction.<br/>
// The tokens minted SHALL be credited to the token treasury account.<br/>
// If the token is a fungible/common type, the amount MUST be specified.<br/>
// If the token is a non-fungible/unique type, the metadata bytes for each
// unique token MUST be specified in the `metadata` list.<br/>
// Each unique metadata MUST not exceed the global metadata size limit defined
// by the network configuration value `tokens.maxMetadataBytes`.<br/>
// The global batch size limit (`tokens.nfts.maxBatchSizeMint`) SHALL set
// the maximum number of individual NFT metadata permitted in a single
// `tokenMint` transaction.
//
// ### Block Stream Effects
// None
type TokenMintTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A token identifier.
	// <p>
	// This SHALL identify the token type to "mint".<br/>
	// The identified token MUST exist, and MUST NOT be deleted.
	Token *TokenID `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// *
	// An amount to mint to the Treasury Account.
	// <p>
	// This is interpreted as an amount in the smallest possible denomination
	// for the token (10<sup>-decimals</sup> whole tokens).<br/>
	// The balance for the token treasury account SHALL receive the newly
	// minted tokens.<br/>
	// If this value is equal to zero (`0`), the token SHOULD be a
	// non-fungible/unique type.<br/>
	// If this value is non-zero, the token MUST be a fungible/common type.
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// *
	// A list of metadata bytes.<br/>
	// <p>
	// One non-fungible/unique token SHALL be minted for each entry
	// in this list.<br/>
	// Each entry in this list MUST NOT be larger than the limit set by the
	// current network configuration value `tokens.maxMetadataBytes`.<br/>
	// This list MUST NOT contain more entries than the current limit set by
	// the network configuration value `tokens.nfts.maxBatchSizeMint`.<br/>
	// If this list is not empty, the token MUST be a
	// non-fungible/unique type.<br/>
	// If this list is empty, the token MUST be a fungible/common type.
	Metadata      [][]byte `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenMintTransactionBody) Reset() {
	*x = TokenMintTransactionBody{}
	mi := &file_token_mint_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenMintTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenMintTransactionBody) ProtoMessage() {}

func (x *TokenMintTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_token_mint_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenMintTransactionBody.ProtoReflect.Descriptor instead.
func (*TokenMintTransactionBody) Descriptor() ([]byte, []int) {
	return file_token_mint_proto_rawDescGZIP(), []int{0}
}

func (x *TokenMintTransactionBody) GetToken() *TokenID {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TokenMintTransactionBody) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TokenMintTransactionBody) GetMetadata() [][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_token_mint_proto protoreflect.FileDescriptor

const file_token_mint_proto_rawDesc = "" +
	"\n" +
	"\x10token_mint.proto\x12\x05proto\x1a\x11basic_types.proto\"t\n" +
	"\x18TokenMintTransactionBody\x12$\n" +
	"\x05token\x18\x01 \x01(\v2\x0e.proto.TokenIDR\x05token\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x04R\x06amount\x12\x1a\n" +
	"\bmetadata\x18\x03 \x03(\fR\bmetadataB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_token_mint_proto_rawDescOnce sync.Once
	file_token_mint_proto_rawDescData []byte
)

func file_token_mint_proto_rawDescGZIP() []byte {
	file_token_mint_proto_rawDescOnce.Do(func() {
		file_token_mint_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_token_mint_proto_rawDesc), len(file_token_mint_proto_rawDesc)))
	})
	return file_token_mint_proto_rawDescData
}

var file_token_mint_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_token_mint_proto_goTypes = []any{
	(*TokenMintTransactionBody)(nil), // 0: proto.TokenMintTransactionBody
	(*TokenID)(nil),                  // 1: proto.TokenID
}
var file_token_mint_proto_depIdxs = []int32{
	1, // 0: proto.TokenMintTransactionBody.token:type_name -> proto.TokenID
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_token_mint_proto_init() }
func file_token_mint_proto_init() {
	if File_token_mint_proto != nil {
		return
	}
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_token_mint_proto_rawDesc), len(file_token_mint_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_token_mint_proto_goTypes,
		DependencyIndexes: file_token_mint_proto_depIdxs,
		MessageInfos:      file_token_mint_proto_msgTypes,
	}.Build()
	File_token_mint_proto = out.File
	file_token_mint_proto_goTypes = nil
	file_token_mint_proto_depIdxs = nil
}
