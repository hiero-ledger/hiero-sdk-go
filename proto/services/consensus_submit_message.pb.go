//*
// # Submit Message
// Submit a message to a topic via the Hedera Consensus Service (HCS).
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: consensus_submit_message.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Consensus message "chunk" detail.<br/>
// This message carries information describing the way in which a message
// submitted for consensus is broken into multiple fragments to fit within
// network transaction size limits.
//
// The use of multiple message fragments is RECOMMENDED for any message
// greater than 4KiB in total size.
//
// ### Block Stream Effects
// None
type ConsensusMessageChunkInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The TransactionID of the first chunk.
	// <p>
	// This MUST be set for every chunk in a fragmented message.
	InitialTransactionID *TransactionID `protobuf:"bytes,1,opt,name=initialTransactionID,proto3" json:"initialTransactionID,omitempty"`
	// *
	// The total number of chunks in the message.
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// *
	// The sequence number (from 1 to total) of the current chunk
	// in the message.
	Number        int32 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsensusMessageChunkInfo) Reset() {
	*x = ConsensusMessageChunkInfo{}
	mi := &file_consensus_submit_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusMessageChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusMessageChunkInfo) ProtoMessage() {}

func (x *ConsensusMessageChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_submit_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusMessageChunkInfo.ProtoReflect.Descriptor instead.
func (*ConsensusMessageChunkInfo) Descriptor() ([]byte, []int) {
	return file_consensus_submit_message_proto_rawDescGZIP(), []int{0}
}

func (x *ConsensusMessageChunkInfo) GetInitialTransactionID() *TransactionID {
	if x != nil {
		return x.InitialTransactionID
	}
	return nil
}

func (x *ConsensusMessageChunkInfo) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ConsensusMessageChunkInfo) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

// *
// Submit a message for consensus.<br/>
// This transaction adds a new entry to the "end" of a topic, and provides
// the core function of the consensus service.
//
// Valid and authorized messages on valid topics SHALL be ordered by the
// consensus service, published in the block stream, and available to all
// subscribers on this topic via the mirror nodes.<br/>
// If this transaction succeeds the resulting `TransactionReceipt` SHALL contain
// the latest `topicSequenceNumber` and `topicRunningHash` for the topic.<br/>
// If the topic `submitKey` is set, and not an empty `KeyList`, then that key
// MUST sign this transaction.
//
// ### Block Stream Effects
// None
type ConsensusSubmitMessageTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Topic to submit message to.
	TopicID *TopicID `protobuf:"bytes,1,opt,name=topicID,proto3" json:"topicID,omitempty"`
	// *
	// A message to be submitted.
	// <p>
	// This Transaction (including signatures) MUST be less than 6KiB.<br/>
	// Messages SHOULD be less than 4KiB. A "chunked" message MAY be submitted
	// if a message larger than this is required.
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// *
	// Information for the current "chunk" in a fragmented message.
	// <p>
	// This value is REQUIRED if the full `message` is submitted in two or
	// more fragments due to transaction size limits.<br/>
	// If the message is submitted in a single transaction, then this
	// field SHOULD NOT be set.
	ChunkInfo     *ConsensusMessageChunkInfo `protobuf:"bytes,3,opt,name=chunkInfo,proto3" json:"chunkInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsensusSubmitMessageTransactionBody) Reset() {
	*x = ConsensusSubmitMessageTransactionBody{}
	mi := &file_consensus_submit_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusSubmitMessageTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusSubmitMessageTransactionBody) ProtoMessage() {}

func (x *ConsensusSubmitMessageTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_submit_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusSubmitMessageTransactionBody.ProtoReflect.Descriptor instead.
func (*ConsensusSubmitMessageTransactionBody) Descriptor() ([]byte, []int) {
	return file_consensus_submit_message_proto_rawDescGZIP(), []int{1}
}

func (x *ConsensusSubmitMessageTransactionBody) GetTopicID() *TopicID {
	if x != nil {
		return x.TopicID
	}
	return nil
}

func (x *ConsensusSubmitMessageTransactionBody) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ConsensusSubmitMessageTransactionBody) GetChunkInfo() *ConsensusMessageChunkInfo {
	if x != nil {
		return x.ChunkInfo
	}
	return nil
}

var File_consensus_submit_message_proto protoreflect.FileDescriptor

const file_consensus_submit_message_proto_rawDesc = "" +
	"\n" +
	"\x1econsensus_submit_message.proto\x12\x05proto\x1a\x11basic_types.proto\"\x93\x01\n" +
	"\x19ConsensusMessageChunkInfo\x12H\n" +
	"\x14initialTransactionID\x18\x01 \x01(\v2\x14.proto.TransactionIDR\x14initialTransactionID\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x05R\x05total\x12\x16\n" +
	"\x06number\x18\x03 \x01(\x05R\x06number\"\xab\x01\n" +
	"%ConsensusSubmitMessageTransactionBody\x12(\n" +
	"\atopicID\x18\x01 \x01(\v2\x0e.proto.TopicIDR\atopicID\x12\x18\n" +
	"\amessage\x18\x02 \x01(\fR\amessage\x12>\n" +
	"\tchunkInfo\x18\x03 \x01(\v2 .proto.ConsensusMessageChunkInfoR\tchunkInfoB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_consensus_submit_message_proto_rawDescOnce sync.Once
	file_consensus_submit_message_proto_rawDescData []byte
)

func file_consensus_submit_message_proto_rawDescGZIP() []byte {
	file_consensus_submit_message_proto_rawDescOnce.Do(func() {
		file_consensus_submit_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_consensus_submit_message_proto_rawDesc), len(file_consensus_submit_message_proto_rawDesc)))
	})
	return file_consensus_submit_message_proto_rawDescData
}

var file_consensus_submit_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_consensus_submit_message_proto_goTypes = []any{
	(*ConsensusMessageChunkInfo)(nil),             // 0: proto.ConsensusMessageChunkInfo
	(*ConsensusSubmitMessageTransactionBody)(nil), // 1: proto.ConsensusSubmitMessageTransactionBody
	(*TransactionID)(nil),                         // 2: proto.TransactionID
	(*TopicID)(nil),                               // 3: proto.TopicID
}
var file_consensus_submit_message_proto_depIdxs = []int32{
	2, // 0: proto.ConsensusMessageChunkInfo.initialTransactionID:type_name -> proto.TransactionID
	3, // 1: proto.ConsensusSubmitMessageTransactionBody.topicID:type_name -> proto.TopicID
	0, // 2: proto.ConsensusSubmitMessageTransactionBody.chunkInfo:type_name -> proto.ConsensusMessageChunkInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_consensus_submit_message_proto_init() }
func file_consensus_submit_message_proto_init() {
	if File_consensus_submit_message_proto != nil {
		return
	}
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_consensus_submit_message_proto_rawDesc), len(file_consensus_submit_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_consensus_submit_message_proto_goTypes,
		DependencyIndexes: file_consensus_submit_message_proto_depIdxs,
		MessageInfos:      file_consensus_submit_message_proto_msgTypes,
	}.Build()
	File_consensus_submit_message_proto = out.File
	file_consensus_submit_message_proto_goTypes = nil
	file_consensus_submit_message_proto_depIdxs = nil
}
