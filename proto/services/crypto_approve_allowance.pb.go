//*
// # Approve Allowance
// This transaction body provides a mechanism to add "allowance" entries
// for an account. These allowances enable one account to spend or transfer
// token balances (for fungible/common tokens), individual tokens (for
// non-fungible/unique tokens), or all non-fungible tokens owned by the
// account, now or in the future (if `approved_for_all` is set).
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: crypto_approve_allowance.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Create ("Approve") allowances for one account to transfer tokens owned
// by a different account.<br/>
// An allowance permits a "spender" account to independently transfer tokens
// owned by a separate "owner" account. Each such allowance permits spending
// any amount, up to a specified limit, for fungible/common tokens; a single
// specified non-fungible/unique token, or all non-fungible/unique tokens
// of a particular token type held by the "owner" account.
//
// If the "owner" account is not specified for any allowance in this
// transaction (the `owner` field is not set), the `payer` account for this
// transaction SHALL be owner for that allowance.<br/>
// Each `owner` account specified in any allowance approved in this
// transaction MUST sign this transaction.<br/>
// If the `amount` field for any fungible/common allowance in this
// transaction is `0`, then that allowance SHOULD match an existing,
// previously approved, allowance which SHALL be removed.<br/>
// There are three lists in this message. Each list MAY be empty, but
// _at least one_ list MUST contain _at least one_ entry.
//
// Example for the `payer` rule.<br/>
//   - Given an account `0.0.X` that pays for this transaction, and owner
//     is not specified in an allowance of `200` HBAR to spender account
//     `0.0.Y`. At consensus the spender account `0.0.Y` will have a new
//     allowance to spend `200` HBAR from the balance of account `0.0.X`.
//
// ### Block Stream Effects
// None
type CryptoApproveAllowanceTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// List of hbar allowances approved by the account owner.
	// <p>
	// This list MAY be empty, provided at least one other list is
	// not empty.
	CryptoAllowances []*CryptoAllowance `protobuf:"bytes,1,rep,name=cryptoAllowances,proto3" json:"cryptoAllowances,omitempty"`
	// *
	// List of non-fungible token allowances approved by the account owner.
	// <p>
	// This list MAY be empty, provided at least one other list is
	// not empty.
	NftAllowances []*NftAllowance `protobuf:"bytes,2,rep,name=nftAllowances,proto3" json:"nftAllowances,omitempty"`
	// *
	// List of fungible token allowances approved by the account owner.
	// <p>
	// This list MAY be empty, provided at least one other list is
	// not empty.
	TokenAllowances []*TokenAllowance `protobuf:"bytes,3,rep,name=tokenAllowances,proto3" json:"tokenAllowances,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CryptoApproveAllowanceTransactionBody) Reset() {
	*x = CryptoApproveAllowanceTransactionBody{}
	mi := &file_crypto_approve_allowance_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptoApproveAllowanceTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoApproveAllowanceTransactionBody) ProtoMessage() {}

func (x *CryptoApproveAllowanceTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_approve_allowance_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoApproveAllowanceTransactionBody.ProtoReflect.Descriptor instead.
func (*CryptoApproveAllowanceTransactionBody) Descriptor() ([]byte, []int) {
	return file_crypto_approve_allowance_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoApproveAllowanceTransactionBody) GetCryptoAllowances() []*CryptoAllowance {
	if x != nil {
		return x.CryptoAllowances
	}
	return nil
}

func (x *CryptoApproveAllowanceTransactionBody) GetNftAllowances() []*NftAllowance {
	if x != nil {
		return x.NftAllowances
	}
	return nil
}

func (x *CryptoApproveAllowanceTransactionBody) GetTokenAllowances() []*TokenAllowance {
	if x != nil {
		return x.TokenAllowances
	}
	return nil
}

// *
// An approved allowance of hbar transfers.
// This message specifies one allowance for a single, unique, combination
// of owner, spender, and amount.
//
// If `owner` is not set, the effective `owner` SHALL be the `payer` for the
// enclosing transaction.<br/>
// The `spender` MUST be specified and MUST be a valid account.<br/>
// The `amount` MUST be a whole number, and SHOULD be greater than `0` unless
// this allowance is intended to _remove_ a previously approved allowance.
type CryptoAllowance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// An owner account identifier.<br/>
	// This is the account identifier of the account granting an allowance
	// for the `spender` to transfer tokens held by this account.
	Owner *AccountID `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// *
	// A spender account identifier.<br/>
	// This is the account identifier of the account permitted to transfer
	// tokens held by the `owner`.
	Spender *AccountID `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	// *
	// An amount of tinybar (10<sup>-8</sup> HBAR).<br/>
	// This is the amount of HBAR held by the `owner` that the
	// `spender` is permitted to transfer.
	// <p>
	// This value MUST be a whole number.<br/>
	// This value MUST be greater than 0 to create a new allowance.<br/>
	// This value MAY be exactly `0` to _remove_ an existing allowance.<br/>
	Amount        int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CryptoAllowance) Reset() {
	*x = CryptoAllowance{}
	mi := &file_crypto_approve_allowance_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptoAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoAllowance) ProtoMessage() {}

func (x *CryptoAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_approve_allowance_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoAllowance.ProtoReflect.Descriptor instead.
func (*CryptoAllowance) Descriptor() ([]byte, []int) {
	return file_crypto_approve_allowance_proto_rawDescGZIP(), []int{1}
}

func (x *CryptoAllowance) GetOwner() *AccountID {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *CryptoAllowance) GetSpender() *AccountID {
	if x != nil {
		return x.Spender
	}
	return nil
}

func (x *CryptoAllowance) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// *
// An approved allowance of non-fungible tokens.<br/>
// This type of allowance may permit transfers for one or more individual
// unique tokens, or may permit transfers for all unique tokens of the
// specified type.
//
// If `owner` is not set, the effective `owner` SHALL be the `payer` for the
// enclosing transaction.<br/>
// The `spender` MUST be specified and MUST be a valid account.<br/>
// If `approve_for_all` is set, then `serial_numbers` SHOULD be empty
// and SHALL be ignored.
// If `approve_for_all` is unset, then `serial_numbers` MUST NOT be empty.
type NftAllowance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A token identifier.<br/>
	// This identifies the type of token the `spender` is permitted to
	// transfer from the `owner`.
	// <p>
	// The identified token type MUST be a non-fungible/unique token.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	// *
	// An owner account identifier.<br/>
	// This is the account identifier of the account granting an allowance
	// for the `spender` to transfer tokens held by this account.
	Owner *AccountID `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// *
	// A spender account identifier.<br/>
	// This is the account identifier of the account permitted to transfer
	// tokens held by the `owner`.
	Spender *AccountID `protobuf:"bytes,3,opt,name=spender,proto3" json:"spender,omitempty"`
	// *
	// A list of token serial numbers.<br/>
	// The list of serial numbers that the spender is permitted to transfer.
	// <p>
	// The `owner` MUST currently hold each token identified in this list.
	SerialNumbers []int64 `protobuf:"varint,4,rep,packed,name=serial_numbers,json=serialNumbers,proto3" json:"serial_numbers,omitempty"`
	// *
	// A flag indicating this allowance applies to all tokens of the
	// specified (non-fungible/unique) type.
	// <p>
	// If true, the `spender` SHALL be permitted to transfer any or all
	// of the `owner`'s tokens of the specified token type.
	// This SHALL apply not only to currently owned tokens, but to all
	// such tokens acquired in the future, unless the
	// allowance is `delete`d.
	ApprovedForAll *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=approved_for_all,json=approvedForAll,proto3" json:"approved_for_all,omitempty"`
	// *
	// A spender-owner account identifier.<br/>
	// This account identifier identifies a `spender` for whom an existing
	// `approved_for_all` allowance was previously created. This enables
	// an account with such broad access to grant allowances to transfer
	// individual tokens from the original owner without involving that
	// original owner.
	// <p>
	// If this is set, the account identified MUST sign this transaction, but
	// the `owner` account MAY NOT sign this transaction.<br/>
	// If this is set, there MUST exist an active `approved_for_all`
	// allowance from the `owner` for the `delegating_spender` to transfer
	// all tokens of the type identified by the `tokenId` field.<br/>
	// If this value is set, the `approved_for_all` flag MUST be `false`.
	DelegatingSpender *AccountID `protobuf:"bytes,6,opt,name=delegating_spender,json=delegatingSpender,proto3" json:"delegating_spender,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NftAllowance) Reset() {
	*x = NftAllowance{}
	mi := &file_crypto_approve_allowance_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NftAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftAllowance) ProtoMessage() {}

func (x *NftAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_approve_allowance_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftAllowance.ProtoReflect.Descriptor instead.
func (*NftAllowance) Descriptor() ([]byte, []int) {
	return file_crypto_approve_allowance_proto_rawDescGZIP(), []int{2}
}

func (x *NftAllowance) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *NftAllowance) GetOwner() *AccountID {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *NftAllowance) GetSpender() *AccountID {
	if x != nil {
		return x.Spender
	}
	return nil
}

func (x *NftAllowance) GetSerialNumbers() []int64 {
	if x != nil {
		return x.SerialNumbers
	}
	return nil
}

func (x *NftAllowance) GetApprovedForAll() *wrapperspb.BoolValue {
	if x != nil {
		return x.ApprovedForAll
	}
	return nil
}

func (x *NftAllowance) GetDelegatingSpender() *AccountID {
	if x != nil {
		return x.DelegatingSpender
	}
	return nil
}

// *
// An approved allowance of fungible/common token transfers.
// This message specifies one allowance for a single, unique, combination
// of token, owner, spender, and amount.
//
// If `owner` is not set, the effective `owner` SHALL be the `payer` for the
// enclosing transaction.<br/>
// The `tokenId` MUST be specified and MUST be a valid
// fungible/common token type.<br/>
// The `spender` MUST be specified and MUST be a valid account.<br/>
// The `amount` MUST be a whole number, and SHOULD be greater than `0` unless
// this allowance is intended to _remove_ a previously approved allowance.
type TokenAllowance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A token identifier.<br/>
	// This identifies the type of token the `spender` is permitted to
	// transfer from the `owner`.
	// <p>
	// The identified token type MUST be a fungible/common token.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	// *
	// An owner account identifier.<br/>
	// This is the account identifier of the account granting an allowance
	// for the `spender` to transfer tokens held by this account.
	Owner *AccountID `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// *
	// A spender account identifier.<br/>
	// This is the account identifier of the account permitted to transfer
	// tokens held by the `owner`.
	Spender *AccountID `protobuf:"bytes,3,opt,name=spender,proto3" json:"spender,omitempty"`
	// *
	// An amount of fractional tokens (10<sup>-decimals</sup> tokens).<br/>
	// This is the amount of tokens held by the `owner` that the
	// `spender` is permitted to transfer.
	// <p>
	// This value MUST be a whole number.<br/>
	// This value MUST be greater than 0 to create a new allowance.<br/>
	// This value MAY be exactly `0` to _remove_ an existing allowance.<br/>
	Amount        int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenAllowance) Reset() {
	*x = TokenAllowance{}
	mi := &file_crypto_approve_allowance_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAllowance) ProtoMessage() {}

func (x *TokenAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_approve_allowance_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAllowance.ProtoReflect.Descriptor instead.
func (*TokenAllowance) Descriptor() ([]byte, []int) {
	return file_crypto_approve_allowance_proto_rawDescGZIP(), []int{3}
}

func (x *TokenAllowance) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *TokenAllowance) GetOwner() *AccountID {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *TokenAllowance) GetSpender() *AccountID {
	if x != nil {
		return x.Spender
	}
	return nil
}

func (x *TokenAllowance) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_crypto_approve_allowance_proto protoreflect.FileDescriptor

const file_crypto_approve_allowance_proto_rawDesc = "" +
	"\n" +
	"\x1ecrypto_approve_allowance.proto\x12\x05proto\x1a\x11basic_types.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\xe7\x01\n" +
	"%CryptoApproveAllowanceTransactionBody\x12B\n" +
	"\x10cryptoAllowances\x18\x01 \x03(\v2\x16.proto.CryptoAllowanceR\x10cryptoAllowances\x129\n" +
	"\rnftAllowances\x18\x02 \x03(\v2\x13.proto.NftAllowanceR\rnftAllowances\x12?\n" +
	"\x0ftokenAllowances\x18\x03 \x03(\v2\x15.proto.TokenAllowanceR\x0ftokenAllowances\"}\n" +
	"\x0fCryptoAllowance\x12&\n" +
	"\x05owner\x18\x01 \x01(\v2\x10.proto.AccountIDR\x05owner\x12*\n" +
	"\aspender\x18\x02 \x01(\v2\x10.proto.AccountIDR\aspender\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x03R\x06amount\"\xba\x02\n" +
	"\fNftAllowance\x12(\n" +
	"\atokenId\x18\x01 \x01(\v2\x0e.proto.TokenIDR\atokenId\x12&\n" +
	"\x05owner\x18\x02 \x01(\v2\x10.proto.AccountIDR\x05owner\x12*\n" +
	"\aspender\x18\x03 \x01(\v2\x10.proto.AccountIDR\aspender\x12%\n" +
	"\x0eserial_numbers\x18\x04 \x03(\x03R\rserialNumbers\x12D\n" +
	"\x10approved_for_all\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueR\x0eapprovedForAll\x12?\n" +
	"\x12delegating_spender\x18\x06 \x01(\v2\x10.proto.AccountIDR\x11delegatingSpender\"\xa6\x01\n" +
	"\x0eTokenAllowance\x12(\n" +
	"\atokenId\x18\x01 \x01(\v2\x0e.proto.TokenIDR\atokenId\x12&\n" +
	"\x05owner\x18\x02 \x01(\v2\x10.proto.AccountIDR\x05owner\x12*\n" +
	"\aspender\x18\x03 \x01(\v2\x10.proto.AccountIDR\aspender\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x03R\x06amountB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_crypto_approve_allowance_proto_rawDescOnce sync.Once
	file_crypto_approve_allowance_proto_rawDescData []byte
)

func file_crypto_approve_allowance_proto_rawDescGZIP() []byte {
	file_crypto_approve_allowance_proto_rawDescOnce.Do(func() {
		file_crypto_approve_allowance_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_crypto_approve_allowance_proto_rawDesc), len(file_crypto_approve_allowance_proto_rawDesc)))
	})
	return file_crypto_approve_allowance_proto_rawDescData
}

var file_crypto_approve_allowance_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_crypto_approve_allowance_proto_goTypes = []any{
	(*CryptoApproveAllowanceTransactionBody)(nil), // 0: proto.CryptoApproveAllowanceTransactionBody
	(*CryptoAllowance)(nil),                       // 1: proto.CryptoAllowance
	(*NftAllowance)(nil),                          // 2: proto.NftAllowance
	(*TokenAllowance)(nil),                        // 3: proto.TokenAllowance
	(*AccountID)(nil),                             // 4: proto.AccountID
	(*TokenID)(nil),                               // 5: proto.TokenID
	(*wrapperspb.BoolValue)(nil),                  // 6: google.protobuf.BoolValue
}
var file_crypto_approve_allowance_proto_depIdxs = []int32{
	1,  // 0: proto.CryptoApproveAllowanceTransactionBody.cryptoAllowances:type_name -> proto.CryptoAllowance
	2,  // 1: proto.CryptoApproveAllowanceTransactionBody.nftAllowances:type_name -> proto.NftAllowance
	3,  // 2: proto.CryptoApproveAllowanceTransactionBody.tokenAllowances:type_name -> proto.TokenAllowance
	4,  // 3: proto.CryptoAllowance.owner:type_name -> proto.AccountID
	4,  // 4: proto.CryptoAllowance.spender:type_name -> proto.AccountID
	5,  // 5: proto.NftAllowance.tokenId:type_name -> proto.TokenID
	4,  // 6: proto.NftAllowance.owner:type_name -> proto.AccountID
	4,  // 7: proto.NftAllowance.spender:type_name -> proto.AccountID
	6,  // 8: proto.NftAllowance.approved_for_all:type_name -> google.protobuf.BoolValue
	4,  // 9: proto.NftAllowance.delegating_spender:type_name -> proto.AccountID
	5,  // 10: proto.TokenAllowance.tokenId:type_name -> proto.TokenID
	4,  // 11: proto.TokenAllowance.owner:type_name -> proto.AccountID
	4,  // 12: proto.TokenAllowance.spender:type_name -> proto.AccountID
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_crypto_approve_allowance_proto_init() }
func file_crypto_approve_allowance_proto_init() {
	if File_crypto_approve_allowance_proto != nil {
		return
	}
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_crypto_approve_allowance_proto_rawDesc), len(file_crypto_approve_allowance_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_crypto_approve_allowance_proto_goTypes,
		DependencyIndexes: file_crypto_approve_allowance_proto_depIdxs,
		MessageInfos:      file_crypto_approve_allowance_proto_msgTypes,
	}.Build()
	File_crypto_approve_allowance_proto = out.File
	file_crypto_approve_allowance_proto_goTypes = nil
	file_crypto_approve_allowance_proto_depIdxs = nil
}
