//*
// # Create Topic
// Create a new topic for the Hedera Consensus Service (HCS).
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: consensus_create_topic.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Create a topic to accept and group consensus messages.
//
// If `autoRenewAccount` is specified, that account Key MUST also sign this
// transaction.<br/>
// If `adminKey` is set, that Key MUST sign the transaction.<br/>
// On success, the resulting `TransactionReceipt` SHALL contain the newly
// created `TopicId`.
//
// The `autoRenewPeriod` on a topic MUST be set to a value between
// `autoRenewPeriod.minDuration` and `autoRenewPeriod.maxDuration`. These
// values are configurable, typically 30 and 92 days.<br/>
// This also sets the initial expirationTime of the topic.
//
// If no `adminKey` is set on a topic
//
//	-`autoRenewAccount` SHALL NOT be set on the topic.
//	- A `deleteTopic` transaction SHALL fail.
//	- An `updateTopic` transaction that only extends the expirationTime MAY
//	  succeed.
//	- Any other `updateTopic` transaction SHALL fail.
//
// If the topic expires and is not automatically renewed, the topic SHALL enter
// the `EXPIRED` state.
//   - All transactions on the topic SHALL fail with TOPIC_EXPIRED
//   - Except an updateTopic() call that only extends the expirationTime.
//   - getTopicInfo() SHALL succeed, and show the topic is expired.
//
// The topic SHALL remain in the `EXPIRED` state for a time determined by the
// `autorenew.gracePeriod` (configurable, originally 7 days).<br/>
// After the grace period, if the topic's expirationTime is not extended, the
// topic SHALL be automatically deleted from state entirely, and cannot be
// recovered or recreated.
//
// ### Block Stream Effects
// None
type ConsensusCreateTopicTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A short memo for this topic.
	// <p>
	// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
	// (default 100) bytes when encoded as UTF-8.
	Memo string `protobuf:"bytes,1,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// Access control for modification of the topic after it is created.
	// <p>
	// If this field is set, that key MUST sign this transaction.<br/>
	// If this field is set, that key MUST sign each future transaction to
	// update or delete the topic.<br/>
	// An updateTopic transaction that _only_ extends the topic expirationTime
	// (a "manual renewal" transaction) SHALL NOT require admin key
	// signature.<br/>
	// A topic without an admin key SHALL be immutable, except for expiration
	// and renewal.<br/>
	// If adminKey is not set, then `autoRenewAccount` SHALL NOT be set.
	AdminKey *Key `protobuf:"bytes,2,opt,name=adminKey,proto3" json:"adminKey,omitempty"`
	// *
	// Access control for message submission to the topic.
	// <p>
	// If this field is set, that key MUST sign each consensus submit message
	// for this topic.<br/>
	// If this field is not set then any account may submit a message on the
	// topic, without restriction.
	SubmitKey *Key `protobuf:"bytes,3,opt,name=submitKey,proto3" json:"submitKey,omitempty"`
	// *
	// The initial lifetime, in seconds, for the topic.<br/>
	// This is also the number of seconds for which the topic SHALL be
	// automatically renewed upon expiring, if it has a valid auto-renew
	// account.
	// <p>
	// This value MUST be set.<br/>
	// This value MUST be greater than the configured
	// MIN_AUTORENEW_PERIOD.<br/>
	// This value MUST be less than the configured MAX_AUTORENEW_PERIOD.
	AutoRenewPeriod *Duration `protobuf:"bytes,6,opt,name=autoRenewPeriod,proto3" json:"autoRenewPeriod,omitempty"`
	// *
	// The ID of the account to be charged renewal fees at the topic's
	// expirationTime to extend the lifetime of the topic.
	// <p>
	// The topic lifetime SHALL be extended by the smallest of the following:
	// <ul>
	//
	//	<li>The current `autoRenewPeriod` duration.</li>
	//	<li>The maximum duration that this account has funds to purchase.</li>
	//	<li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
	//	    renewal.</li>
	//
	// </ul>
	// If this value is set, the referenced account MUST sign this
	// transaction.<br/>
	// If this value is set, the `adminKey` field MUST also be set (though that
	// key MAY not have any correlation to this account).
	AutoRenewAccount *AccountID `protobuf:"bytes,7,opt,name=autoRenewAccount,proto3" json:"autoRenewAccount,omitempty"`
	// *
	// Access control for update or delete of custom fees.
	// <p>
	// If set, subsequent `consensus_update_topic` transactions signed with this
	// key MAY update or delete the custom fees for this topic.<br/>
	// If not set, the custom fees for this topic SHALL BE immutable.<br/>
	// If not set when the topic is created, this field CANNOT be set via
	// update.<br/>
	// If set when the topic is created, this field MAY be changed via update.
	FeeScheduleKey *Key `protobuf:"bytes,8,opt,name=fee_schedule_key,json=feeScheduleKey,proto3" json:"fee_schedule_key,omitempty"`
	// *
	// A set of keys.<br/>
	// Keys in this list are permitted to submit messages to this topic without
	// paying custom fees associated with this topic.
	// <p>
	// If a submit transaction is signed by _any_ key included in this set,
	// custom fees SHALL NOT be charged for that transaction.<br/>
	// This field MUST NOT contain more than 10 keys.<br/>
	// fee_exempt_key_list SHALL NOT contain any duplicate keys.<br/>
	// fee_exempt_key_list MAY contain keys for accounts that are inactive,
	// deleted, or non-existent.<br/>
	// If fee_exempt_key_list is unset in this transaction, there SHALL NOT be
	// any fee-exempt keys.  In particular, the following keys SHALL NOT be
	// implicitly or automatically added to this list:
	// `adminKey`, `submitKey`, `fee_schedule_key`.
	FeeExemptKeyList []*Key `protobuf:"bytes,9,rep,name=fee_exempt_key_list,json=feeExemptKeyList,proto3" json:"fee_exempt_key_list,omitempty"`
	// *
	// A set of custom fee definitions.<br/>
	// These are fees to be assessed for each submit to this topic.
	// <p>
	// Each fee defined in this set SHALL be evaluated for
	// each message submitted to this topic, and the resultant
	// total assessed fees SHALL be charged.<br/>
	// Custom fees defined here SHALL be assessed in addition to the base
	// network and node fees.<br/>
	// custom_fees list SHALL NOT contain more than
	// `MAX_CUSTOM_FEE_ENTRIES_FOR_TOPICS` entries.
	CustomFees []*FixedCustomFee `protobuf:"bytes,10,rep,name=custom_fees,json=customFees,proto3" json:"custom_fees,omitempty"`
}

func (x *ConsensusCreateTopicTransactionBody) Reset() {
	*x = ConsensusCreateTopicTransactionBody{}
	mi := &file_consensus_create_topic_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusCreateTopicTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusCreateTopicTransactionBody) ProtoMessage() {}

func (x *ConsensusCreateTopicTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_create_topic_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusCreateTopicTransactionBody.ProtoReflect.Descriptor instead.
func (*ConsensusCreateTopicTransactionBody) Descriptor() ([]byte, []int) {
	return file_consensus_create_topic_proto_rawDescGZIP(), []int{0}
}

func (x *ConsensusCreateTopicTransactionBody) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ConsensusCreateTopicTransactionBody) GetAdminKey() *Key {
	if x != nil {
		return x.AdminKey
	}
	return nil
}

func (x *ConsensusCreateTopicTransactionBody) GetSubmitKey() *Key {
	if x != nil {
		return x.SubmitKey
	}
	return nil
}

func (x *ConsensusCreateTopicTransactionBody) GetAutoRenewPeriod() *Duration {
	if x != nil {
		return x.AutoRenewPeriod
	}
	return nil
}

func (x *ConsensusCreateTopicTransactionBody) GetAutoRenewAccount() *AccountID {
	if x != nil {
		return x.AutoRenewAccount
	}
	return nil
}

func (x *ConsensusCreateTopicTransactionBody) GetFeeScheduleKey() *Key {
	if x != nil {
		return x.FeeScheduleKey
	}
	return nil
}

func (x *ConsensusCreateTopicTransactionBody) GetFeeExemptKeyList() []*Key {
	if x != nil {
		return x.FeeExemptKeyList
	}
	return nil
}

func (x *ConsensusCreateTopicTransactionBody) GetCustomFees() []*FixedCustomFee {
	if x != nil {
		return x.CustomFees
	}
	return nil
}

var File_consensus_create_topic_proto protoreflect.FileDescriptor

var file_consensus_create_topic_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x03, 0x0a, 0x23,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x26, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0f, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x5f,
	0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x10, 0x66, 0x65, 0x65, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x73, 0x42, 0x26, 0x0a, 0x22, 0x63,
	0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76,
	0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consensus_create_topic_proto_rawDescOnce sync.Once
	file_consensus_create_topic_proto_rawDescData = file_consensus_create_topic_proto_rawDesc
)

func file_consensus_create_topic_proto_rawDescGZIP() []byte {
	file_consensus_create_topic_proto_rawDescOnce.Do(func() {
		file_consensus_create_topic_proto_rawDescData = protoimpl.X.CompressGZIP(file_consensus_create_topic_proto_rawDescData)
	})
	return file_consensus_create_topic_proto_rawDescData
}

var file_consensus_create_topic_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_consensus_create_topic_proto_goTypes = []any{
	(*ConsensusCreateTopicTransactionBody)(nil), // 0: proto.ConsensusCreateTopicTransactionBody
	(*Key)(nil),            // 1: proto.Key
	(*Duration)(nil),       // 2: proto.Duration
	(*AccountID)(nil),      // 3: proto.AccountID
	(*FixedCustomFee)(nil), // 4: proto.FixedCustomFee
}
var file_consensus_create_topic_proto_depIdxs = []int32{
	1, // 0: proto.ConsensusCreateTopicTransactionBody.adminKey:type_name -> proto.Key
	1, // 1: proto.ConsensusCreateTopicTransactionBody.submitKey:type_name -> proto.Key
	2, // 2: proto.ConsensusCreateTopicTransactionBody.autoRenewPeriod:type_name -> proto.Duration
	3, // 3: proto.ConsensusCreateTopicTransactionBody.autoRenewAccount:type_name -> proto.AccountID
	1, // 4: proto.ConsensusCreateTopicTransactionBody.fee_schedule_key:type_name -> proto.Key
	1, // 5: proto.ConsensusCreateTopicTransactionBody.fee_exempt_key_list:type_name -> proto.Key
	4, // 6: proto.ConsensusCreateTopicTransactionBody.custom_fees:type_name -> proto.FixedCustomFee
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_consensus_create_topic_proto_init() }
func file_consensus_create_topic_proto_init() {
	if File_consensus_create_topic_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_custom_fees_proto_init()
	file_duration_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consensus_create_topic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_consensus_create_topic_proto_goTypes,
		DependencyIndexes: file_consensus_create_topic_proto_depIdxs,
		MessageInfos:      file_consensus_create_topic_proto_msgTypes,
	}.Build()
	File_consensus_create_topic_proto = out.File
	file_consensus_create_topic_proto_rawDesc = nil
	file_consensus_create_topic_proto_goTypes = nil
	file_consensus_create_topic_proto_depIdxs = nil
}
