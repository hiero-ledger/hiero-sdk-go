//*
// # Token Create
// Create an Hedera Token Service (HTS) token.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: token_create.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Create an HTS token.
//
// #### Keys
// Each token has several keys that, separately, control different functions
// for that token. It is *_strongly_* recommended that each key assigned to
// a token be unique, or disabled by assigning an empty `KeyList`.
// Keys and purpose
//   - `adminKey` is a general access and may authorize a token update
//     transaction as well as _update the other keys_. Even the admin key
//     cannot authorize _adding_ a key that is not present, however.<br/>
//     The admin key may also delete the token entirely.
//   - `fee_schedule` may authorize updating the token custom fees. If this
//     key is not present, the custom fees for the token are fixed and immutable.
//   - `freeze` may authorize a token freeze or unfreeze transaction.
//     If this key is not present, accounts holding this token cannot have
//     their tokens frozen or unfrozen.
//   - `kyc` may authorize a token grant KYC or revoke KYC transaction.
//     If this key is not present, accounts holding this token cannot have
//     KYC status granted or revoked.
//   - `metadata` may authorize token update nfts transactions.
//     If this key is not present, the token metadata values for that
//     non-fungible/unique token _type_ will be immutable.
//   - `pause` may authorize a token pause or token unpause transaction.
//     If this key is not present, the token cannot be paused (preventing any
//     account from transacting in that token) or resumed.
//   - `supply` may authorize a token mint or burn transaction.
//     If this key is not present, the token cannot mint additional supply and
//     existing tokens cannot be "burned" from the treasury (but _might_ still be
//     "burned" from individual accounts, c.f. `wipeKey` and `tokenWipe`).
//   - `wipe` may authorize a token wipe account transaction.
//     If this key is not present, accounts holding this token cannot have
//     their balance or NFTs wiped (effectively burned).
//
// #### Requirements
// If `tokenType` is fungible/common, the `initialSupply` MUST be strictly
// greater than zero(`0`).<br/>
// If `tokenType` is non-fungible/unique, the `initialSupply` MUST
// be zero(`0`).<br/>
// If `tokenSupplyType` is "infinite", the `maxSupply` MUST be zero(`0`).<br/>
// If `tokenSupplyType` is "finite", the `maxSupply` MUST be strictly
// greater than zero(`0`).<br/>
//
// ### Block Stream Effects
// If the token is created, the Token Identifier SHALL be in the receipt.<br/>
type TokenCreateTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A name for the token.<br/>
	// This is generally the "full name" displayed in wallet software.
	// <p>
	// This field is REQUIRED.<br/>
	// This value MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
	// This value MUST NOT contain the Unicode NUL codepoint.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// A symbol to use for the token.
	// <p>
	// This field is REQUIRED.<br/>
	// This value MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
	// This value MUST NOT contain the Unicode NUL codepoint.
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// *
	// A decimal precision of the token's smallest denomination.<br/>
	// Most values are described in terms of this smallest denomination,
	// so the token initial supply, for instance, must be divided by
	// <tt>10<sup>decimals</sup></tt> to get whole tokens.
	// <p>
	// This MUST be zero(`0`) for non-fungible/unique tokens.
	Decimals uint32 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// *
	// An initial supply, in the smallest denomination for the token.
	// <p>
	// This amount SHALL be transferred to the treasury account as part
	// of this transaction.<br/>
	// This amount MUST be specified in the smallest denomination for the
	// token (i.e. <tt>10<sup>-decimals</sup></tt> whole tokens).<br/>
	// This MUST be zero(`0`) for a non-fungible/unique token.
	InitialSupply uint64 `protobuf:"varint,4,opt,name=initialSupply,proto3" json:"initialSupply,omitempty"`
	// *
	// A treasury account identifier.
	// <p>
	// This field is REQUIRED.<br/>
	// The identified account SHALL be designated the "treasury" for the
	// new token, and all tokens "minted" SHALL be delivered to that account,
	// including the initial supply, if any.<br/>
	// The identified account MUST exist, MUST NOT be expired, and SHOULD
	// have a non-zero HBAR balance.<br/>
	// The identified account SHALL be associated to the new token.
	Treasury *AccountID `protobuf:"bytes,5,opt,name=treasury,proto3" json:"treasury,omitempty"`
	// *
	// An Hedera key for token administration.
	// <p>
	// This key, if set, SHALL have administrative authority for this token and
	// MAY authorize token update and/or token delete transactions.<br/>
	// If this key is not set, or is an empty `KeyList`, this token SHALL be
	// immutable, except for expiration and renewal.
	AdminKey *Key `protobuf:"bytes,6,opt,name=adminKey,proto3" json:"adminKey,omitempty"`
	// *
	// An Hedera key for managing account KYC.
	// <p>
	// This key, if set, SHALL have KYC authority for this token and
	// MAY authorize transactions to grant or revoke KYC for accounts.<br/>
	// If this key is not set, or is an empty `KeyList`, KYC status for this
	// token SHALL NOT be granted or revoked for any account.<br/>
	// If this key is removed after granting KYC, those grants SHALL remain
	// and cannot be revoked.
	KycKey *Key `protobuf:"bytes,7,opt,name=kycKey,proto3" json:"kycKey,omitempty"`
	// *
	// An Hedera key for managing asset "freeze".
	// <p>
	// This key, if set, SHALL have "freeze" authority for this token and
	// MAY authorize transactions to freeze or unfreeze accounts
	// with respect to this token.<br/>
	// If this key is not set, or is an empty `KeyList`, this token
	// SHALL NOT be frozen or unfrozen for any account.<br/>
	// If this key is removed after freezing accounts, those accounts
	// SHALL remain frozen and cannot be unfrozen.
	FreezeKey *Key `protobuf:"bytes,8,opt,name=freezeKey,proto3" json:"freezeKey,omitempty"`
	// *
	// An Hedera key for wiping tokens from accounts.
	// <p>
	// This key, if set, SHALL have "wipe" authority for this token and
	// MAY authorize transactions to "wipe" any amount of this token from
	// any account, effectively burning the tokens "wiped".<br/>
	// If this key is not set, or is an empty `KeyList`, it SHALL NOT be
	// possible to "wipe" this token from an account.
	WipeKey *Key `protobuf:"bytes,9,opt,name=wipeKey,proto3" json:"wipeKey,omitempty"`
	// *
	// An Hedera key for "minting" and "burning" tokens.
	// <p>
	// This key, if set, MAY authorize transactions to "mint" new tokens to
	// be delivered to the token treasury or "burn" tokens held by the
	// token treasury.<br/>
	// If this key is not set, or is an empty `KeyList`, it SHALL NOT be
	// possible to change the supply of tokens and neither "mint" nor "burn"
	// transactions SHALL be permitted.
	SupplyKey *Key `protobuf:"bytes,10,opt,name=supplyKey,proto3" json:"supplyKey,omitempty"`
	// *
	// An initial Freeze status for accounts associated to this token.
	// <p>
	// If this value is set, an account MUST be the subject of a
	// `tokenUnfreeze` transaction after associating to the token before
	// that account can send or receive this token.<br/>
	// If this value is set, the `freezeKey` SHOULD be set.<br/>
	// If the `freezeKey` is not set, any account associated to this token
	// while this value is set SHALL be permanently frozen.
	// <p>
	// <blockquote>REVIEW NOTE<blockquote>
	// Should we prevent setting this value true for tokens with no freeze
	// key?<br/>
	// Should we set this value to false if a freeze key is removed?
	// </blockquote></blockquote>
	FreezeDefault bool `protobuf:"varint,11,opt,name=freezeDefault,proto3" json:"freezeDefault,omitempty"`
	// *
	// An expiration timestamp.
	// <p>
	// If the `autoRenewAccount` and `autoRenewPeriod` fields are set, this
	// value SHALL be replaced with the current consensus time extended
	// by the `autoRenewPeriod` duration.<br/>
	// If this value is set and token expiration is enabled in network
	// configuration, this token SHALL expire when consensus time exceeds
	// this value, and MAY be subsequently removed from the network state.<br/>
	// If this value is not set, and the automatic renewal account is also not
	// set, then this value SHALL default to the current consensus time
	// extended by the "default" expiration period from network configuration.
	Expiry *Timestamp `protobuf:"bytes,13,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// *
	// An identifier for the account to be charged renewal fees at the token's
	// expiry to extend the lifetime of the token.
	// <p>
	// If this value is set, the token lifetime SHALL be extended by the
	// _smallest_ of the following:
	// <ul>
	//
	//	<li>The current `autoRenewPeriod` duration.</li>
	//	<li>The maximum duration that this account has funds to purchase.</li>
	//	<li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
	//	    renewal.</li>
	//
	// </ul>
	// If this account's HBAR balance is `0` when the token must be
	// renewed, then the token SHALL be expired, and MAY be subsequently
	// removed from state.<br/>
	// If this value is set, the referenced account MUST sign this
	// transaction.
	AutoRenewAccount *AccountID `protobuf:"bytes,14,opt,name=autoRenewAccount,proto3" json:"autoRenewAccount,omitempty"`
	// *
	// A duration between token automatic renewals.<br/>
	// All entities in state may be charged "rent" occasionally (typically
	// every 90 days) to prevent unnecessary growth of the ledger. This value
	// sets the interval between such events for this token.
	// <p>
	// This value MUST be set.<br/>
	// This value MUST be greater than the configured
	// MIN_AUTORENEW_PERIOD.<br/>
	// This value MUST be less than the configured MAX_AUTORENEW_PERIOD.
	AutoRenewPeriod *Duration `protobuf:"bytes,15,opt,name=autoRenewPeriod,proto3" json:"autoRenewPeriod,omitempty"`
	// *
	// A short description for this token.
	// <p>
	// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
	// (default 100) bytes when encoded as UTF-8.
	Memo string `protobuf:"bytes,16,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// A type for this token, according to IWA classification.
	// <p>
	// If this value is not set, the token SHALL have the default type of
	// fungible/common.<br/>
	// This field SHALL be immutable.
	TokenType TokenType `protobuf:"varint,17,opt,name=tokenType,proto3,enum=proto.TokenType" json:"tokenType,omitempty"`
	// *
	// A supply type for this token, according to IWA classification.
	// <p>
	// If this value is not set, the token SHALL have the default supply
	// type of "infinite" (which is, as a practical matter,
	// (2<sup><i>63</i></sup>-1)/10<sup><i>decimals</i></sup>).<br/>
	// This field SHALL be immutable.
	SupplyType TokenSupplyType `protobuf:"varint,18,opt,name=supplyType,proto3,enum=proto.TokenSupplyType" json:"supplyType,omitempty"`
	// *
	// A maximum supply for this token.
	// <p>
	// This SHALL be interpreted in terms of the smallest fractional unit for
	// this token.<br/>
	// If `supplyType` is "infinite", this MUST be `0`.<br/>
	// This field SHALL be immutable.
	MaxSupply int64 `protobuf:"varint,19,opt,name=maxSupply,proto3" json:"maxSupply,omitempty"`
	// *
	// An Hedera key for managing the token custom fee schedule.
	// <p>
	// This key, if set, MAY authorize transactions to modify the
	// `custom_fees` for this token.<br/>
	// If this key is not set, or is an empty `KeyList`, the `custom_fees`
	// for this token SHALL NOT be modified.
	FeeScheduleKey *Key `protobuf:"bytes,20,opt,name=fee_schedule_key,json=feeScheduleKey,proto3" json:"fee_schedule_key,omitempty"`
	// *
	// A list of custom fees representing a fee schedule.
	// <p>
	// This list MAY be empty, which SHALL mean that there
	// are no custom fees for this token.<br/>
	// If this token is a non-fungible/unique type, the entries
	// in this list MUST NOT declare a `fractional_fee`.<br/>
	// If this token is a fungible/common type, the entries in this
	// list MUST NOT declare a `royalty_fee`.<br/>
	// Any token type MAY include entries that declare a `fixed_fee`.
	CustomFees []*CustomFee `protobuf:"bytes,21,rep,name=custom_fees,json=customFees,proto3" json:"custom_fees,omitempty"`
	// *
	// An Hedera key for managing token "pause".
	// <p>
	// This key, if set, SHALL have "pause" authority for this token and
	// MAY authorize transactions to pause or unpause this token.<br/>
	// If this key is not set, or is an empty `KeyList`, this token
	// SHALL NOT be paused or unpaused.<br/>
	// If this key is removed while the token is paused, the token cannot
	// be unpaused and SHALL remain paused.
	PauseKey *Key `protobuf:"bytes,22,opt,name=pause_key,json=pauseKey,proto3" json:"pause_key,omitempty"`
	// *
	// Token "Metadata".
	// <p>
	// The value, if set, MUST NOT exceed 100 bytes.<br/>
	// <dl><dt>Examples</dt>
	//
	//	<dd>hcs://1/0.0.4896575</dd>
	//	<dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
	//
	// </dl>
	Metadata []byte `protobuf:"bytes,23,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// *
	// An Hedera key for managing the token `metadata`.
	// <p>
	// This key, if set, MAY authorize transactions to modify the
	// `metadata` for this token.<br/>
	// If this key is not set, or is an empty `KeyList`, the `metadata`
	// for this token SHALL NOT be modified.
	MetadataKey *Key `protobuf:"bytes,24,opt,name=metadata_key,json=metadataKey,proto3" json:"metadata_key,omitempty"`
}

func (x *TokenCreateTransactionBody) Reset() {
	*x = TokenCreateTransactionBody{}
	mi := &file_token_create_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenCreateTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenCreateTransactionBody) ProtoMessage() {}

func (x *TokenCreateTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_token_create_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenCreateTransactionBody.ProtoReflect.Descriptor instead.
func (*TokenCreateTransactionBody) Descriptor() ([]byte, []int) {
	return file_token_create_proto_rawDescGZIP(), []int{0}
}

func (x *TokenCreateTransactionBody) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TokenCreateTransactionBody) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenCreateTransactionBody) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *TokenCreateTransactionBody) GetInitialSupply() uint64 {
	if x != nil {
		return x.InitialSupply
	}
	return 0
}

func (x *TokenCreateTransactionBody) GetTreasury() *AccountID {
	if x != nil {
		return x.Treasury
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetAdminKey() *Key {
	if x != nil {
		return x.AdminKey
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetKycKey() *Key {
	if x != nil {
		return x.KycKey
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetFreezeKey() *Key {
	if x != nil {
		return x.FreezeKey
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetWipeKey() *Key {
	if x != nil {
		return x.WipeKey
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetSupplyKey() *Key {
	if x != nil {
		return x.SupplyKey
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetFreezeDefault() bool {
	if x != nil {
		return x.FreezeDefault
	}
	return false
}

func (x *TokenCreateTransactionBody) GetExpiry() *Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetAutoRenewAccount() *AccountID {
	if x != nil {
		return x.AutoRenewAccount
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetAutoRenewPeriod() *Duration {
	if x != nil {
		return x.AutoRenewPeriod
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *TokenCreateTransactionBody) GetTokenType() TokenType {
	if x != nil {
		return x.TokenType
	}
	return TokenType_FUNGIBLE_COMMON
}

func (x *TokenCreateTransactionBody) GetSupplyType() TokenSupplyType {
	if x != nil {
		return x.SupplyType
	}
	return TokenSupplyType_INFINITE
}

func (x *TokenCreateTransactionBody) GetMaxSupply() int64 {
	if x != nil {
		return x.MaxSupply
	}
	return 0
}

func (x *TokenCreateTransactionBody) GetFeeScheduleKey() *Key {
	if x != nil {
		return x.FeeScheduleKey
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetCustomFees() []*CustomFee {
	if x != nil {
		return x.CustomFees
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetPauseKey() *Key {
	if x != nil {
		return x.PauseKey
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TokenCreateTransactionBody) GetMetadataKey() *Key {
	if x != nil {
		return x.MetadataKey
	}
	return nil
}

var File_token_create_proto protoreflect.FileDescriptor

var file_token_create_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xbe, 0x07, 0x0a, 0x1a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x2c, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x12, 0x26, 0x0a,
	0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x6b, 0x79, 0x63, 0x4b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x06, 0x6b, 0x79, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x07, 0x77, 0x69, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x07, 0x77, 0x69, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52,
	0x10, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x2e, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x66, 0x65,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x46, 0x65, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x09, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x08,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_token_create_proto_rawDescOnce sync.Once
	file_token_create_proto_rawDescData = file_token_create_proto_rawDesc
)

func file_token_create_proto_rawDescGZIP() []byte {
	file_token_create_proto_rawDescOnce.Do(func() {
		file_token_create_proto_rawDescData = protoimpl.X.CompressGZIP(file_token_create_proto_rawDescData)
	})
	return file_token_create_proto_rawDescData
}

var file_token_create_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_token_create_proto_goTypes = []any{
	(*TokenCreateTransactionBody)(nil), // 0: proto.TokenCreateTransactionBody
	(*AccountID)(nil),                  // 1: proto.AccountID
	(*Key)(nil),                        // 2: proto.Key
	(*Timestamp)(nil),                  // 3: proto.Timestamp
	(*Duration)(nil),                   // 4: proto.Duration
	(TokenType)(0),                     // 5: proto.TokenType
	(TokenSupplyType)(0),               // 6: proto.TokenSupplyType
	(*CustomFee)(nil),                  // 7: proto.CustomFee
}
var file_token_create_proto_depIdxs = []int32{
	1,  // 0: proto.TokenCreateTransactionBody.treasury:type_name -> proto.AccountID
	2,  // 1: proto.TokenCreateTransactionBody.adminKey:type_name -> proto.Key
	2,  // 2: proto.TokenCreateTransactionBody.kycKey:type_name -> proto.Key
	2,  // 3: proto.TokenCreateTransactionBody.freezeKey:type_name -> proto.Key
	2,  // 4: proto.TokenCreateTransactionBody.wipeKey:type_name -> proto.Key
	2,  // 5: proto.TokenCreateTransactionBody.supplyKey:type_name -> proto.Key
	3,  // 6: proto.TokenCreateTransactionBody.expiry:type_name -> proto.Timestamp
	1,  // 7: proto.TokenCreateTransactionBody.autoRenewAccount:type_name -> proto.AccountID
	4,  // 8: proto.TokenCreateTransactionBody.autoRenewPeriod:type_name -> proto.Duration
	5,  // 9: proto.TokenCreateTransactionBody.tokenType:type_name -> proto.TokenType
	6,  // 10: proto.TokenCreateTransactionBody.supplyType:type_name -> proto.TokenSupplyType
	2,  // 11: proto.TokenCreateTransactionBody.fee_schedule_key:type_name -> proto.Key
	7,  // 12: proto.TokenCreateTransactionBody.custom_fees:type_name -> proto.CustomFee
	2,  // 13: proto.TokenCreateTransactionBody.pause_key:type_name -> proto.Key
	2,  // 14: proto.TokenCreateTransactionBody.metadata_key:type_name -> proto.Key
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_token_create_proto_init() }
func file_token_create_proto_init() {
	if File_token_create_proto != nil {
		return
	}
	file_duration_proto_init()
	file_basic_types_proto_init()
	file_custom_fees_proto_init()
	file_timestamp_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_token_create_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_token_create_proto_goTypes,
		DependencyIndexes: file_token_create_proto_depIdxs,
		MessageInfos:      file_token_create_proto_msgTypes,
	}.Build()
	File_token_create_proto = out.File
	file_token_create_proto_rawDesc = nil
	file_token_create_proto_goTypes = nil
	file_token_create_proto_depIdxs = nil
}
