//*
// # Token Wipe Account
// Administratively burn tokens owned by a single, non-treasury, account.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: token_wipe_account.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Wipe (administratively burn) tokens held by a non-treasury account.<br/>
// On success, the requested tokens will be removed from the identified account
// and the token supply will be reduced by the amount "wiped".
//
// This transaction MUST be signed by the token `wipe_key`.<br/>
// The identified token MUST exist, MUST NOT be deleted,
// and MUST NOT be paused.<br/>
// The identified token MUST have a valid `Key` set for the `wipe_key` field,
// and that key MUST NOT be an empty `KeyList`.<br/>
// The identified account MUST exist, MUST NOT be deleted, MUST be
// associated to the identified token, MUST NOT be frozen for the identified
// token, MUST NOT be the token `treasury`, and MUST hold a balance for the
// token or the specific serial numbers provided.<br/>
// This transaction SHOULD provide a value for `amount` or `serialNumbers`,
// but MUST NOT set both fields.
//
// ### Block Stream Effects
// The new total supply for the wiped token type SHALL be recorded.
type TokenWipeAccountTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A token identifier.
	// <p>
	// This field is REQUIRED.<br/>
	// The identified token MUST exist, MUST NOT be paused, MUST NOT be
	// deleted, and MUST NOT be expired.
	Token *TokenID `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// *
	// An account identifier.<br/>
	// This identifies the account from which tokens will be wiped.
	// <p>
	// This field is REQUIRED.<br/>
	// The identified account MUST NOT be deleted or expired.<br/>
	// If the identified token `kyc_key` is set to a valid key, the
	// identified account MUST have "KYC" granted.<br/>
	// The identified account MUST NOT be the `treasury` account for the
	// identified token.
	Account *AccountID `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// *
	// An amount of fungible/common tokens to wipe.
	// <p>
	// If the identified token is a non-fungible/unique token type,
	// this value MUST be exactly zero(`0`).<br/>
	// If the identified token type is fungible/common:
	// <ul>
	//
	//	<li>This value SHALL be specified in units of the smallest
	//	    denomination possible for the identified token
	//	    (<tt>10<sup>-decimals</sup></tt> whole tokens).</li>
	//	<li>This value MUST be strictly less than `Long.MAX_VALUE`.</li>
	//	<li>This value MUST be less than or equal to the current total
	//	    supply for the identified token.</li>
	//	<li>This value MUST be less than or equal to the current balance
	//	    held by the identified account.</li>
	//	<li>This value MAY be zero(`0`).</li>
	//
	// </ul>
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// *
	// A list of serial numbers to wipe.<br/>
	// The non-fungible/unique tokens with these serial numbers will be
	// destroyed and cannot be recovered or reused.
	// <p>
	// If the identified token type is a fungible/common type, this
	// list MUST be empty.<br/>
	// If the identified token type is non-fungible/unique:
	// <ul>
	//
	//	<li>This list MUST contain at least one entry if the identified token
	//	    type is non-fungible/unique.>/li>
	//	<li>This list MUST NOT contain more entries than the current total
	//	    supply for the identified token.</li>
	//	<li>Every entry in this list MUST be a valid serial number for the
	//	    identified token (i.e. "collection").</li>
	//	<li>Every entry in this list MUST be owned by the
	//	    identified account</li>
	//	<li></li>
	//
	// </ul>
	// This list MUST NOT contain more entries than the network configuration
	// value for batch size limit, typically ten(`10`).
	SerialNumbers []int64 `protobuf:"varint,4,rep,packed,name=serialNumbers,proto3" json:"serialNumbers,omitempty"`
}

func (x *TokenWipeAccountTransactionBody) Reset() {
	*x = TokenWipeAccountTransactionBody{}
	mi := &file_token_wipe_account_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenWipeAccountTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenWipeAccountTransactionBody) ProtoMessage() {}

func (x *TokenWipeAccountTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_token_wipe_account_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenWipeAccountTransactionBody.ProtoReflect.Descriptor instead.
func (*TokenWipeAccountTransactionBody) Descriptor() ([]byte, []int) {
	return file_token_wipe_account_proto_rawDescGZIP(), []int{0}
}

func (x *TokenWipeAccountTransactionBody) GetToken() *TokenID {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TokenWipeAccountTransactionBody) GetAccount() *AccountID {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *TokenWipeAccountTransactionBody) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TokenWipeAccountTransactionBody) GetSerialNumbers() []int64 {
	if x != nil {
		return x.SerialNumbers
	}
	return nil
}

var File_token_wipe_account_proto protoreflect.FileDescriptor

var file_token_wipe_account_proto_rawDesc = []byte{
	0x0a, 0x18, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x77, 0x69, 0x70, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x1f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69,
	0x70, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_token_wipe_account_proto_rawDescOnce sync.Once
	file_token_wipe_account_proto_rawDescData = file_token_wipe_account_proto_rawDesc
)

func file_token_wipe_account_proto_rawDescGZIP() []byte {
	file_token_wipe_account_proto_rawDescOnce.Do(func() {
		file_token_wipe_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_token_wipe_account_proto_rawDescData)
	})
	return file_token_wipe_account_proto_rawDescData
}

var file_token_wipe_account_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_token_wipe_account_proto_goTypes = []any{
	(*TokenWipeAccountTransactionBody)(nil), // 0: proto.TokenWipeAccountTransactionBody
	(*TokenID)(nil),                         // 1: proto.TokenID
	(*AccountID)(nil),                       // 2: proto.AccountID
}
var file_token_wipe_account_proto_depIdxs = []int32{
	1, // 0: proto.TokenWipeAccountTransactionBody.token:type_name -> proto.TokenID
	2, // 1: proto.TokenWipeAccountTransactionBody.account:type_name -> proto.AccountID
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_token_wipe_account_proto_init() }
func file_token_wipe_account_proto_init() {
	if File_token_wipe_account_proto != nil {
		return
	}
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_token_wipe_account_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_token_wipe_account_proto_goTypes,
		DependencyIndexes: file_token_wipe_account_proto_depIdxs,
		MessageInfos:      file_token_wipe_account_proto_msgTypes,
	}.Build()
	File_token_wipe_account_proto = out.File
	file_token_wipe_account_proto_rawDesc = nil
	file_token_wipe_account_proto_goTypes = nil
	file_token_wipe_account_proto_depIdxs = nil
}
