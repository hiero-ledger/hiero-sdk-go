//*
// # Token Reject
// Messages used to implement a transaction to reject a token type from an
// account.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: token_reject.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Reject undesired token(s).<br/>
// Transfer one or more token balances held by the requesting account to the
// treasury for each token type.
//
// Each transfer SHALL be one of the following
// - A single non-fungible/unique token.
// - The full balance held for a fungible/common token.
// A single `tokenReject` transaction SHALL support a maximum
// of 10 transfers.<br/>
// A token that is `pause`d MUST NOT be rejected.<br/>
// If the `owner` account is `frozen` with respect to the identified token(s)
// the token(s) MUST NOT be rejected.<br/>
// The `payer` for this transaction, and `owner` if set, SHALL NOT be charged
// any custom fees or other fees beyond the `tokenReject` transaction fee.
//
// ### Block Stream Effects
//   - Each successful transfer from `payer` to `treasury` SHALL be recorded in
//     the `token_transfer_list` for the transaction record.
type TokenRejectTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// An account identifier.<br/>
	// This OPTIONAL field identifies the account holding the
	// tokens to be rejected.
	// <p>
	// If set, this account MUST sign this transaction.
	// If not set, the `payer` for this transaction SHALL be the effective
	// `owner` for this transaction.
	Owner *AccountID `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// *
	// A list of one or more token rejections.
	// <p>
	// On success each rejected token serial number or balance SHALL be
	// transferred from the requesting account to the treasury account for
	// that token type.<br/>
	// After rejection the requesting account SHALL continue to be associated
	// with the token.<br/>
	// If dissociation is desired then a separate `TokenDissociate` transaction
	// MUST be submitted to remove the association.<br/>
	// This list MUST contain at least one (1) entry and MUST NOT contain more
	// than ten (10) entries.
	Rejections    []*TokenReference `protobuf:"bytes,2,rep,name=rejections,proto3" json:"rejections,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenRejectTransactionBody) Reset() {
	*x = TokenRejectTransactionBody{}
	mi := &file_token_reject_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenRejectTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRejectTransactionBody) ProtoMessage() {}

func (x *TokenRejectTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_token_reject_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRejectTransactionBody.ProtoReflect.Descriptor instead.
func (*TokenRejectTransactionBody) Descriptor() ([]byte, []int) {
	return file_token_reject_proto_rawDescGZIP(), []int{0}
}

func (x *TokenRejectTransactionBody) GetOwner() *AccountID {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *TokenRejectTransactionBody) GetRejections() []*TokenReference {
	if x != nil {
		return x.Rejections
	}
	return nil
}

// *
// A union token identifier.
//
// Identify a fungible/common token type, or a single
// non-fungible/unique token serial.
type TokenReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TokenIdentifier:
	//
	//	*TokenReference_FungibleToken
	//	*TokenReference_Nft
	TokenIdentifier isTokenReference_TokenIdentifier `protobuf_oneof:"token_identifier"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TokenReference) Reset() {
	*x = TokenReference{}
	mi := &file_token_reject_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenReference) ProtoMessage() {}

func (x *TokenReference) ProtoReflect() protoreflect.Message {
	mi := &file_token_reject_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenReference.ProtoReflect.Descriptor instead.
func (*TokenReference) Descriptor() ([]byte, []int) {
	return file_token_reject_proto_rawDescGZIP(), []int{1}
}

func (x *TokenReference) GetTokenIdentifier() isTokenReference_TokenIdentifier {
	if x != nil {
		return x.TokenIdentifier
	}
	return nil
}

func (x *TokenReference) GetFungibleToken() *TokenID {
	if x != nil {
		if x, ok := x.TokenIdentifier.(*TokenReference_FungibleToken); ok {
			return x.FungibleToken
		}
	}
	return nil
}

func (x *TokenReference) GetNft() *NftID {
	if x != nil {
		if x, ok := x.TokenIdentifier.(*TokenReference_Nft); ok {
			return x.Nft
		}
	}
	return nil
}

type isTokenReference_TokenIdentifier interface {
	isTokenReference_TokenIdentifier()
}

type TokenReference_FungibleToken struct {
	// *
	// A fungible/common token type.
	FungibleToken *TokenID `protobuf:"bytes,1,opt,name=fungible_token,json=fungibleToken,proto3,oneof"`
}

type TokenReference_Nft struct {
	// *
	// A single specific serialized non-fungible/unique token.
	Nft *NftID `protobuf:"bytes,2,opt,name=nft,proto3,oneof"`
}

func (*TokenReference_FungibleToken) isTokenReference_TokenIdentifier() {}

func (*TokenReference_Nft) isTokenReference_TokenIdentifier() {}

var File_token_reject_proto protoreflect.FileDescriptor

const file_token_reject_proto_rawDesc = "" +
	"\n" +
	"\x12token_reject.proto\x12\x05proto\x1a\x11basic_types.proto\"{\n" +
	"\x1aTokenRejectTransactionBody\x12&\n" +
	"\x05owner\x18\x01 \x01(\v2\x10.proto.AccountIDR\x05owner\x125\n" +
	"\n" +
	"rejections\x18\x02 \x03(\v2\x15.proto.TokenReferenceR\n" +
	"rejections\"\x7f\n" +
	"\x0eTokenReference\x127\n" +
	"\x0efungible_token\x18\x01 \x01(\v2\x0e.proto.TokenIDH\x00R\rfungibleToken\x12 \n" +
	"\x03nft\x18\x02 \x01(\v2\f.proto.NftIDH\x00R\x03nftB\x12\n" +
	"\x10token_identifierB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_token_reject_proto_rawDescOnce sync.Once
	file_token_reject_proto_rawDescData []byte
)

func file_token_reject_proto_rawDescGZIP() []byte {
	file_token_reject_proto_rawDescOnce.Do(func() {
		file_token_reject_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_token_reject_proto_rawDesc), len(file_token_reject_proto_rawDesc)))
	})
	return file_token_reject_proto_rawDescData
}

var file_token_reject_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_token_reject_proto_goTypes = []any{
	(*TokenRejectTransactionBody)(nil), // 0: proto.TokenRejectTransactionBody
	(*TokenReference)(nil),             // 1: proto.TokenReference
	(*AccountID)(nil),                  // 2: proto.AccountID
	(*TokenID)(nil),                    // 3: proto.TokenID
	(*NftID)(nil),                      // 4: proto.NftID
}
var file_token_reject_proto_depIdxs = []int32{
	2, // 0: proto.TokenRejectTransactionBody.owner:type_name -> proto.AccountID
	1, // 1: proto.TokenRejectTransactionBody.rejections:type_name -> proto.TokenReference
	3, // 2: proto.TokenReference.fungible_token:type_name -> proto.TokenID
	4, // 3: proto.TokenReference.nft:type_name -> proto.NftID
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_token_reject_proto_init() }
func file_token_reject_proto_init() {
	if File_token_reject_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_token_reject_proto_msgTypes[1].OneofWrappers = []any{
		(*TokenReference_FungibleToken)(nil),
		(*TokenReference_Nft)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_token_reject_proto_rawDesc), len(file_token_reject_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_token_reject_proto_goTypes,
		DependencyIndexes: file_token_reject_proto_depIdxs,
		MessageInfos:      file_token_reject_proto_msgTypes,
	}.Build()
	File_token_reject_proto = out.File
	file_token_reject_proto_goTypes = nil
	file_token_reject_proto_depIdxs = nil
}
