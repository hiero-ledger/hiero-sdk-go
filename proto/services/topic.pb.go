//*
// # HCS Topic Information
// The current network state of an Hedera Consensus Service (HCS) Topic.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119)
// and clarified in [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: topic.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Representation of an Hedera Consensus Service(HCS) topic.
//
// As with all network entities, a topic has a unique entity number, which is
// usually given along with the network's shard and realm in the form of a
// shard.realm.number id.<br/>
// An HCS topic is an ordered logical stream of messages united and secured by
// a running hash of those messages. The integrity of any message on a topic,
// and the topic stream as a whole, can always be ascertained from block stream
// data by recomputing the running hash across any subset of messages on the
// topic.<br/>
// The messages on a topic SHALL NOT be stored in network state, but are
// available in the network block stream, and may be queried via the
// Mirror Node system.
type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The topic's ID.
	// <p>
	// This value SHALL be unique within the network.
	TopicId *TopicID `protobuf:"bytes,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	// *
	// The number of messages sent to the topic.
	SequenceNumber int64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// *
	// The expiration time for this topic, in seconds since the epoch.
	// <p>
	// For this purpose, `epoch` SHALL be the UNIX epoch with 0 at `1970-01-01T00:00:00.000Z`.
	ExpirationSecond int64 `protobuf:"varint,3,opt,name=expiration_second,json=expirationSecond,proto3" json:"expiration_second,omitempty"`
	// *
	// The number of seconds for which the topic will be automatically renewed
	// upon expiring (if it has a valid auto-renew account).
	AutoRenewPeriod int64 `protobuf:"varint,4,opt,name=auto_renew_period,json=autoRenewPeriod,proto3" json:"auto_renew_period,omitempty"`
	// *
	// The id of the account (if any) that the network will attempt to charge
	// fees to complete auto-renewal of this topic, upon expiration.
	AutoRenewAccountId *AccountID `protobuf:"bytes,5,opt,name=auto_renew_account_id,json=autoRenewAccountId,proto3" json:"auto_renew_account_id,omitempty"`
	// *
	// A flag indicating that this topic is deleted.
	Deleted bool `protobuf:"varint,6,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// *
	// The current running hash of this topic.
	// <p>
	// This 48-byte field is the output of a SHA-384 digest with input data
	// determined by the current version of the running hash algorithm used
	// by the network.<br/>
	// All topics in state SHALL use running hash algorithm version `3`.<br/>
	// The bytes of each uint64 or uint32 encoded for the hash input MUST be in
	// Big-Endian format.
	// <p>
	// <hr/>
	// If the algorithm version is '3', then the input data to the SHA-384
	// digest are, in order:
	// <ol>
	//
	//	<li>The previous running hash of the topic (48 bytes)</li>
	//	<li>The `topicRunningHashVersion` (8 bytes)</li>
	//	<li>The payer account's shard (8 bytes)</li>
	//	<li>The payer account's realm (8 bytes)</li>
	//	<li>The payer account's number (8 bytes)</li>
	//	<li>The topic's shard (8 bytes)</li>
	//	<li>The topic's realm (8 bytes)</li>
	//	<li>The topic's number (8 bytes)</li>
	//	<li>The number of seconds since the epoch when the
	//	    `ConsensusSubmitMessage` reached consensus (8 bytes)</li>
	//	<li>The number of nanoseconds within the second when the
	//	    `ConsensusSubmitMessage` reached consensus (4 bytes)</li>
	//	<li>The `topicSequenceNumber` (8 bytes)</li>
	//	<li>The output of a SHA-384 digest of the message bytes from the
	//	    `ConsensusSubmitMessage` (48 bytes)</li>
	//
	// </ol>
	// <blockquote>Note that older messages on a topic, which are available in
	// the block stream, MAY use older algorithm versions, and the block stream
	// record incorporates a running hash version field to ensure the correct
	// hash calculation for each such historical message.</blockquote>
	RunningHash []byte `protobuf:"bytes,7,opt,name=running_hash,json=runningHash,proto3" json:"running_hash,omitempty"`
	// *
	// A short description of this topic.
	// <p>
	// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
	// (default 100) bytes when encoded as UTF-8.
	Memo string `protobuf:"bytes,8,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// Access control for modification of the topic.
	// <p>
	// If this field is set, that key MUST sign each message to update or delete
	// this topic.<br/>
	// A topic without an admin key SHALL be immutable, except for expiration
	// and renewal.<br/>
	// If this field is not set, the `auto_renew_account_id` MUST NOT be set.
	AdminKey *Key `protobuf:"bytes,9,opt,name=admin_key,json=adminKey,proto3" json:"admin_key,omitempty"`
	// *
	// Access control for message submission to the topic.
	// <p>
	// If this field is set, that key MUST sign each consensus submit message
	// for this topic.
	SubmitKey *Key `protobuf:"bytes,10,opt,name=submit_key,json=submitKey,proto3" json:"submit_key,omitempty"`
	// *
	// Access control for update/delete of custom fees.
	// <p>
	// If this field is unset, the current custom fees CANNOT be changed.<br/>
	// If this field is set, that `Key` MUST sign any transaction to update
	// the custom fee schedule for this topic.
	FeeScheduleKey *Key `protobuf:"bytes,11,opt,name=fee_schedule_key,json=feeScheduleKey,proto3" json:"fee_schedule_key,omitempty"`
	// *
	// A set of "privileged payer" keys<br/>
	// Keys in this list are permitted to submit messages to this topic without
	// paying custom fees associated with this topic.
	// <p>
	// If a submit transaction is signed by _any_ key included in this set,
	// custom fees SHALL NOT be charged for that transaction.<br/>
	// A `fee_exempt_key_list` MUST NOT contain more than
	// `MAX_ENTRIES_FOR_FEE_EXEMPT_KEY_LIST` keys.<br/>
	// A `fee_exempt_key_list` MUST NOT contain any duplicate keys.<br/>
	// A `fee_exempt_key_list` MAY contain keys for accounts that are inactive,
	// deleted, or non-existent.
	// If not set, there SHALL NOT be any fee-exempt keys.  In particular, the
	// following keys SHALL NOT be implicitly or automatically added to this
	// list: `adminKey`, `submitKey`, `fee_schedule_key`.
	FeeExemptKeyList []*Key `protobuf:"bytes,12,rep,name=fee_exempt_key_list,json=feeExemptKeyList,proto3" json:"fee_exempt_key_list,omitempty"`
	// *
	// A set of custom fee definitions.<br/>
	// These are fees to be assessed for each submit to this topic.
	// <p>
	// If this list is empty, the only fees charged for a submit to this
	// topic SHALL be the network and node fees.<br/>
	// If this list is not empty, each fee defined in this set SHALL
	// be evaluated for each message submitted to this topic, and the
	// resultant total assessed fees SHALL be charged.<br/>
	// If this list is not empty, custom fees defined here SHALL be
	// charged _in addition to_ the base network and node fees.
	CustomFees []*FixedCustomFee `protobuf:"bytes,13,rep,name=custom_fees,json=customFees,proto3" json:"custom_fees,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	mi := &file_topic_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_topic_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_topic_proto_rawDescGZIP(), []int{0}
}

func (x *Topic) GetTopicId() *TopicID {
	if x != nil {
		return x.TopicId
	}
	return nil
}

func (x *Topic) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Topic) GetExpirationSecond() int64 {
	if x != nil {
		return x.ExpirationSecond
	}
	return 0
}

func (x *Topic) GetAutoRenewPeriod() int64 {
	if x != nil {
		return x.AutoRenewPeriod
	}
	return 0
}

func (x *Topic) GetAutoRenewAccountId() *AccountID {
	if x != nil {
		return x.AutoRenewAccountId
	}
	return nil
}

func (x *Topic) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Topic) GetRunningHash() []byte {
	if x != nil {
		return x.RunningHash
	}
	return nil
}

func (x *Topic) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Topic) GetAdminKey() *Key {
	if x != nil {
		return x.AdminKey
	}
	return nil
}

func (x *Topic) GetSubmitKey() *Key {
	if x != nil {
		return x.SubmitKey
	}
	return nil
}

func (x *Topic) GetFeeScheduleKey() *Key {
	if x != nil {
		return x.FeeScheduleKey
	}
	return nil
}

func (x *Topic) GetFeeExemptKeyList() []*Key {
	if x != nil {
		return x.FeeExemptKeyList
	}
	return nil
}

func (x *Topic) GetCustomFees() []*FixedCustomFee {
	if x != nil {
		return x.CustomFees
	}
	return nil
}

var File_topic_proto protoreflect.FileDescriptor

var file_topic_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x66, 0x65, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x04, 0x0a, 0x05, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x6e, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x43, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x27, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x66,
	0x65, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x39, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x66, 0x65, 0x65, 0x45,
	0x78, 0x65, 0x6d, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x46, 0x65, 0x65, 0x73, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_topic_proto_rawDescOnce sync.Once
	file_topic_proto_rawDescData = file_topic_proto_rawDesc
)

func file_topic_proto_rawDescGZIP() []byte {
	file_topic_proto_rawDescOnce.Do(func() {
		file_topic_proto_rawDescData = protoimpl.X.CompressGZIP(file_topic_proto_rawDescData)
	})
	return file_topic_proto_rawDescData
}

var file_topic_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_topic_proto_goTypes = []any{
	(*Topic)(nil),          // 0: proto.Topic
	(*TopicID)(nil),        // 1: proto.TopicID
	(*AccountID)(nil),      // 2: proto.AccountID
	(*Key)(nil),            // 3: proto.Key
	(*FixedCustomFee)(nil), // 4: proto.FixedCustomFee
}
var file_topic_proto_depIdxs = []int32{
	1, // 0: proto.Topic.topic_id:type_name -> proto.TopicID
	2, // 1: proto.Topic.auto_renew_account_id:type_name -> proto.AccountID
	3, // 2: proto.Topic.admin_key:type_name -> proto.Key
	3, // 3: proto.Topic.submit_key:type_name -> proto.Key
	3, // 4: proto.Topic.fee_schedule_key:type_name -> proto.Key
	3, // 5: proto.Topic.fee_exempt_key_list:type_name -> proto.Key
	4, // 6: proto.Topic.custom_fees:type_name -> proto.FixedCustomFee
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_topic_proto_init() }
func file_topic_proto_init() {
	if File_topic_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_custom_fees_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_topic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_topic_proto_goTypes,
		DependencyIndexes: file_topic_proto_depIdxs,
		MessageInfos:      file_topic_proto_msgTypes,
	}.Build()
	File_topic_proto = out.File
	file_topic_proto_rawDesc = nil
	file_topic_proto_goTypes = nil
	file_topic_proto_depIdxs = nil
}
