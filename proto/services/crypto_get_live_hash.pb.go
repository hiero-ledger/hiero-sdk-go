//*
// # Get Live Hash
// Standard query to inspect associations between content and accounts
// via SHA-384 hashes.
//
// > Important
// >> This query is obsolete and not supported.<br/>
// >> Any query of this type that is submitted SHALL fail with a `PRE_CHECK`
// >> result of `NOT_SUPPORTED`.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: crypto_get_live_hash.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Request detail for a specific live hash associated to a specific account.
type CryptoGetLiveHashQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Standard information sent with every query operation.<br/>
	// This includes the signed payment and what kind of response is requested
	// (cost, state proof, both, or neither).
	Header *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// An account ID.<br/>
	// The network SHALL return live hash information for this account,
	// if successful.
	AccountID *AccountID `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	// *
	// The specific SHA-384 live hash to inspect
	Hash          []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CryptoGetLiveHashQuery) Reset() {
	*x = CryptoGetLiveHashQuery{}
	mi := &file_crypto_get_live_hash_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptoGetLiveHashQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoGetLiveHashQuery) ProtoMessage() {}

func (x *CryptoGetLiveHashQuery) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_get_live_hash_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoGetLiveHashQuery.ProtoReflect.Descriptor instead.
func (*CryptoGetLiveHashQuery) Descriptor() ([]byte, []int) {
	return file_crypto_get_live_hash_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoGetLiveHashQuery) GetHeader() *QueryHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CryptoGetLiveHashQuery) GetAccountID() *AccountID {
	if x != nil {
		return x.AccountID
	}
	return nil
}

func (x *CryptoGetLiveHashQuery) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// *
// Return the full live hash associated to an account, if it is present.
//
// > Note that to generate a state proof of the _absence_ of a live hash from
// > an account a transaction MUST retrieve a state proof of the `Account`
// > with its list of live hashes.
type CryptoGetLiveHashResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The standard response information for queries.<br/>
	// This includes the values requested in the `QueryHeader`
	// (cost, state proof, both, or neither).
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// The requested live hash, if found.
	LiveHash      *LiveHash `protobuf:"bytes,2,opt,name=liveHash,proto3" json:"liveHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CryptoGetLiveHashResponse) Reset() {
	*x = CryptoGetLiveHashResponse{}
	mi := &file_crypto_get_live_hash_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptoGetLiveHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoGetLiveHashResponse) ProtoMessage() {}

func (x *CryptoGetLiveHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_get_live_hash_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoGetLiveHashResponse.ProtoReflect.Descriptor instead.
func (*CryptoGetLiveHashResponse) Descriptor() ([]byte, []int) {
	return file_crypto_get_live_hash_proto_rawDescGZIP(), []int{1}
}

func (x *CryptoGetLiveHashResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CryptoGetLiveHashResponse) GetLiveHash() *LiveHash {
	if x != nil {
		return x.LiveHash
	}
	return nil
}

var File_crypto_get_live_hash_proto protoreflect.FileDescriptor

const file_crypto_get_live_hash_proto_rawDesc = "" +
	"\n" +
	"\x1acrypto_get_live_hash.proto\x12\x05proto\x1a\x11basic_types.proto\x1a\x12query_header.proto\x1a\x15response_header.proto\x1a\x1acrypto_add_live_hash.proto\"\x88\x01\n" +
	"\x16CryptoGetLiveHashQuery\x12*\n" +
	"\x06header\x18\x01 \x01(\v2\x12.proto.QueryHeaderR\x06header\x12.\n" +
	"\taccountID\x18\x02 \x01(\v2\x10.proto.AccountIDR\taccountID\x12\x12\n" +
	"\x04hash\x18\x03 \x01(\fR\x04hash\"w\n" +
	"\x19CryptoGetLiveHashResponse\x12-\n" +
	"\x06header\x18\x01 \x01(\v2\x15.proto.ResponseHeaderR\x06header\x12+\n" +
	"\bliveHash\x18\x02 \x01(\v2\x0f.proto.LiveHashR\bliveHashB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_crypto_get_live_hash_proto_rawDescOnce sync.Once
	file_crypto_get_live_hash_proto_rawDescData []byte
)

func file_crypto_get_live_hash_proto_rawDescGZIP() []byte {
	file_crypto_get_live_hash_proto_rawDescOnce.Do(func() {
		file_crypto_get_live_hash_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_crypto_get_live_hash_proto_rawDesc), len(file_crypto_get_live_hash_proto_rawDesc)))
	})
	return file_crypto_get_live_hash_proto_rawDescData
}

var file_crypto_get_live_hash_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_crypto_get_live_hash_proto_goTypes = []any{
	(*CryptoGetLiveHashQuery)(nil),    // 0: proto.CryptoGetLiveHashQuery
	(*CryptoGetLiveHashResponse)(nil), // 1: proto.CryptoGetLiveHashResponse
	(*QueryHeader)(nil),               // 2: proto.QueryHeader
	(*AccountID)(nil),                 // 3: proto.AccountID
	(*ResponseHeader)(nil),            // 4: proto.ResponseHeader
	(*LiveHash)(nil),                  // 5: proto.LiveHash
}
var file_crypto_get_live_hash_proto_depIdxs = []int32{
	2, // 0: proto.CryptoGetLiveHashQuery.header:type_name -> proto.QueryHeader
	3, // 1: proto.CryptoGetLiveHashQuery.accountID:type_name -> proto.AccountID
	4, // 2: proto.CryptoGetLiveHashResponse.header:type_name -> proto.ResponseHeader
	5, // 3: proto.CryptoGetLiveHashResponse.liveHash:type_name -> proto.LiveHash
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_crypto_get_live_hash_proto_init() }
func file_crypto_get_live_hash_proto_init() {
	if File_crypto_get_live_hash_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_query_header_proto_init()
	file_response_header_proto_init()
	file_crypto_add_live_hash_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_crypto_get_live_hash_proto_rawDesc), len(file_crypto_get_live_hash_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_crypto_get_live_hash_proto_goTypes,
		DependencyIndexes: file_crypto_get_live_hash_proto_depIdxs,
		MessageInfos:      file_crypto_get_live_hash_proto_msgTypes,
	}.Build()
	File_crypto_get_live_hash_proto = out.File
	file_crypto_get_live_hash_proto_goTypes = nil
	file_crypto_get_live_hash_proto_depIdxs = nil
}
