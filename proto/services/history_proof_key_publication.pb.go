//*
// # Proof Key Publication Transaction
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: history_proof_key_publication.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A transaction body to publish a node's history proof key.
type HistoryProofKeyPublicationTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The proof key the submitting node intends to use when
	// contributing signatures for use in proving history
	// belongs to the chain of trust for the ledger id.
	ProofKey []byte `protobuf:"bytes,1,opt,name=proof_key,json=proofKey,proto3" json:"proof_key,omitempty"`
}

func (x *HistoryProofKeyPublicationTransactionBody) Reset() {
	*x = HistoryProofKeyPublicationTransactionBody{}
	mi := &file_history_proof_key_publication_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryProofKeyPublicationTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryProofKeyPublicationTransactionBody) ProtoMessage() {}

func (x *HistoryProofKeyPublicationTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_history_proof_key_publication_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryProofKeyPublicationTransactionBody.ProtoReflect.Descriptor instead.
func (*HistoryProofKeyPublicationTransactionBody) Descriptor() ([]byte, []int) {
	return file_history_proof_key_publication_proto_rawDescGZIP(), []int{0}
}

func (x *HistoryProofKeyPublicationTransactionBody) GetProofKey() []byte {
	if x != nil {
		return x.ProofKey
	}
	return nil
}

var File_history_proof_key_publication_proto protoreflect.FileDescriptor

var file_history_proof_key_publication_proto_rawDesc = []byte{
	0x0a, 0x23, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x2e, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0x48, 0x0a, 0x29, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4b, 0x65, 0x79, 0x42, 0x35, 0x0a, 0x31, 0x63,
	0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x2e, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72,
	0x79, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_history_proof_key_publication_proto_rawDescOnce sync.Once
	file_history_proof_key_publication_proto_rawDescData = file_history_proof_key_publication_proto_rawDesc
)

func file_history_proof_key_publication_proto_rawDescGZIP() []byte {
	file_history_proof_key_publication_proto_rawDescOnce.Do(func() {
		file_history_proof_key_publication_proto_rawDescData = protoimpl.X.CompressGZIP(file_history_proof_key_publication_proto_rawDescData)
	})
	return file_history_proof_key_publication_proto_rawDescData
}

var file_history_proof_key_publication_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_history_proof_key_publication_proto_goTypes = []any{
	(*HistoryProofKeyPublicationTransactionBody)(nil), // 0: com.hedera.hapi.services.auxiliary.history.HistoryProofKeyPublicationTransactionBody
}
var file_history_proof_key_publication_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_history_proof_key_publication_proto_init() }
func file_history_proof_key_publication_proto_init() {
	if File_history_proof_key_publication_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_history_proof_key_publication_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_history_proof_key_publication_proto_goTypes,
		DependencyIndexes: file_history_proof_key_publication_proto_depIdxs,
		MessageInfos:      file_history_proof_key_publication_proto_msgTypes,
	}.Build()
	File_history_proof_key_publication_proto = out.File
	file_history_proof_key_publication_proto_rawDesc = nil
	file_history_proof_key_publication_proto_goTypes = nil
	file_history_proof_key_publication_proto_depIdxs = nil
}
