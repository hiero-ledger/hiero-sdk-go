//*
// # Token Update
// Modify the characteristics of an existing token. Most changes require that
// the transaction be signed by an `admin_key`, and if that key is not valid
// the only change permitted is to extend the token expiration.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: token_update.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Update an existing token.
//
// This transaction SHALL NOT update any field that is not set.<br/>
// Most changes MUST be signed by the current `admin_key` of the token. If the
// token does not currently have a valid `admin_key`, then this transaction
// MUST NOT set any value other than `expiry` or a non-admin key.<br/>
// If the `treasury` is set to a new account, the new account MUST sign this
// transaction.<br/>
// If the `treasury` is set to a new account for a _non-fungible/unique_ token,
// The current treasury MUST NOT hold any tokens, or the network configuration
// property `tokens.nfts.useTreasuryWildcards` MUST be set.
//
// #### Requirements for Keys
// Any of the key values may be changed, even without an admin key, but the
// key to be changed MUST have an existing valid key assigned, and both the
// current key and the new key MUST sign the transaction.<br/>
// A key value MAY be set to an empty `KeyList`. In this case the existing
// key MUST sign this transaction, but the new value is not a valid key, and the
// update SHALL effectively remove the existing key.
//
// ### Block Stream Effects
// None
type TokenUpdateTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A token identifier.
	// <p>
	// This SHALL identify the token type to delete.<br/>
	// The identified token MUST exist, and MUST NOT be deleted.<br/>
	// If any field other than `expiry` is set, the identified token MUST
	// have a valid `admin_key`.
	Token *TokenID `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// *
	// A new symbol to use for the token.
	// <p>
	// This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
	// This value, if set, MUST NOT contain the Unicode NUL codepoint.
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// *
	// A new name for the token.<br/>
	// This is generally the "full name" displayed in wallet software.
	// <p>
	// This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
	// This value, if set, MUST NOT contain the Unicode NUL codepoint.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// A new treasury account identifier.
	// <p>
	// If set,
	//   - The identified account SHALL be designated the "treasury" for the
	//     token, and all tokens "minted" SHALL be delivered to that account
	//     following this transaction.<br/>
	//   - The identified account MUST exist, MUST NOT be expired, MUST NOT be
	//     deleted, and SHOULD have a non-zero HBAR balance.<br/>
	//   - The identified account SHALL be associated to this token.
	//   - The full balance of this token held by the prior treasury account
	//     SHALL be transferred to the new treasury account, if the token type
	//     is fungible/common.
	//   - If the token type is non-fungible/unique, the previous treasury
	//     account MUST NOT hold any tokens of this type.
	//   - The new treasury account key MUST sign this transaction.
	Treasury *AccountID `protobuf:"bytes,4,opt,name=treasury,proto3" json:"treasury,omitempty"`
	// *
	// An Hedera key for token administration.
	// <p>
	// This key, if set, SHALL have administrative authority for this token and
	// MAY authorize token update and/or token delete transactions.<br/>
	// If this key is set to an empty `KeyList`, this token SHALL be
	// immutable thereafter, except for expiration and renewal.<br/>
	// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
	// If set to a valid key, the previous key and new key MUST both
	// sign this transaction.
	AdminKey *Key `protobuf:"bytes,5,opt,name=adminKey,proto3" json:"adminKey,omitempty"`
	// *
	// An Hedera key for managing account KYC.
	// <p>
	// This key, if set, SHALL have KYC authority for this token and
	// MAY authorize transactions to grant or revoke KYC for accounts.<br/>
	// If this key is not set, or is an empty `KeyList`, KYC status for this
	// token SHALL NOT be granted or revoked for any account.<br/>
	// If this key is removed after granting KYC, those grants SHALL remain
	// and cannot be revoked.<br/>
	// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
	// If set to a valid key, the previous key and new key MUST both
	// sign this transaction.
	KycKey *Key `protobuf:"bytes,6,opt,name=kycKey,proto3" json:"kycKey,omitempty"`
	// *
	// An Hedera key for managing asset "freeze".
	// <p>
	// This key, if set, SHALL have "freeze" authority for this token and
	// MAY authorize transactions to freeze or unfreeze accounts
	// with respect to this token.<br/>
	// If this key is set to an empty `KeyList`, this token
	// SHALL NOT be frozen or unfrozen for any account.<br/>
	// If this key is removed after freezing accounts, those accounts
	// SHALL remain frozen and cannot be unfrozen.<br/>
	// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
	// If set to a valid key, the previous key and new key MUST both
	// sign this transaction.
	FreezeKey *Key `protobuf:"bytes,7,opt,name=freezeKey,proto3" json:"freezeKey,omitempty"`
	// *
	// An Hedera key for wiping tokens from accounts.
	// <p>
	// This key, if set, SHALL have "wipe" authority for this token and
	// MAY authorize transactions to "wipe" any amount of this token from
	// any account, effectively burning the tokens "wiped".<br/>
	// If this key is set to an empty `KeyList`, it SHALL NOT be
	// possible to "wipe" this token from an account.<br/>
	// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
	// If set to a valid key, the previous key and new key MUST both
	// sign this transaction.
	WipeKey *Key `protobuf:"bytes,8,opt,name=wipeKey,proto3" json:"wipeKey,omitempty"`
	// *
	// An Hedera key for "minting" and "burning" tokens.
	// <p>
	// This key, if set, MAY authorize transactions to "mint" new tokens to
	// be delivered to the token treasury or "burn" tokens held by the
	// token treasury.<br/>
	// If this key is set to an empty `KeyList`, it SHALL NOT be
	// possible to change the supply of tokens and neither "mint" nor "burn"
	// transactions SHALL be permitted.<br/>
	// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
	// If set to a valid key, the previous key and new key MUST both
	// sign this transaction.
	SupplyKey *Key `protobuf:"bytes,9,opt,name=supplyKey,proto3" json:"supplyKey,omitempty"`
	// *
	// An identifier for the account to be charged renewal fees at the token's
	// expiry to extend the lifetime of the token.
	// <p>
	// If this value is set for the identified token, the token lifetime SHALL
	// be extended by the _smallest_ of the following at expiration:
	// <ul>
	//
	//	<li>The current `autoRenewPeriod` duration.</li>
	//	<li>The maximum duration that this account has funds to purchase.</li>
	//	<li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
	//	    renewal.</li>
	//
	// </ul>
	// If this account's HBAR balance is `0` when the token must be
	// renewed, then the token SHALL be expired, and MAY be subsequently
	// removed from state.<br/>
	// If this value is set, the referenced account MUST sign this
	// transaction.
	// <p>
	// <blockquote>Note<blockquote>
	// It is not currently possible to remove an automatic renewal account.
	// Once set, it can only be replaced by a valid account.
	// </blockquote></blockquote>
	AutoRenewAccount *AccountID `protobuf:"bytes,10,opt,name=autoRenewAccount,proto3" json:"autoRenewAccount,omitempty"`
	// *
	// A duration between token automatic renewals.<br/>
	// All entities in state may be charged "rent" occasionally (typically
	// every 90 days) to prevent unnecessary growth of the ledger. This value
	// sets the interval between such events for this token.
	// <p>
	// If set, this value MUST be greater than the configured
	// `MIN_AUTORENEW_PERIOD`.<br/>
	// If set, this value MUST be less than the configured
	// `MAX_AUTORENEW_PERIOD`.
	AutoRenewPeriod *Duration `protobuf:"bytes,11,opt,name=autoRenewPeriod,proto3" json:"autoRenewPeriod,omitempty"`
	// *
	// An expiration timestamp.
	// <p>
	// If this value is set, the automatic renewal account is not set for the
	// identified token, and token expiration is enabled in network
	// configuration, this token SHALL expire when the consensus time exceeds
	// this value, and MAY be subsequently removed from the network state.<br/>
	// If `autoRenewAccount` is set or the `auto_renew_account_id` is set for
	// the identified token, the token SHALL be subject to automatic renewal
	// when the consensus time exceeds this value.
	Expiry *Timestamp `protobuf:"bytes,12,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// *
	// A short description for this token.
	// <p>
	// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
	// (default 100) bytes when encoded as UTF-8.
	Memo *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// An Hedera key for managing the token custom fee schedule.
	// <p>
	// This key, if set, MAY authorize transactions to modify the
	// `custom_fees` for this token.<br/>
	// If this key is set to an empty `KeyList`, the `custom_fees`
	// for this token SHALL NOT be modified.<br/>
	// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
	// If set to a valid key, the previous key and new key MUST both
	// sign this transaction.
	FeeScheduleKey *Key `protobuf:"bytes,14,opt,name=fee_schedule_key,json=feeScheduleKey,proto3" json:"fee_schedule_key,omitempty"`
	// *
	// An Hedera key for managing token "pause".
	// <p>
	// This key, if set, SHALL have "pause" authority for this token and
	// MAY authorize transactions to pause or unpause this token.<br/>
	// If this key is set to an empty `KeyList`, this token
	// SHALL NOT be paused or unpaused.<br/>
	// If this key is removed while the token is paused, the token cannot
	// be unpaused and SHALL remain paused.<br/>
	// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
	// If set to a valid key, the previous key and new key MUST both
	// sign this transaction.
	PauseKey *Key `protobuf:"bytes,15,opt,name=pause_key,json=pauseKey,proto3" json:"pause_key,omitempty"`
	// *
	// Token "Metadata".
	// <p>
	// The value, if set, MUST NOT exceed 100 bytes.<br/>
	// <dl><dt>Examples</dt>
	//
	//	<dd>hcs://1/0.0.4896575</dd>
	//	<dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
	//
	// </dl>
	Metadata *wrapperspb.BytesValue `protobuf:"bytes,16,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// *
	// An Hedera key for managing the token `metadata`.
	// <p>
	// This key, if set, MAY authorize transactions to modify the
	// `metadata` for this token.<br/>
	// If this key is set to an empty `KeyList`, the `metadata`
	// for this token SHALL NOT be modified.<br/>
	// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
	// If set to a valid key, the previous key and new key MUST both
	// sign this transaction.
	MetadataKey *Key `protobuf:"bytes,17,opt,name=metadata_key,json=metadataKey,proto3" json:"metadata_key,omitempty"`
	// *
	// Set a key validation mode.<br/>
	// Any key may be updated by a transaction signed by the token `admin_key`.
	// Each role key may _also_ sign a transaction to update that key.
	// If a role key signs an update to change that role key both old
	// and new key must sign the transaction, _unless_ this field is set
	// to `NO_VALIDATION`, in which case the _new_ key is not required to
	// sign the transaction (the existing key is still required).<br/>
	// The primary intent for this field is to allow a role key (e.g. a
	// `pause_key`) holder to "remove" that key from the token by signing
	// a transaction to set that role key to an empty `KeyList`.
	// <p>
	// If set to `FULL_VALIDATION`, either the `admin_key` or _both_ current
	// and new key MUST sign this transaction to update a "key" field for the
	// identified token.<br/>
	// If set to `NO_VALIDATION`, either the `admin_key` or the current
	// key MUST sign this transaction to update a "key" field for the
	// identified token.<br/>
	// This field SHALL be treated as `FULL_VALIDATION` if not set.
	KeyVerificationMode TokenKeyValidation `protobuf:"varint,18,opt,name=key_verification_mode,json=keyVerificationMode,proto3,enum=proto.TokenKeyValidation" json:"key_verification_mode,omitempty"`
}

func (x *TokenUpdateTransactionBody) Reset() {
	*x = TokenUpdateTransactionBody{}
	mi := &file_token_update_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenUpdateTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUpdateTransactionBody) ProtoMessage() {}

func (x *TokenUpdateTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_token_update_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUpdateTransactionBody.ProtoReflect.Descriptor instead.
func (*TokenUpdateTransactionBody) Descriptor() ([]byte, []int) {
	return file_token_update_proto_rawDescGZIP(), []int{0}
}

func (x *TokenUpdateTransactionBody) GetToken() *TokenID {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenUpdateTransactionBody) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TokenUpdateTransactionBody) GetTreasury() *AccountID {
	if x != nil {
		return x.Treasury
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetAdminKey() *Key {
	if x != nil {
		return x.AdminKey
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetKycKey() *Key {
	if x != nil {
		return x.KycKey
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetFreezeKey() *Key {
	if x != nil {
		return x.FreezeKey
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetWipeKey() *Key {
	if x != nil {
		return x.WipeKey
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetSupplyKey() *Key {
	if x != nil {
		return x.SupplyKey
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetAutoRenewAccount() *AccountID {
	if x != nil {
		return x.AutoRenewAccount
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetAutoRenewPeriod() *Duration {
	if x != nil {
		return x.AutoRenewPeriod
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetExpiry() *Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetMemo() *wrapperspb.StringValue {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetFeeScheduleKey() *Key {
	if x != nil {
		return x.FeeScheduleKey
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetPauseKey() *Key {
	if x != nil {
		return x.PauseKey
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetMetadata() *wrapperspb.BytesValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetMetadataKey() *Key {
	if x != nil {
		return x.MetadataKey
	}
	return nil
}

func (x *TokenUpdateTransactionBody) GetKeyVerificationMode() TokenKeyValidation {
	if x != nil {
		return x.KeyVerificationMode
	}
	return TokenKeyValidation_FULL_VALIDATION
}

var File_token_update_proto protoreflect.FileDescriptor

var file_token_update_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcd, 0x06, 0x0a, 0x1a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x24,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x12, 0x26,
	0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x6b, 0x79, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b,
	0x65, 0x79, 0x52, 0x06, 0x6b, 0x79, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x07, 0x77, 0x69, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x07, 0x77, 0x69, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x28, 0x0a,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x34, 0x0a, 0x10, 0x66, 0x65, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52,
	0x0e, 0x66, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x27, 0x0a, 0x09, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x08,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2d, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x12, 0x4d, 0x0a, 0x15, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6b, 0x65, 0x79, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73,
	0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_token_update_proto_rawDescOnce sync.Once
	file_token_update_proto_rawDescData = file_token_update_proto_rawDesc
)

func file_token_update_proto_rawDescGZIP() []byte {
	file_token_update_proto_rawDescOnce.Do(func() {
		file_token_update_proto_rawDescData = protoimpl.X.CompressGZIP(file_token_update_proto_rawDescData)
	})
	return file_token_update_proto_rawDescData
}

var file_token_update_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_token_update_proto_goTypes = []any{
	(*TokenUpdateTransactionBody)(nil), // 0: proto.TokenUpdateTransactionBody
	(*TokenID)(nil),                    // 1: proto.TokenID
	(*AccountID)(nil),                  // 2: proto.AccountID
	(*Key)(nil),                        // 3: proto.Key
	(*Duration)(nil),                   // 4: proto.Duration
	(*Timestamp)(nil),                  // 5: proto.Timestamp
	(*wrapperspb.StringValue)(nil),     // 6: google.protobuf.StringValue
	(*wrapperspb.BytesValue)(nil),      // 7: google.protobuf.BytesValue
	(TokenKeyValidation)(0),            // 8: proto.TokenKeyValidation
}
var file_token_update_proto_depIdxs = []int32{
	1,  // 0: proto.TokenUpdateTransactionBody.token:type_name -> proto.TokenID
	2,  // 1: proto.TokenUpdateTransactionBody.treasury:type_name -> proto.AccountID
	3,  // 2: proto.TokenUpdateTransactionBody.adminKey:type_name -> proto.Key
	3,  // 3: proto.TokenUpdateTransactionBody.kycKey:type_name -> proto.Key
	3,  // 4: proto.TokenUpdateTransactionBody.freezeKey:type_name -> proto.Key
	3,  // 5: proto.TokenUpdateTransactionBody.wipeKey:type_name -> proto.Key
	3,  // 6: proto.TokenUpdateTransactionBody.supplyKey:type_name -> proto.Key
	2,  // 7: proto.TokenUpdateTransactionBody.autoRenewAccount:type_name -> proto.AccountID
	4,  // 8: proto.TokenUpdateTransactionBody.autoRenewPeriod:type_name -> proto.Duration
	5,  // 9: proto.TokenUpdateTransactionBody.expiry:type_name -> proto.Timestamp
	6,  // 10: proto.TokenUpdateTransactionBody.memo:type_name -> google.protobuf.StringValue
	3,  // 11: proto.TokenUpdateTransactionBody.fee_schedule_key:type_name -> proto.Key
	3,  // 12: proto.TokenUpdateTransactionBody.pause_key:type_name -> proto.Key
	7,  // 13: proto.TokenUpdateTransactionBody.metadata:type_name -> google.protobuf.BytesValue
	3,  // 14: proto.TokenUpdateTransactionBody.metadata_key:type_name -> proto.Key
	8,  // 15: proto.TokenUpdateTransactionBody.key_verification_mode:type_name -> proto.TokenKeyValidation
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_token_update_proto_init() }
func file_token_update_proto_init() {
	if File_token_update_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_duration_proto_init()
	file_timestamp_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_token_update_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_token_update_proto_goTypes,
		DependencyIndexes: file_token_update_proto_depIdxs,
		MessageInfos:      file_token_update_proto_msgTypes,
	}.Build()
	File_token_update_proto = out.File
	file_token_update_proto_rawDesc = nil
	file_token_update_proto_goTypes = nil
	file_token_update_proto_depIdxs = nil
}
