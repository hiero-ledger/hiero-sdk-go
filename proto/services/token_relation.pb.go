//*
// # Token Relationship.
// This is a connection between one Account, one _fungible_ Token, and
// associated balance within the Hedera network.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119)
// and clarified in [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: token_relation.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// An Hedera Token Service token relationship.
//
// A token relationship connects an Account with a Token and is necessary for
// that Account to transact in that Token. TokenRelationship defines a
// connection between one account and one token type.
//
// A TokenRelation SHALL be identified by the combination of token_id and
// account_id.<br/>
// A TokenRelation SHALL contain, for the referenced token,<br/>
// The account's current balance, whether the account has KYC granted,
// and whether the assets are frozen.
//
// TokenRelation entries SHALL be connected via a "virtual linked list" with the
// next TokenID and previous TokenID stored in the TokenRelation.
// These TokenIDs MUST be combined with the AccountID to find the next or
// previous relationship in the list.
type TokenRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A token identifier.
	// <p>
	// This SHALL identify the token involved in this association.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// *
	// An account identifier.
	// <p>
	// This SHALL identify the account involved in this association.
	AccountId *AccountID `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// *
	// The fungible token balance of this token relationship.
	// <p>
	// This MUST be a whole number.
	Balance int64 `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
	// *
	// A flag indicating that this token relationship is frozen.
	// <p>
	// When a token relationship is frozen the associated account SHALL NOT be
	// permitted to transfer to or from the associated balance.
	// <p>
	// This flag is associated with the Token value `freeze_key`, and any
	// transaction to set this flag MUST be signed by that key. If the Token
	// does not have a `freeze_key` set, then this flag SHALL NOT be set true
	// for relationships between accounts and that token.
	Frozen bool `protobuf:"varint,4,opt,name=frozen,proto3" json:"frozen,omitempty"`
	// *
	// A flag indicating that this token relationship has been granted KYC status.
	// <p>
	// If the token flag `accounts_kyc_granted_by_default` is set true, then
	// this flag SHALL be set true for all accounts subsequently associated to
	// that token. Otherwise this flag SHALL NOT be set until a transaction
	// is submitted, and signed with the Token `kyc_key` to
	// set the flag true.<br/>
	// If the Token does not have a `kyc_key` set and the token flag
	// `accounts_kyc_granted_by_default` is not set true, then this value MUST
	// be false for all accounts subsequently associated to that token.
	// <p>
	// Typically a transaction to set this value to true is considered
	// equivalent to asserting that the "Know Your Customer" (KYC) requirements
	// have been met for this combination of account and token and the relevant
	// records are available as required.
	KycGranted bool `protobuf:"varint,5,opt,name=kyc_granted,json=kycGranted,proto3" json:"kyc_granted,omitempty"`
	// *
	// A flag indicating that this token relationship was created using
	// automatic association.
	// <p>
	// If this is true then there MUST NOT exist a customer-signed transaction
	// associating this account and token combination and the account
	// `used_auto_associations` SHALL be incremented when this relationship
	// is created.
	AutomaticAssociation bool `protobuf:"varint,6,opt,name=automatic_association,json=automaticAssociation,proto3" json:"automatic_association,omitempty"`
	// *
	// The Token ID of the previous entry in the associated Account's
	// "virtual double-linked list" of token relationships.
	// <p>
	// This must be combined with the value of `account_id` to identify the
	// actual `TokenRelation` referenced.
	PreviousToken *TokenID `protobuf:"bytes,7,opt,name=previous_token,json=previousToken,proto3" json:"previous_token,omitempty"`
	// *
	// The Token ID of the next entry in the associated Account's "virtual
	// double-linked list" of token relationships.
	// <p>
	// This must be combined with the value of `account_id` to identify the
	// actual `TokenRelation` referenced.
	NextToken *TokenID `protobuf:"bytes,8,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
}

func (x *TokenRelation) Reset() {
	*x = TokenRelation{}
	mi := &file_token_relation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRelation) ProtoMessage() {}

func (x *TokenRelation) ProtoReflect() protoreflect.Message {
	mi := &file_token_relation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRelation.ProtoReflect.Descriptor instead.
func (*TokenRelation) Descriptor() ([]byte, []int) {
	return file_token_relation_proto_rawDescGZIP(), []int{0}
}

func (x *TokenRelation) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *TokenRelation) GetAccountId() *AccountID {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *TokenRelation) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *TokenRelation) GetFrozen() bool {
	if x != nil {
		return x.Frozen
	}
	return false
}

func (x *TokenRelation) GetKycGranted() bool {
	if x != nil {
		return x.KycGranted
	}
	return false
}

func (x *TokenRelation) GetAutomaticAssociation() bool {
	if x != nil {
		return x.AutomaticAssociation
	}
	return false
}

func (x *TokenRelation) GetPreviousToken() *TokenID {
	if x != nil {
		return x.PreviousToken
	}
	return nil
}

func (x *TokenRelation) GetNextToken() *TokenID {
	if x != nil {
		return x.NextToken
	}
	return nil
}

var File_token_relation_proto protoreflect.FileDescriptor

var file_token_relation_proto_rawDesc = []byte{
	0x0a, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd9, 0x02, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x79, 0x63, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6b, 0x79, 0x63, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x0a,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x44, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x26, 0x0a, 0x22,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61,
	0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_token_relation_proto_rawDescOnce sync.Once
	file_token_relation_proto_rawDescData = file_token_relation_proto_rawDesc
)

func file_token_relation_proto_rawDescGZIP() []byte {
	file_token_relation_proto_rawDescOnce.Do(func() {
		file_token_relation_proto_rawDescData = protoimpl.X.CompressGZIP(file_token_relation_proto_rawDescData)
	})
	return file_token_relation_proto_rawDescData
}

var file_token_relation_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_token_relation_proto_goTypes = []any{
	(*TokenRelation)(nil), // 0: proto.TokenRelation
	(*TokenID)(nil),       // 1: proto.TokenID
	(*AccountID)(nil),     // 2: proto.AccountID
}
var file_token_relation_proto_depIdxs = []int32{
	1, // 0: proto.TokenRelation.token_id:type_name -> proto.TokenID
	2, // 1: proto.TokenRelation.account_id:type_name -> proto.AccountID
	1, // 2: proto.TokenRelation.previous_token:type_name -> proto.TokenID
	1, // 3: proto.TokenRelation.next_token:type_name -> proto.TokenID
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_token_relation_proto_init() }
func file_token_relation_proto_init() {
	if File_token_relation_proto != nil {
		return
	}
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_token_relation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_token_relation_proto_goTypes,
		DependencyIndexes: file_token_relation_proto_depIdxs,
		MessageInfos:      file_token_relation_proto_msgTypes,
	}.Build()
	File_token_relation_proto = out.File
	file_token_relation_proto_rawDesc = nil
	file_token_relation_proto_goTypes = nil
	file_token_relation_proto_depIdxs = nil
}
