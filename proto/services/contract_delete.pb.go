//*
// # Contract Delete
// Delete a smart contract, transferring any remaining balance to a
// designated account.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: contract_delete.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Delete a smart contract, and transfer any remaining HBAR balance to a
// designated account.
//
// If this call succeeds then all subsequent calls to that smart contract
// SHALL execute the `0x0` opcode, as required for EVM equivalence.
//
// ### Requirements
//   - An account or smart contract MUST be designated to receive all remaining
//     account balances.
//   - The smart contract MUST have an admin key set. If the contract does not
//     have `admin_key` set, then this transaction SHALL fail and response code
//     `MODIFYING_IMMUTABLE_CONTRACT` SHALL be set.
//   - If `admin_key` is, or contains, an empty `KeyList` key, it SHALL be
//     treated the same as an admin key that is not set.
//   - The `Key` set for `admin_key` on the smart contract MUST have a valid
//     signature set on this transaction.
//   - The designated receiving account MAY have `receiver_sig_required` set. If
//     that field is set, the receiver account MUST also sign this transaction.
//   - The field `permanent_removal` MUST NOT be set. That field is reserved for
//     internal system use when purging the smart contract from state. Any user
//     transaction with that field set SHALL be rejected and a response code
//     `PERMANENT_REMOVAL_REQUIRES_SYSTEM_INITIATION` SHALL be set.
//
// ### Block Stream Effects
// None
type ContractDeleteTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The id of the contract to be deleted.
	// <p>
	// This field is REQUIRED.
	ContractID *ContractID `protobuf:"bytes,1,opt,name=contractID,proto3" json:"contractID,omitempty"`
	// Types that are valid to be assigned to Obtainers:
	//
	//	*ContractDeleteTransactionBody_TransferAccountID
	//	*ContractDeleteTransactionBody_TransferContractID
	Obtainers isContractDeleteTransactionBody_Obtainers `protobuf_oneof:"obtainers"`
	// *
	// A flag indicating that this transaction is "synthetic"; initiated by the
	// node software.
	// <p>
	// The consensus nodes create such "synthetic" transactions to both to
	// properly manage state changes and to communicate those changes to other
	// systems via the Block Stream.<br/>
	// A user-initiated transaction MUST NOT set this flag.
	PermanentRemoval bool `protobuf:"varint,4,opt,name=permanent_removal,json=permanentRemoval,proto3" json:"permanent_removal,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ContractDeleteTransactionBody) Reset() {
	*x = ContractDeleteTransactionBody{}
	mi := &file_contract_delete_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractDeleteTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractDeleteTransactionBody) ProtoMessage() {}

func (x *ContractDeleteTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_contract_delete_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractDeleteTransactionBody.ProtoReflect.Descriptor instead.
func (*ContractDeleteTransactionBody) Descriptor() ([]byte, []int) {
	return file_contract_delete_proto_rawDescGZIP(), []int{0}
}

func (x *ContractDeleteTransactionBody) GetContractID() *ContractID {
	if x != nil {
		return x.ContractID
	}
	return nil
}

func (x *ContractDeleteTransactionBody) GetObtainers() isContractDeleteTransactionBody_Obtainers {
	if x != nil {
		return x.Obtainers
	}
	return nil
}

func (x *ContractDeleteTransactionBody) GetTransferAccountID() *AccountID {
	if x != nil {
		if x, ok := x.Obtainers.(*ContractDeleteTransactionBody_TransferAccountID); ok {
			return x.TransferAccountID
		}
	}
	return nil
}

func (x *ContractDeleteTransactionBody) GetTransferContractID() *ContractID {
	if x != nil {
		if x, ok := x.Obtainers.(*ContractDeleteTransactionBody_TransferContractID); ok {
			return x.TransferContractID
		}
	}
	return nil
}

func (x *ContractDeleteTransactionBody) GetPermanentRemoval() bool {
	if x != nil {
		return x.PermanentRemoval
	}
	return false
}

type isContractDeleteTransactionBody_Obtainers interface {
	isContractDeleteTransactionBody_Obtainers()
}

type ContractDeleteTransactionBody_TransferAccountID struct {
	// *
	// An Account ID recipient.
	// <p>
	// This account SHALL receive all HBAR and other tokens still owned by
	// the contract that is removed.
	TransferAccountID *AccountID `protobuf:"bytes,2,opt,name=transferAccountID,proto3,oneof"`
}

type ContractDeleteTransactionBody_TransferContractID struct {
	// *
	// A contract ID recipient.
	// <p>
	// This contract SHALL receive all HBAR and other tokens still owned by
	// the contract that is removed.
	TransferContractID *ContractID `protobuf:"bytes,3,opt,name=transferContractID,proto3,oneof"`
}

func (*ContractDeleteTransactionBody_TransferAccountID) isContractDeleteTransactionBody_Obtainers() {}

func (*ContractDeleteTransactionBody_TransferContractID) isContractDeleteTransactionBody_Obtainers() {
}

var File_contract_delete_proto protoreflect.FileDescriptor

const file_contract_delete_proto_rawDesc = "" +
	"\n" +
	"\x15contract_delete.proto\x12\x05proto\x1a\x11basic_types.proto\"\x93\x02\n" +
	"\x1dContractDeleteTransactionBody\x121\n" +
	"\n" +
	"contractID\x18\x01 \x01(\v2\x11.proto.ContractIDR\n" +
	"contractID\x12@\n" +
	"\x11transferAccountID\x18\x02 \x01(\v2\x10.proto.AccountIDH\x00R\x11transferAccountID\x12C\n" +
	"\x12transferContractID\x18\x03 \x01(\v2\x11.proto.ContractIDH\x00R\x12transferContractID\x12+\n" +
	"\x11permanent_removal\x18\x04 \x01(\bR\x10permanentRemovalB\v\n" +
	"\tobtainersB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_contract_delete_proto_rawDescOnce sync.Once
	file_contract_delete_proto_rawDescData []byte
)

func file_contract_delete_proto_rawDescGZIP() []byte {
	file_contract_delete_proto_rawDescOnce.Do(func() {
		file_contract_delete_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_contract_delete_proto_rawDesc), len(file_contract_delete_proto_rawDesc)))
	})
	return file_contract_delete_proto_rawDescData
}

var file_contract_delete_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_contract_delete_proto_goTypes = []any{
	(*ContractDeleteTransactionBody)(nil), // 0: proto.ContractDeleteTransactionBody
	(*ContractID)(nil),                    // 1: proto.ContractID
	(*AccountID)(nil),                     // 2: proto.AccountID
}
var file_contract_delete_proto_depIdxs = []int32{
	1, // 0: proto.ContractDeleteTransactionBody.contractID:type_name -> proto.ContractID
	2, // 1: proto.ContractDeleteTransactionBody.transferAccountID:type_name -> proto.AccountID
	1, // 2: proto.ContractDeleteTransactionBody.transferContractID:type_name -> proto.ContractID
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_contract_delete_proto_init() }
func file_contract_delete_proto_init() {
	if File_contract_delete_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_contract_delete_proto_msgTypes[0].OneofWrappers = []any{
		(*ContractDeleteTransactionBody_TransferAccountID)(nil),
		(*ContractDeleteTransactionBody_TransferContractID)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_contract_delete_proto_rawDesc), len(file_contract_delete_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contract_delete_proto_goTypes,
		DependencyIndexes: file_contract_delete_proto_depIdxs,
		MessageInfos:      file_contract_delete_proto_msgTypes,
	}.Build()
	File_contract_delete_proto = out.File
	file_contract_delete_proto_goTypes = nil
	file_contract_delete_proto_depIdxs = nil
}
