//*
// # File Service
// gRPC definitions for the Hedera File Service (HFS).
//
// The HFS manages bulk data in the form of byte arrays of arbitrary
// size, up to a network-configured maximum size. These files are
// most often used to store bulk data for distributed applications
// and smart contracts.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: file_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileService_CreateFile_FullMethodName     = "/proto.FileService/createFile"
	FileService_UpdateFile_FullMethodName     = "/proto.FileService/updateFile"
	FileService_DeleteFile_FullMethodName     = "/proto.FileService/deleteFile"
	FileService_AppendContent_FullMethodName  = "/proto.FileService/appendContent"
	FileService_GetFileContent_FullMethodName = "/proto.FileService/getFileContent"
	FileService_GetFileInfo_FullMethodName    = "/proto.FileService/getFileInfo"
	FileService_SystemDelete_FullMethodName   = "/proto.FileService/systemDelete"
	FileService_SystemUndelete_FullMethodName = "/proto.FileService/systemUndelete"
)

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Service gRPC definitions for the Hedera File Service (HFS).
//
// #### Signature Requirements
// The HFS manages file authorization differently, depending on type of file
// transaction, and this can be surprising.<br/>
// The core element of file authorization is the `keys` field,
// which is a `KeyList`; a list of individual `Key` messages, each of which
// may represent a simple or complex key.<br/>
// The file service transactions treat this list differently.<br/>
// A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
// from _each_ key in the list.<br/>
// A `fileDelete` MUST have a valid signature from _at least one_ key in
// the list. This is different, and allows a file "owned" by many entities
// to be deleted by any one of those entities. A deleted file cannot be
// restored, so it is important to consider this when assigning keys for
// a file.<br/>
// If any of the keys in a `KeyList` are complex, the full requirements of
// each complex key must be met to count as a "valid signature" for that key.
// A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
// including additional `ThresholdKey` or `KeyList` descendants) may be
// assigned as the sole entry in a file `keys` field to ensure all transactions
// have the same signature requirements.
type FileServiceClient interface {
	// *
	// Create a file in HFS.
	CreateFile(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Update a file in HFS.
	UpdateFile(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Delete a file in HFS.<br/>
	// The content of a file deleted in this manner is completely removed
	// from network state, but the file metadata remains.
	DeleteFile(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Append content to a file in HFS.
	AppendContent(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Retrieve the content of a file in HFS.<br/>
	// Note that this query retrieves _only_ the file content, not any of
	// the metadata for the file.
	GetFileContent(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// Retrieve the metadata for a file in HFS.<br/>
	// Note that this query does not retrieve the file _content_.
	GetFileInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// Delete a "regular" file without "owner" authorization.<br/>
	// This transaction _does not_ require signatures for the keys in
	// the file `keys` list, but must be signed by a "privileged" account.
	// <p>
	// This transaction SHALL NOT accept a file identifier for
	// a "system" file.<br/>
	// This transaction SHALL NOT remove the _content_ of the file from state.
	// This permits use of the `systemUndelete` to reverse this action if
	// performed in error.
	// <p>
	// This is a privileged transaction, and only accounts 2-59 are permitted
	// to call this function, by default. The actual restriction is in the
	// `api-permission.properties` file in the consensus node configuration.
	SystemDelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Undelete a "regular" file.
	// This transaction must be signed by a "privileged" account.<br/>
	// <p>
	// This transaction SHALL NOT accept a file identifier for
	// a "system" file.<br/>
	// The file identified SHOULD have been previously deleted.<br/>
	// This transaction SHALL NOT recover the _content_ of a file unless that
	// file was deleted with a `systemDelete` transaction. The _content_ of a
	// file deleted with a `fileDelete` transaction is not retained in state.
	// <p>
	// This is a privileged transaction, and only accounts 2-60 are permitted
	// to call this function, by default. The actual restriction is in the
	// `api-permission.properties` file in the consensus node configuration.
	SystemUndelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) CreateFile(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, FileService_CreateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UpdateFile(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, FileService_UpdateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteFile(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, FileService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) AppendContent(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, FileService_AppendContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileContent(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, FileService_GetFileContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, FileService_GetFileInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) SystemDelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, FileService_SystemDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) SystemUndelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, FileService_SystemUndelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility.
//
// *
// Service gRPC definitions for the Hedera File Service (HFS).
//
// #### Signature Requirements
// The HFS manages file authorization differently, depending on type of file
// transaction, and this can be surprising.<br/>
// The core element of file authorization is the `keys` field,
// which is a `KeyList`; a list of individual `Key` messages, each of which
// may represent a simple or complex key.<br/>
// The file service transactions treat this list differently.<br/>
// A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
// from _each_ key in the list.<br/>
// A `fileDelete` MUST have a valid signature from _at least one_ key in
// the list. This is different, and allows a file "owned" by many entities
// to be deleted by any one of those entities. A deleted file cannot be
// restored, so it is important to consider this when assigning keys for
// a file.<br/>
// If any of the keys in a `KeyList` are complex, the full requirements of
// each complex key must be met to count as a "valid signature" for that key.
// A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
// including additional `ThresholdKey` or `KeyList` descendants) may be
// assigned as the sole entry in a file `keys` field to ensure all transactions
// have the same signature requirements.
type FileServiceServer interface {
	// *
	// Create a file in HFS.
	CreateFile(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Update a file in HFS.
	UpdateFile(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Delete a file in HFS.<br/>
	// The content of a file deleted in this manner is completely removed
	// from network state, but the file metadata remains.
	DeleteFile(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Append content to a file in HFS.
	AppendContent(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Retrieve the content of a file in HFS.<br/>
	// Note that this query retrieves _only_ the file content, not any of
	// the metadata for the file.
	GetFileContent(context.Context, *Query) (*Response, error)
	// *
	// Retrieve the metadata for a file in HFS.<br/>
	// Note that this query does not retrieve the file _content_.
	GetFileInfo(context.Context, *Query) (*Response, error)
	// *
	// Delete a "regular" file without "owner" authorization.<br/>
	// This transaction _does not_ require signatures for the keys in
	// the file `keys` list, but must be signed by a "privileged" account.
	// <p>
	// This transaction SHALL NOT accept a file identifier for
	// a "system" file.<br/>
	// This transaction SHALL NOT remove the _content_ of the file from state.
	// This permits use of the `systemUndelete` to reverse this action if
	// performed in error.
	// <p>
	// This is a privileged transaction, and only accounts 2-59 are permitted
	// to call this function, by default. The actual restriction is in the
	// `api-permission.properties` file in the consensus node configuration.
	SystemDelete(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Undelete a "regular" file.
	// This transaction must be signed by a "privileged" account.<br/>
	// <p>
	// This transaction SHALL NOT accept a file identifier for
	// a "system" file.<br/>
	// The file identified SHOULD have been previously deleted.<br/>
	// This transaction SHALL NOT recover the _content_ of a file unless that
	// file was deleted with a `systemDelete` transaction. The _content_ of a
	// file deleted with a `fileDelete` transaction is not retained in state.
	// <p>
	// This is a privileged transaction, and only accounts 2-60 are permitted
	// to call this function, by default. The actual restriction is in the
	// `api-permission.properties` file in the consensus node configuration.
	SystemUndelete(context.Context, *Transaction) (*TransactionResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServiceServer struct{}

func (UnimplementedFileServiceServer) CreateFile(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedFileServiceServer) UpdateFile(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedFileServiceServer) DeleteFile(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileServiceServer) AppendContent(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendContent not implemented")
}
func (UnimplementedFileServiceServer) GetFileContent(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileContent not implemented")
}
func (UnimplementedFileServiceServer) GetFileInfo(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedFileServiceServer) SystemDelete(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemDelete not implemented")
}
func (UnimplementedFileServiceServer) SystemUndelete(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemUndelete not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}
func (UnimplementedFileServiceServer) testEmbeddedByValue()                     {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateFile(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_UpdateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).UpdateFile(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteFile(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_AppendContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).AppendContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_AppendContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).AppendContent(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetFileContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileContent(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetFileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileInfo(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_SystemDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).SystemDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_SystemDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).SystemDelete(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_SystemUndelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).SystemUndelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_SystemUndelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).SystemUndelete(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createFile",
			Handler:    _FileService_CreateFile_Handler,
		},
		{
			MethodName: "updateFile",
			Handler:    _FileService_UpdateFile_Handler,
		},
		{
			MethodName: "deleteFile",
			Handler:    _FileService_DeleteFile_Handler,
		},
		{
			MethodName: "appendContent",
			Handler:    _FileService_AppendContent_Handler,
		},
		{
			MethodName: "getFileContent",
			Handler:    _FileService_GetFileContent_Handler,
		},
		{
			MethodName: "getFileInfo",
			Handler:    _FileService_GetFileInfo_Handler,
		},
		{
			MethodName: "systemDelete",
			Handler:    _FileService_SystemDelete_Handler,
		},
		{
			MethodName: "systemUndelete",
			Handler:    _FileService_SystemUndelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file_service.proto",
}
