//*
// # Schedule Sign
// Transaction body for a `scheduleSign` transaction to add signatures
// to an existing scheduled transaction.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: schedule_sign.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Add signatures to an existing scheduled transaction.
//
// When a schedule _executes_ successfully, the receipt SHALL include a
// `scheduledTransactionID` with the `TransactionID` of the transaction that
// executed.<br/>
// When a scheduled transaction is executed the network SHALL charge the
// regular _service_ fee for the transaction to the `payerAccountID` for
// that schedule, but SHALL NOT charge node or network fees.<br/>
// If the `payerAccountID` field is not set, the effective `payerAccountID`
// SHALL be the `payer` for this create transaction.<br/>
// Each signature on this transaction SHALL "activate" the corresponding
// cryptographic("primitive") key for the schedule identified.<br/>
// Signature requirements SHALL be met when the set of active keys includes
// all keys required by the scheduled transaction.<br/>
// A scheduled transaction for a "long term" schedule SHALL NOT execute if
// the signature requirements for that transaction are not met when the
// network consensus time reaches the schedule `expiration_time`.<br/>
// A "short term" schedule SHALL execute immediately once signature
// requirements are met. This MAY be immediately when created.<br/>
//
// ### Block Stream Effects
// If the scheduled transaction is executed immediately following this
// `scheduleSign` transaction, the transaction record SHALL include a
// `scheduleRef` with the schedule identifier `scheduleID`.
type ScheduleSignTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A schedule identifier.
	// <p>
	// This MUST identify the schedule to which signatures SHALL be added.
	ScheduleID *ScheduleID `protobuf:"bytes,1,opt,name=scheduleID,proto3" json:"scheduleID,omitempty"`
}

func (x *ScheduleSignTransactionBody) Reset() {
	*x = ScheduleSignTransactionBody{}
	mi := &file_schedule_sign_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleSignTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleSignTransactionBody) ProtoMessage() {}

func (x *ScheduleSignTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_sign_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleSignTransactionBody.ProtoReflect.Descriptor instead.
func (*ScheduleSignTransactionBody) Descriptor() ([]byte, []int) {
	return file_schedule_sign_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduleSignTransactionBody) GetScheduleID() *ScheduleID {
	if x != nil {
		return x.ScheduleID
	}
	return nil
}

var File_schedule_sign_proto protoreflect.FileDescriptor

var file_schedule_sign_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x50, 0x0a, 0x1b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x31,
	0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x44, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68,
	0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_schedule_sign_proto_rawDescOnce sync.Once
	file_schedule_sign_proto_rawDescData = file_schedule_sign_proto_rawDesc
)

func file_schedule_sign_proto_rawDescGZIP() []byte {
	file_schedule_sign_proto_rawDescOnce.Do(func() {
		file_schedule_sign_proto_rawDescData = protoimpl.X.CompressGZIP(file_schedule_sign_proto_rawDescData)
	})
	return file_schedule_sign_proto_rawDescData
}

var file_schedule_sign_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_schedule_sign_proto_goTypes = []any{
	(*ScheduleSignTransactionBody)(nil), // 0: proto.ScheduleSignTransactionBody
	(*ScheduleID)(nil),                  // 1: proto.ScheduleID
}
var file_schedule_sign_proto_depIdxs = []int32{
	1, // 0: proto.ScheduleSignTransactionBody.scheduleID:type_name -> proto.ScheduleID
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_schedule_sign_proto_init() }
func file_schedule_sign_proto_init() {
	if File_schedule_sign_proto != nil {
		return
	}
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schedule_sign_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schedule_sign_proto_goTypes,
		DependencyIndexes: file_schedule_sign_proto_depIdxs,
		MessageInfos:      file_schedule_sign_proto_msgTypes,
	}.Build()
	File_schedule_sign_proto = out.File
	file_schedule_sign_proto_rawDesc = nil
	file_schedule_sign_proto_goTypes = nil
	file_schedule_sign_proto_depIdxs = nil
}
