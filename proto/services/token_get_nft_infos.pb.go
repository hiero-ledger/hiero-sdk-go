//*
// # Token Get NFT Infos
// Deprecated and permanently disabled
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: token_get_nft_infos.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Deleted and unsupported.
//
// This query is not implemented and any query of this type submitted
// SHALL return a `NOT_SUPPORTED` response code.
type TokenGetNftInfosQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Standard information sent with every query operation.<br/>
	// This includes the signed payment and what kind of response is requested
	// (cost, state proof, both, or neither).
	Header *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// A token identifier.
	// <p>
	// This SHALL identify the token to query.<br/>
	// The identified token MUST exist, MUST NOT be deleted, and MUST be
	// a non-fungible/unique type.
	TokenID *TokenID `protobuf:"bytes,2,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	// *
	// Specifies the start index (inclusive) of the range of NFTs to query for.
	// Value must be in the range [0; mintedNFTs-1]
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// *
	// Specifies the end index (exclusive) of the range of NFTs to query for.
	// Value must be in the range (start; mintedNFTs]
	End int64 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *TokenGetNftInfosQuery) Reset() {
	*x = TokenGetNftInfosQuery{}
	mi := &file_token_get_nft_infos_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenGetNftInfosQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenGetNftInfosQuery) ProtoMessage() {}

func (x *TokenGetNftInfosQuery) ProtoReflect() protoreflect.Message {
	mi := &file_token_get_nft_infos_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenGetNftInfosQuery.ProtoReflect.Descriptor instead.
func (*TokenGetNftInfosQuery) Descriptor() ([]byte, []int) {
	return file_token_get_nft_infos_proto_rawDescGZIP(), []int{0}
}

func (x *TokenGetNftInfosQuery) GetHeader() *QueryHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TokenGetNftInfosQuery) GetTokenID() *TokenID {
	if x != nil {
		return x.TokenID
	}
	return nil
}

func (x *TokenGetNftInfosQuery) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TokenGetNftInfosQuery) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

// *
// Deleted and unsupported.
type TokenGetNftInfosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The standard response information for queries.<br/>
	// This includes the values requested in the `QueryHeader`
	// (cost, state proof, both, or neither).
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// A token identifier.
	// <p>
	// This SHALL identify the token type to query.<br/>
	// The identified token MUST exist, and MUST NOT be deleted.
	// The identified token MUST be a non-fungible/unique type.
	TokenID *TokenID `protobuf:"bytes,2,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	// *
	// A list of messages, each of which describes one NFT.
	Nfts []*TokenNftInfo `protobuf:"bytes,3,rep,name=nfts,proto3" json:"nfts,omitempty"`
}

func (x *TokenGetNftInfosResponse) Reset() {
	*x = TokenGetNftInfosResponse{}
	mi := &file_token_get_nft_infos_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenGetNftInfosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenGetNftInfosResponse) ProtoMessage() {}

func (x *TokenGetNftInfosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_token_get_nft_infos_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenGetNftInfosResponse.ProtoReflect.Descriptor instead.
func (*TokenGetNftInfosResponse) Descriptor() ([]byte, []int) {
	return file_token_get_nft_infos_proto_rawDescGZIP(), []int{1}
}

func (x *TokenGetNftInfosResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TokenGetNftInfosResponse) GetTokenID() *TokenID {
	if x != nil {
		return x.TokenID
	}
	return nil
}

func (x *TokenGetNftInfosResponse) GetNfts() []*TokenNftInfo {
	if x != nil {
		return x.Nfts
	}
	return nil
}

var File_token_get_nft_infos_proto protoreflect.FileDescriptor

var file_token_get_nft_infos_proto_rawDesc = []byte{
	0x0a, 0x19, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x66, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x44, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x74, 0x4e,
	0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x66, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6e, 0x66, 0x74,
	0x73, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68,
	0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_token_get_nft_infos_proto_rawDescOnce sync.Once
	file_token_get_nft_infos_proto_rawDescData = file_token_get_nft_infos_proto_rawDesc
)

func file_token_get_nft_infos_proto_rawDescGZIP() []byte {
	file_token_get_nft_infos_proto_rawDescOnce.Do(func() {
		file_token_get_nft_infos_proto_rawDescData = protoimpl.X.CompressGZIP(file_token_get_nft_infos_proto_rawDescData)
	})
	return file_token_get_nft_infos_proto_rawDescData
}

var file_token_get_nft_infos_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_token_get_nft_infos_proto_goTypes = []any{
	(*TokenGetNftInfosQuery)(nil),    // 0: proto.TokenGetNftInfosQuery
	(*TokenGetNftInfosResponse)(nil), // 1: proto.TokenGetNftInfosResponse
	(*QueryHeader)(nil),              // 2: proto.QueryHeader
	(*TokenID)(nil),                  // 3: proto.TokenID
	(*ResponseHeader)(nil),           // 4: proto.ResponseHeader
	(*TokenNftInfo)(nil),             // 5: proto.TokenNftInfo
}
var file_token_get_nft_infos_proto_depIdxs = []int32{
	2, // 0: proto.TokenGetNftInfosQuery.header:type_name -> proto.QueryHeader
	3, // 1: proto.TokenGetNftInfosQuery.tokenID:type_name -> proto.TokenID
	4, // 2: proto.TokenGetNftInfosResponse.header:type_name -> proto.ResponseHeader
	3, // 3: proto.TokenGetNftInfosResponse.tokenID:type_name -> proto.TokenID
	5, // 4: proto.TokenGetNftInfosResponse.nfts:type_name -> proto.TokenNftInfo
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_token_get_nft_infos_proto_init() }
func file_token_get_nft_infos_proto_init() {
	if File_token_get_nft_infos_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_token_get_nft_info_proto_init()
	file_query_header_proto_init()
	file_response_header_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_token_get_nft_infos_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_token_get_nft_infos_proto_goTypes,
		DependencyIndexes: file_token_get_nft_infos_proto_depIdxs,
		MessageInfos:      file_token_get_nft_infos_proto_msgTypes,
	}.Build()
	File_token_get_nft_infos_proto = out.File
	file_token_get_nft_infos_proto_rawDesc = nil
	file_token_get_nft_infos_proto_goTypes = nil
	file_token_get_nft_infos_proto_depIdxs = nil
}
