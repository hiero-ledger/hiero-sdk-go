//*
// # Basic Types
// Fundamental message types used across transactions and state as field types.
//
// ### Requirements for identifier values
// - Most entities in the network SHALL be identified by a multi-part
//   identifier. These identifier values SHALL consist of a shard, a realm, and
//   an entity identifier.
// - Shard, Realm, and Entity Number MUST all be whole numbers.
// - A Shard SHALL be globally unique.
// - A Realm MAY be reused between shards, but SHALL be unique within a shard.
// - An Entity Number MAY be reused between shards and realms, but SHALL be
//   unique within each combination of shard and realm.
// - Every object (e.g. account, file, token, etc...) SHALL be scoped to exactly
//   one realm and shard. Thus a File has a FileID, a numeric triplet, such as
//   0.0.2 for shard 0, realm 0, entity 2.
// - Identifier values SHOULD use an Entity Number as the third component of the
//   identifier. Some, however, MAY use alternative or composite values for the
//   Entity portion of the three part identifier. Any such alternative or
//   composite value MUST be unique within that shard and realm combination.
// - The entity portion of the identifier, regardless of type, MUST be unique
//   within that realm and shard combination and MAY be globally unique.
// - The triplet of shard.realm.entity MUST be globally unique, even across
//   different identifier types.
// - Each realm SHALL maintain a single counter for entity numbers, so if there
//   is an identifier with value 0.1.2, then there MUST NOT be an identifier
//   with value 0.1.2 for any other object.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: basic_types.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A specific hash algorithm.
//
// We did not reuse Record Stream `HashAlgorithm` here because in all cases,
// currently, this will be `SHA2_384` and if that is the default value then
// we can save space by not serializing it, whereas `HASH_ALGORITHM_UNKNOWN`
// is the default for Record Stream `HashAlgorithm`.
//
// Note that enum values here MUST NOT match the name of any other enum value
// in the same `package`, as protobuf follows `C++` scope rules and all enum
// _names_ are treated as global constants within the `package`.
type BlockHashAlgorithm int32

const (
	// *
	// A SHA2 algorithm SHA-384 hash.
	// <p>
	// This is the default value, if a field of this enumerated type is
	// not set, then this is the value that will be decoded when the
	// serialized message is read.
	BlockHashAlgorithm_SHA2_384 BlockHashAlgorithm = 0
)

// Enum value maps for BlockHashAlgorithm.
var (
	BlockHashAlgorithm_name = map[int32]string{
		0: "SHA2_384",
	}
	BlockHashAlgorithm_value = map[string]int32{
		"SHA2_384": 0,
	}
)

func (x BlockHashAlgorithm) Enum() *BlockHashAlgorithm {
	p := new(BlockHashAlgorithm)
	*p = x
	return p
}

func (x BlockHashAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockHashAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_types_proto_enumTypes[0].Descriptor()
}

func (BlockHashAlgorithm) Type() protoreflect.EnumType {
	return &file_basic_types_proto_enumTypes[0]
}

func (x BlockHashAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockHashAlgorithm.Descriptor instead.
func (BlockHashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{0}
}

// *
// Possible Token Types (IWA Compatibility).
//
// Apart from fungible and non-fungible, Tokens can have either a common or
// unique representation. Furthermore, tokens can have intrinsic or referential
// value, and can be whole and indivisible or fractional.<br/>
// These distinction might seem subtle, but it is important when considering
// how tokens can be traced, used, transferred, and if they can have isolated
// unique properties.
//
// A few examples (these may not match enumerations below) using IWA taxonomy.
// <dl>
//
//	<dt>fungible, whole, intrinsic, unique</dt>
//	  <dd>Physical fiat currency</dd>
//	<dt>fungible, fractional, intrinsic, common</dt>
//	  <dd>bank balance fiat currency</dd>
//	<dt>non-fungible, fractional, reference, unique</dt>
//	  <dd>"mutual" collectible/art/property ownership</dd>
//	<dt>non-fungible, whole, intrinsic, unique</dt>
//	  <dd>Physical work of fine art</dd>
//	<dt>non-fungible, whole, reference, unique</dt>
//	  <dd>Registered property title</dd>
//
// </dl>
type TokenType int32

const (
	// *
	// A fungible/common token.<br/>
	// Tokens of this type are interchangeable with one another, where any
	// quantity of tokens has the same value as another equal quantity, if
	// they are in the same class. Tokens share a single set of properties,
	// and are not distinct from one another. Ownership is represented as a
	// balance or quantity associated to a given account. Tokens may be
	// divided into fractional tokens, within reasonable limits.
	// <p>
	// IWA taxonomy _fungible, fractional, intrinsic, common_
	TokenType_FUNGIBLE_COMMON TokenType = 0
	// *
	// A non-fungible/unique token.<br/>
	// Tokens of this type are unique, and are not interchangeable with other
	// tokens of the same type. Each token carries a serial number which is
	// unique for that token, these tokens may have a different trade value
	// for each individual token. The tokens are individually accounted and
	// often carry additional unique properties. Tokens cannot be subdivided,
	// and value is related to what the individual token represents.
	// <p>
	// IWA taxonomy _non-fungible, whole, reference, unique_
	TokenType_NON_FUNGIBLE_UNIQUE TokenType = 1
)

// Enum value maps for TokenType.
var (
	TokenType_name = map[int32]string{
		0: "FUNGIBLE_COMMON",
		1: "NON_FUNGIBLE_UNIQUE",
	}
	TokenType_value = map[string]int32{
		"FUNGIBLE_COMMON":     0,
		"NON_FUNGIBLE_UNIQUE": 1,
	}
)

func (x TokenType) Enum() *TokenType {
	p := new(TokenType)
	*p = x
	return p
}

func (x TokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_types_proto_enumTypes[1].Descriptor()
}

func (TokenType) Type() protoreflect.EnumType {
	return &file_basic_types_proto_enumTypes[1]
}

func (x TokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenType.Descriptor instead.
func (TokenType) EnumDescriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{1}
}

// *
// A transaction sub type.<br/>
// This enumeration enables a set of transaction base fees to be broadly
// defined for a type of operation and also be modified, when necessary,
// based on specifics of the operation.
//
// ### Explanation
// The resource cost for a TokenMint operation is different between minting
// fungible/common and non-fungible/unique tokens. This `enum` is used to
// "mark" a cost as applying to one or the other.<br/>
// Similarly, the resource cost for a basic `tokenCreate` without a custom
// fee schedule may yield a _base_ fee of $1. The resource cost for a
// `tokenCreate` _with_ a custom fee schedule is different and may yield a
// _base_ fee of $2 or more.
type SubType int32

const (
	// *
	// The resource cost for the transaction type has no additional attributes
	SubType_DEFAULT SubType = 0
	// *
	// The resource cost for the transaction type includes an operation on a
	// fungible/common token
	SubType_TOKEN_FUNGIBLE_COMMON SubType = 1
	// *
	// The resource cost for the transaction type includes an operation on
	// a non-fungible/unique token
	SubType_TOKEN_NON_FUNGIBLE_UNIQUE SubType = 2
	// *
	// The resource cost for the transaction type includes an operation on a
	// fungible/common token with a custom fee schedule
	SubType_TOKEN_FUNGIBLE_COMMON_WITH_CUSTOM_FEES SubType = 3
	// *
	// The resource cost for the transaction type includes an operation on a
	// non-fungible/unique token with a custom fee schedule
	SubType_TOKEN_NON_FUNGIBLE_UNIQUE_WITH_CUSTOM_FEES SubType = 4
	// *
	// The resource cost for the transaction type includes a ScheduleCreate
	// containing a ContractCall.
	SubType_SCHEDULE_CREATE_CONTRACT_CALL SubType = 5
	// *
	// The resource cost for the transaction type includes a TopicCreate
	// with custom fees.
	SubType_TOPIC_CREATE_WITH_CUSTOM_FEES SubType = 6
	// *
	// The resource cost for the transaction type includes a ConsensusSubmitMessage
	// for a topic with custom fees.
	SubType_SUBMIT_MESSAGE_WITH_CUSTOM_FEES SubType = 7
)

// Enum value maps for SubType.
var (
	SubType_name = map[int32]string{
		0: "DEFAULT",
		1: "TOKEN_FUNGIBLE_COMMON",
		2: "TOKEN_NON_FUNGIBLE_UNIQUE",
		3: "TOKEN_FUNGIBLE_COMMON_WITH_CUSTOM_FEES",
		4: "TOKEN_NON_FUNGIBLE_UNIQUE_WITH_CUSTOM_FEES",
		5: "SCHEDULE_CREATE_CONTRACT_CALL",
		6: "TOPIC_CREATE_WITH_CUSTOM_FEES",
		7: "SUBMIT_MESSAGE_WITH_CUSTOM_FEES",
	}
	SubType_value = map[string]int32{
		"DEFAULT":                                    0,
		"TOKEN_FUNGIBLE_COMMON":                      1,
		"TOKEN_NON_FUNGIBLE_UNIQUE":                  2,
		"TOKEN_FUNGIBLE_COMMON_WITH_CUSTOM_FEES":     3,
		"TOKEN_NON_FUNGIBLE_UNIQUE_WITH_CUSTOM_FEES": 4,
		"SCHEDULE_CREATE_CONTRACT_CALL":              5,
		"TOPIC_CREATE_WITH_CUSTOM_FEES":              6,
		"SUBMIT_MESSAGE_WITH_CUSTOM_FEES":            7,
	}
)

func (x SubType) Enum() *SubType {
	p := new(SubType)
	*p = x
	return p
}

func (x SubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubType) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_types_proto_enumTypes[2].Descriptor()
}

func (SubType) Type() protoreflect.EnumType {
	return &file_basic_types_proto_enumTypes[2]
}

func (x SubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubType.Descriptor instead.
func (SubType) EnumDescriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{2}
}

// *
// Possible Token Supply Types (IWA Compatibility).
//
// This `enum` indicates the limit of tokens that can exist during the
// lifetime of a token definition. The "infinite" supply is only theoretically
// infinite, as it is still limited to the magnitude of a 64-bit signed
// integer. A "finite" supply is further limited to a value specified when
// the token is created (or updated, if not immutable).
type TokenSupplyType int32

const (
	// *
	// An unlimited supply.<br/>
	// This indicates that tokens of this type have an upper bound of
	// Long.MAX_VALUE.<br/>
	// The supply is accounted in the smallest units of the token
	// (i.e. 10<sup>-`decimals`</sup> whole tokens)
	TokenSupplyType_INFINITE TokenSupplyType = 0
	// *
	// A limited supply.<br/>
	// This indicates that tokens of this type have an upper bound of
	// `maxSupply`.<br/>
	// The maximum supply SHALL be provided on token creation, but MAY be
	// changed thereafter if the token has an `admin_key` set.
	TokenSupplyType_FINITE TokenSupplyType = 1
)

// Enum value maps for TokenSupplyType.
var (
	TokenSupplyType_name = map[int32]string{
		0: "INFINITE",
		1: "FINITE",
	}
	TokenSupplyType_value = map[string]int32{
		"INFINITE": 0,
		"FINITE":   1,
	}
)

func (x TokenSupplyType) Enum() *TokenSupplyType {
	p := new(TokenSupplyType)
	*p = x
	return p
}

func (x TokenSupplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenSupplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_types_proto_enumTypes[3].Descriptor()
}

func (TokenSupplyType) Type() protoreflect.EnumType {
	return &file_basic_types_proto_enumTypes[3]
}

func (x TokenSupplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenSupplyType.Descriptor instead.
func (TokenSupplyType) EnumDescriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{3}
}

// *
// Types of validation strategies for token keys.
type TokenKeyValidation int32

const (
	// *
	// Perform all token key validations.<br/>
	// This is the default value and behavior.
	TokenKeyValidation_FULL_VALIDATION TokenKeyValidation = 0
	// *
	// Perform no validations at all for all passed token keys.
	TokenKeyValidation_NO_VALIDATION TokenKeyValidation = 1
)

// Enum value maps for TokenKeyValidation.
var (
	TokenKeyValidation_name = map[int32]string{
		0: "FULL_VALIDATION",
		1: "NO_VALIDATION",
	}
	TokenKeyValidation_value = map[string]int32{
		"FULL_VALIDATION": 0,
		"NO_VALIDATION":   1,
	}
)

func (x TokenKeyValidation) Enum() *TokenKeyValidation {
	p := new(TokenKeyValidation)
	*p = x
	return p
}

func (x TokenKeyValidation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenKeyValidation) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_types_proto_enumTypes[4].Descriptor()
}

func (TokenKeyValidation) Type() protoreflect.EnumType {
	return &file_basic_types_proto_enumTypes[4]
}

func (x TokenKeyValidation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenKeyValidation.Descriptor instead.
func (TokenKeyValidation) EnumDescriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{4}
}

// *
// Possible token freeze status values.
//
// This is returned by `TokenGetInfoQuery` or `CryptoGetInfoResponse`
// in `TokenRelationship`.
type TokenFreezeStatus int32

const (
	// *
	// The token does not support freeze or cannot be frozen for the designated
	// account.<br/>
	// Typically this indicates that the token does not have a `freeze_key` set.
	TokenFreezeStatus_FreezeNotApplicable TokenFreezeStatus = 0
	// *
	// The token is currently frozen for the designated account.
	TokenFreezeStatus_Frozen TokenFreezeStatus = 1
	// *
	// The token is not currently frozen for the designated account.
	TokenFreezeStatus_Unfrozen TokenFreezeStatus = 2
)

// Enum value maps for TokenFreezeStatus.
var (
	TokenFreezeStatus_name = map[int32]string{
		0: "FreezeNotApplicable",
		1: "Frozen",
		2: "Unfrozen",
	}
	TokenFreezeStatus_value = map[string]int32{
		"FreezeNotApplicable": 0,
		"Frozen":              1,
		"Unfrozen":            2,
	}
)

func (x TokenFreezeStatus) Enum() *TokenFreezeStatus {
	p := new(TokenFreezeStatus)
	*p = x
	return p
}

func (x TokenFreezeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenFreezeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_types_proto_enumTypes[5].Descriptor()
}

func (TokenFreezeStatus) Type() protoreflect.EnumType {
	return &file_basic_types_proto_enumTypes[5]
}

func (x TokenFreezeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenFreezeStatus.Descriptor instead.
func (TokenFreezeStatus) EnumDescriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{5}
}

// *
// Possible token "KYC" status values.
//
// This is returned by `TokenGetInfoQuery` or `CryptoGetInfoResponse`
// in `TokenRelationship`.
type TokenKycStatus int32

const (
	// *
	// The token does not support KYC or cannot grant KYC for the
	// designated account.<br/>
	// Typically this indicates that the token does not have a `kyc_key` set.
	TokenKycStatus_KycNotApplicable TokenKycStatus = 0
	// *
	// The designated account is currently granted KYC status for the
	// designated token.
	TokenKycStatus_Granted TokenKycStatus = 1
	// *
	// The designated account is not currently granted KYC status for the
	// designated token.
	TokenKycStatus_Revoked TokenKycStatus = 2
)

// Enum value maps for TokenKycStatus.
var (
	TokenKycStatus_name = map[int32]string{
		0: "KycNotApplicable",
		1: "Granted",
		2: "Revoked",
	}
	TokenKycStatus_value = map[string]int32{
		"KycNotApplicable": 0,
		"Granted":          1,
		"Revoked":          2,
	}
)

func (x TokenKycStatus) Enum() *TokenKycStatus {
	p := new(TokenKycStatus)
	*p = x
	return p
}

func (x TokenKycStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenKycStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_types_proto_enumTypes[6].Descriptor()
}

func (TokenKycStatus) Type() protoreflect.EnumType {
	return &file_basic_types_proto_enumTypes[6]
}

func (x TokenKycStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenKycStatus.Descriptor instead.
func (TokenKycStatus) EnumDescriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{6}
}

// *
// Possible Pause status values.
//
// This is returned by `TokenGetInfoQuery` in `TokenRelationship`.
type TokenPauseStatus int32

const (
	// *
	// The token does not support pause or cannot be paused.<br/>
	// Typically this indicates that the token does not have a `pause_key` set.
	TokenPauseStatus_PauseNotApplicable TokenPauseStatus = 0
	// *
	// The token is currently paused.
	TokenPauseStatus_Paused TokenPauseStatus = 1
	// *
	// The token is not currently paused.
	TokenPauseStatus_Unpaused TokenPauseStatus = 2
)

// Enum value maps for TokenPauseStatus.
var (
	TokenPauseStatus_name = map[int32]string{
		0: "PauseNotApplicable",
		1: "Paused",
		2: "Unpaused",
	}
	TokenPauseStatus_value = map[string]int32{
		"PauseNotApplicable": 0,
		"Paused":             1,
		"Unpaused":           2,
	}
)

func (x TokenPauseStatus) Enum() *TokenPauseStatus {
	p := new(TokenPauseStatus)
	*p = x
	return p
}

func (x TokenPauseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenPauseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_types_proto_enumTypes[7].Descriptor()
}

func (TokenPauseStatus) Type() protoreflect.EnumType {
	return &file_basic_types_proto_enumTypes[7]
}

func (x TokenPauseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenPauseStatus.Descriptor instead.
func (TokenPauseStatus) EnumDescriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{7}
}

// *
// The transactions and queries supported by Hedera Hashgraph.
type HederaFunctionality int32

const (
	// *
	// Unused - The first value is unused because this default value is
	// ambiguous with an "unset" value and therefore should not be used.
	HederaFunctionality_NONE HederaFunctionality = 0
	// *
	// Transfer tokens among accounts.
	HederaFunctionality_CryptoTransfer HederaFunctionality = 1
	// *
	// Update an account.
	HederaFunctionality_CryptoUpdate HederaFunctionality = 2
	// *
	// Delete an account.
	HederaFunctionality_CryptoDelete HederaFunctionality = 3
	// *
	// Add a livehash to an account
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	HederaFunctionality_CryptoAddLiveHash HederaFunctionality = 4
	// *
	// Delete a livehash from an account
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	HederaFunctionality_CryptoDeleteLiveHash HederaFunctionality = 5
	// *
	// Execute a smart contract call.
	HederaFunctionality_ContractCall HederaFunctionality = 6
	// *
	// Create a smart contract.
	HederaFunctionality_ContractCreate HederaFunctionality = 7
	// *
	// Update a smart contract.
	HederaFunctionality_ContractUpdate HederaFunctionality = 8
	// *
	// Create a "file" stored in the ledger.
	HederaFunctionality_FileCreate HederaFunctionality = 9
	// *
	// Append data to a "file" stored in the ledger.
	HederaFunctionality_FileAppend HederaFunctionality = 10
	// *
	// Update a "file" stored in the ledger.
	HederaFunctionality_FileUpdate HederaFunctionality = 11
	// *
	// Delete a "file" stored in the ledger.
	HederaFunctionality_FileDelete HederaFunctionality = 12
	// *
	// Get the balance for an account.
	HederaFunctionality_CryptoGetAccountBalance HederaFunctionality = 13
	// *
	// Get a full account record.
	HederaFunctionality_CryptoGetAccountRecords HederaFunctionality = 14
	// *
	// Get information about a token.
	HederaFunctionality_CryptoGetInfo HederaFunctionality = 15
	// *
	// Execute a local smart contract call.<br/>
	// Used by contracts to call other contracts.
	HederaFunctionality_ContractCallLocal HederaFunctionality = 16
	// *
	// Get information about a smart contract.
	HederaFunctionality_ContractGetInfo HederaFunctionality = 17
	// *
	// Get the compiled bytecode that implements a smart contract.
	HederaFunctionality_ContractGetBytecode HederaFunctionality = 18
	// *
	// Get a smart contract record by reference to the solidity ID.
	HederaFunctionality_GetBySolidityID HederaFunctionality = 19
	// *
	// Get a smart contract by reference to the contract key.
	HederaFunctionality_GetByKey HederaFunctionality = 20
	// *
	// Get the live hash for an account
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	HederaFunctionality_CryptoGetLiveHash HederaFunctionality = 21
	// *
	// Get the accounts proxy staking to a given account.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	HederaFunctionality_CryptoGetStakers HederaFunctionality = 22
	// *
	// Get the contents of a "file" stored in the ledger.
	HederaFunctionality_FileGetContents HederaFunctionality = 23
	// *
	// Get the metadata for a "file" stored in the ledger.
	HederaFunctionality_FileGetInfo HederaFunctionality = 24
	// *
	// Get transaction record(s) for a specified transaction ID.
	HederaFunctionality_TransactionGetRecord HederaFunctionality = 25
	// *
	// Get all transaction records for a specified contract ID in
	// the past 24 hours.<br/>
	// deprecated since version 0.9.0
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	HederaFunctionality_ContractGetRecords HederaFunctionality = 26
	// *
	// Create a new account
	HederaFunctionality_CryptoCreate HederaFunctionality = 27
	// *
	// Delete a "system" "file" stored in the ledger.<br/>
	// "System" files are files with special purpose and ID values within a
	// specific range.<br/>
	// These files require additional controls and can only be deleted when
	// authorized by accounts with elevated privilege.
	HederaFunctionality_SystemDelete HederaFunctionality = 28
	// *
	// Undo the delete of a "system" "file" stored in the ledger.<br/>
	// "System" files are files with special purpose and ID values within a
	// specific range.<br/>
	// These files require additional controls and can only be deleted when
	// authorized by accounts with elevated privilege. This operation allows
	// such files to be restored, within a reasonable timeframe, if
	// deleted improperly.
	HederaFunctionality_SystemUndelete HederaFunctionality = 29
	// *
	// Delete a smart contract
	HederaFunctionality_ContractDelete HederaFunctionality = 30
	// *
	// Stop all processing and "freeze" the entire network.<br/>
	// This is generally sent immediately prior to upgrading the network.<br/>
	// After processing this transactions all nodes enter a quiescent state.
	HederaFunctionality_Freeze HederaFunctionality = 31
	// *
	// Create a Transaction Record.<br/>
	// This appears to be purely internal and unused.
	HederaFunctionality_CreateTransactionRecord HederaFunctionality = 32
	// *
	// Auto-renew an account.<br/>
	// This is used for internal fee calculations.
	HederaFunctionality_CryptoAccountAutoRenew HederaFunctionality = 33
	// *
	// Auto-renew a smart contract.<br/>
	// This is used for internal fee calculations.
	HederaFunctionality_ContractAutoRenew HederaFunctionality = 34
	// *
	// Get version information for the ledger.<br/>
	// This returns a the version of the software currently running the network
	// for both the protocol buffers and the network services (node).
	HederaFunctionality_GetVersionInfo HederaFunctionality = 35
	// *
	// Get a receipt for a specified transaction ID.
	HederaFunctionality_TransactionGetReceipt HederaFunctionality = 36
	// *
	// Create a topic for the Hedera Consensus Service (HCS).
	HederaFunctionality_ConsensusCreateTopic HederaFunctionality = 50
	// *
	// Update an HCS topic.
	HederaFunctionality_ConsensusUpdateTopic HederaFunctionality = 51
	// *
	// Delete an HCS topic.
	HederaFunctionality_ConsensusDeleteTopic HederaFunctionality = 52
	// *
	// Get metadata (information) for an HCS topic.
	HederaFunctionality_ConsensusGetTopicInfo HederaFunctionality = 53
	// *
	// Publish a message to an HCS topic.
	HederaFunctionality_ConsensusSubmitMessage HederaFunctionality = 54
	// *
	// Submit a transaction, bypassing intake checking.
	// Only enabled in local-mode.
	HederaFunctionality_UncheckedSubmit HederaFunctionality = 55
	// *
	// Create a token for the Hedera Token Service (HTS).
	HederaFunctionality_TokenCreate HederaFunctionality = 56
	// *
	// Get metadata (information) for an HTS token.
	HederaFunctionality_TokenGetInfo HederaFunctionality = 58
	// *
	// Freeze a specific account with respect to a specific HTS token.
	// <p>
	// Once this transaction completes that account CANNOT send or receive
	// the specified token.
	HederaFunctionality_TokenFreezeAccount HederaFunctionality = 59
	// *
	// Remove a "freeze" from an account with respect to a specific HTS token.
	HederaFunctionality_TokenUnfreezeAccount HederaFunctionality = 60
	// *
	// Grant KYC status to an account for a specific HTS token.
	HederaFunctionality_TokenGrantKycToAccount HederaFunctionality = 61
	// *
	// Revoke KYC status from an account for a specific HTS token.
	HederaFunctionality_TokenRevokeKycFromAccount HederaFunctionality = 62
	// *
	// Delete a specific HTS token.
	HederaFunctionality_TokenDelete HederaFunctionality = 63
	// *
	// Update a specific HTS token.
	HederaFunctionality_TokenUpdate HederaFunctionality = 64
	// *
	// Mint HTS token amounts to the treasury account for that token.
	HederaFunctionality_TokenMint HederaFunctionality = 65
	// *
	// Burn HTS token amounts from the treasury account for that token.
	HederaFunctionality_TokenBurn HederaFunctionality = 66
	// *
	// Wipe all amounts for a specific HTS token from a specified account.
	HederaFunctionality_TokenAccountWipe HederaFunctionality = 67
	// *
	// Associate a specific HTS token to an account.
	HederaFunctionality_TokenAssociateToAccount HederaFunctionality = 68
	// *
	// Dissociate a specific HTS token from an account.
	HederaFunctionality_TokenDissociateFromAccount HederaFunctionality = 69
	// *
	// Create a scheduled transaction
	HederaFunctionality_ScheduleCreate HederaFunctionality = 70
	// *
	// Delete a scheduled transaction
	HederaFunctionality_ScheduleDelete HederaFunctionality = 71
	// *
	// Sign a scheduled transaction
	HederaFunctionality_ScheduleSign HederaFunctionality = 72
	// *
	// Get metadata (information) for a scheduled transaction
	HederaFunctionality_ScheduleGetInfo HederaFunctionality = 73
	// *
	// Get NFT metadata (information) for a range of NFTs associated to a
	// specific non-fungible/unique HTS token and owned by a specific account.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	HederaFunctionality_TokenGetAccountNftInfos HederaFunctionality = 74
	// *
	// Get metadata (information) for a specific NFT identified by token and
	// serial number.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	HederaFunctionality_TokenGetNftInfo HederaFunctionality = 75
	// *
	// Get NFT metadata (information) for a range of NFTs associated to a
	// specific non-fungible/unique HTS token.
	HederaFunctionality_TokenGetNftInfos HederaFunctionality = 76
	// *
	// Update a token's custom fee schedule.
	// <p>
	// If a transaction of this type is not signed by the token
	// `fee_schedule_key` it SHALL fail with INVALID_SIGNATURE, or
	// TOKEN_HAS_NO_FEE_SCHEDULE_KEY if there is no `fee_schedule_key` set.
	HederaFunctionality_TokenFeeScheduleUpdate HederaFunctionality = 77
	// *
	// Get execution time(s) for one or more "recent" TransactionIDs.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	HederaFunctionality_NetworkGetExecutionTime HederaFunctionality = 78
	// *
	// Pause a specific HTS token
	HederaFunctionality_TokenPause HederaFunctionality = 79
	// *
	// Unpause a paused HTS token.
	HederaFunctionality_TokenUnpause HederaFunctionality = 80
	// *
	// Approve an allowance for a spender relative to the owner account, which
	// MUST sign the transaction.
	HederaFunctionality_CryptoApproveAllowance HederaFunctionality = 81
	// *
	// Delete (unapprove) an allowance previously approved
	// for the owner account.
	HederaFunctionality_CryptoDeleteAllowance HederaFunctionality = 82
	// *
	// Get all the information about an account, including balance
	// and allowances.<br/>
	// This does not get a list of account records.
	HederaFunctionality_GetAccountDetails HederaFunctionality = 83
	// *
	// Perform an Ethereum (EVM) transaction.<br/>
	// CallData may be inline if small, or in a "file" if large.
	HederaFunctionality_EthereumTransaction HederaFunctionality = 84
	// *
	// Used to indicate when the network has updated the staking information
	// at the end of a staking period and to indicate a new staking period
	// has started.
	HederaFunctionality_NodeStakeUpdate HederaFunctionality = 85
	// *
	// Generate and return a pseudorandom number based on network state.
	HederaFunctionality_UtilPrng HederaFunctionality = 86
	// *
	// Get a record for a "recent" transaction.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	HederaFunctionality_TransactionGetFastRecord HederaFunctionality = 87
	// *
	// Update the metadata of one or more NFT's of a specific token type.
	HederaFunctionality_TokenUpdateNfts HederaFunctionality = 88
	// *
	// Create a node
	HederaFunctionality_NodeCreate HederaFunctionality = 89
	// *
	// Update a node
	HederaFunctionality_NodeUpdate HederaFunctionality = 90
	// *
	// Delete a node
	HederaFunctionality_NodeDelete HederaFunctionality = 91
	// *
	// Transfer one or more token balances held by the requesting account
	// to the treasury for each token type.
	HederaFunctionality_TokenReject HederaFunctionality = 92
	// *
	// Airdrop one or more tokens to one or more accounts.
	HederaFunctionality_TokenAirdrop HederaFunctionality = 93
	// *
	// Remove one or more pending airdrops from state on behalf of
	// the sender(s) for each airdrop.
	HederaFunctionality_TokenCancelAirdrop HederaFunctionality = 94
	// *
	// Claim one or more pending airdrops
	HederaFunctionality_TokenClaimAirdrop HederaFunctionality = 95
	// *
	// Submit a signature of a state root hash gossiped to other nodes
	HederaFunctionality_StateSignatureTransaction HederaFunctionality = 100
	// *
	// Publish a hinTS key to the network.
	HederaFunctionality_HintsKeyPublication HederaFunctionality = 101
	// *
	// Vote for a particular preprocessing output of a hinTS construction.
	HederaFunctionality_HintsPreprocessingVote HederaFunctionality = 102
	// *
	// Sign a partial signature for the active hinTS construction.
	HederaFunctionality_HintsPartialSignature HederaFunctionality = 103
	// *
	// Sign a particular history assembly.
	HederaFunctionality_HistoryAssemblySignature HederaFunctionality = 104
	// *
	// Publish a roster history proof key to the network.
	HederaFunctionality_HistoryProofKeyPublication HederaFunctionality = 105
	// *
	// Vote for a particular history proof.
	HederaFunctionality_HistoryProofVote HederaFunctionality = 106
	// *
	// Publish a random CRS to the network.
	HederaFunctionality_CrsPublication HederaFunctionality = 107
	// *
	// Submit a batch of transactions to run atomically
	HederaFunctionality_AtomicBatch HederaFunctionality = 108
)

// Enum value maps for HederaFunctionality.
var (
	HederaFunctionality_name = map[int32]string{
		0:   "NONE",
		1:   "CryptoTransfer",
		2:   "CryptoUpdate",
		3:   "CryptoDelete",
		4:   "CryptoAddLiveHash",
		5:   "CryptoDeleteLiveHash",
		6:   "ContractCall",
		7:   "ContractCreate",
		8:   "ContractUpdate",
		9:   "FileCreate",
		10:  "FileAppend",
		11:  "FileUpdate",
		12:  "FileDelete",
		13:  "CryptoGetAccountBalance",
		14:  "CryptoGetAccountRecords",
		15:  "CryptoGetInfo",
		16:  "ContractCallLocal",
		17:  "ContractGetInfo",
		18:  "ContractGetBytecode",
		19:  "GetBySolidityID",
		20:  "GetByKey",
		21:  "CryptoGetLiveHash",
		22:  "CryptoGetStakers",
		23:  "FileGetContents",
		24:  "FileGetInfo",
		25:  "TransactionGetRecord",
		26:  "ContractGetRecords",
		27:  "CryptoCreate",
		28:  "SystemDelete",
		29:  "SystemUndelete",
		30:  "ContractDelete",
		31:  "Freeze",
		32:  "CreateTransactionRecord",
		33:  "CryptoAccountAutoRenew",
		34:  "ContractAutoRenew",
		35:  "GetVersionInfo",
		36:  "TransactionGetReceipt",
		50:  "ConsensusCreateTopic",
		51:  "ConsensusUpdateTopic",
		52:  "ConsensusDeleteTopic",
		53:  "ConsensusGetTopicInfo",
		54:  "ConsensusSubmitMessage",
		55:  "UncheckedSubmit",
		56:  "TokenCreate",
		58:  "TokenGetInfo",
		59:  "TokenFreezeAccount",
		60:  "TokenUnfreezeAccount",
		61:  "TokenGrantKycToAccount",
		62:  "TokenRevokeKycFromAccount",
		63:  "TokenDelete",
		64:  "TokenUpdate",
		65:  "TokenMint",
		66:  "TokenBurn",
		67:  "TokenAccountWipe",
		68:  "TokenAssociateToAccount",
		69:  "TokenDissociateFromAccount",
		70:  "ScheduleCreate",
		71:  "ScheduleDelete",
		72:  "ScheduleSign",
		73:  "ScheduleGetInfo",
		74:  "TokenGetAccountNftInfos",
		75:  "TokenGetNftInfo",
		76:  "TokenGetNftInfos",
		77:  "TokenFeeScheduleUpdate",
		78:  "NetworkGetExecutionTime",
		79:  "TokenPause",
		80:  "TokenUnpause",
		81:  "CryptoApproveAllowance",
		82:  "CryptoDeleteAllowance",
		83:  "GetAccountDetails",
		84:  "EthereumTransaction",
		85:  "NodeStakeUpdate",
		86:  "UtilPrng",
		87:  "TransactionGetFastRecord",
		88:  "TokenUpdateNfts",
		89:  "NodeCreate",
		90:  "NodeUpdate",
		91:  "NodeDelete",
		92:  "TokenReject",
		93:  "TokenAirdrop",
		94:  "TokenCancelAirdrop",
		95:  "TokenClaimAirdrop",
		100: "StateSignatureTransaction",
		101: "HintsKeyPublication",
		102: "HintsPreprocessingVote",
		103: "HintsPartialSignature",
		104: "HistoryAssemblySignature",
		105: "HistoryProofKeyPublication",
		106: "HistoryProofVote",
		107: "CrsPublication",
		108: "AtomicBatch",
	}
	HederaFunctionality_value = map[string]int32{
		"NONE":                       0,
		"CryptoTransfer":             1,
		"CryptoUpdate":               2,
		"CryptoDelete":               3,
		"CryptoAddLiveHash":          4,
		"CryptoDeleteLiveHash":       5,
		"ContractCall":               6,
		"ContractCreate":             7,
		"ContractUpdate":             8,
		"FileCreate":                 9,
		"FileAppend":                 10,
		"FileUpdate":                 11,
		"FileDelete":                 12,
		"CryptoGetAccountBalance":    13,
		"CryptoGetAccountRecords":    14,
		"CryptoGetInfo":              15,
		"ContractCallLocal":          16,
		"ContractGetInfo":            17,
		"ContractGetBytecode":        18,
		"GetBySolidityID":            19,
		"GetByKey":                   20,
		"CryptoGetLiveHash":          21,
		"CryptoGetStakers":           22,
		"FileGetContents":            23,
		"FileGetInfo":                24,
		"TransactionGetRecord":       25,
		"ContractGetRecords":         26,
		"CryptoCreate":               27,
		"SystemDelete":               28,
		"SystemUndelete":             29,
		"ContractDelete":             30,
		"Freeze":                     31,
		"CreateTransactionRecord":    32,
		"CryptoAccountAutoRenew":     33,
		"ContractAutoRenew":          34,
		"GetVersionInfo":             35,
		"TransactionGetReceipt":      36,
		"ConsensusCreateTopic":       50,
		"ConsensusUpdateTopic":       51,
		"ConsensusDeleteTopic":       52,
		"ConsensusGetTopicInfo":      53,
		"ConsensusSubmitMessage":     54,
		"UncheckedSubmit":            55,
		"TokenCreate":                56,
		"TokenGetInfo":               58,
		"TokenFreezeAccount":         59,
		"TokenUnfreezeAccount":       60,
		"TokenGrantKycToAccount":     61,
		"TokenRevokeKycFromAccount":  62,
		"TokenDelete":                63,
		"TokenUpdate":                64,
		"TokenMint":                  65,
		"TokenBurn":                  66,
		"TokenAccountWipe":           67,
		"TokenAssociateToAccount":    68,
		"TokenDissociateFromAccount": 69,
		"ScheduleCreate":             70,
		"ScheduleDelete":             71,
		"ScheduleSign":               72,
		"ScheduleGetInfo":            73,
		"TokenGetAccountNftInfos":    74,
		"TokenGetNftInfo":            75,
		"TokenGetNftInfos":           76,
		"TokenFeeScheduleUpdate":     77,
		"NetworkGetExecutionTime":    78,
		"TokenPause":                 79,
		"TokenUnpause":               80,
		"CryptoApproveAllowance":     81,
		"CryptoDeleteAllowance":      82,
		"GetAccountDetails":          83,
		"EthereumTransaction":        84,
		"NodeStakeUpdate":            85,
		"UtilPrng":                   86,
		"TransactionGetFastRecord":   87,
		"TokenUpdateNfts":            88,
		"NodeCreate":                 89,
		"NodeUpdate":                 90,
		"NodeDelete":                 91,
		"TokenReject":                92,
		"TokenAirdrop":               93,
		"TokenCancelAirdrop":         94,
		"TokenClaimAirdrop":          95,
		"StateSignatureTransaction":  100,
		"HintsKeyPublication":        101,
		"HintsPreprocessingVote":     102,
		"HintsPartialSignature":      103,
		"HistoryAssemblySignature":   104,
		"HistoryProofKeyPublication": 105,
		"HistoryProofVote":           106,
		"CrsPublication":             107,
		"AtomicBatch":                108,
	}
)

func (x HederaFunctionality) Enum() *HederaFunctionality {
	p := new(HederaFunctionality)
	*p = x
	return p
}

func (x HederaFunctionality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HederaFunctionality) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_types_proto_enumTypes[8].Descriptor()
}

func (HederaFunctionality) Type() protoreflect.EnumType {
	return &file_basic_types_proto_enumTypes[8]
}

func (x HederaFunctionality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HederaFunctionality.Descriptor instead.
func (HederaFunctionality) EnumDescriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{8}
}

// *
// A shard identifier.<br/>
// A shard is a partition of nodes running the network that processes
// transactions separately from other shards. Each shard is effectively an
// independent instance of the overall network that shares the same virtual
// distributed ledger, and may gossip cross-shard transactions with other
// shards to maintain overall correct processing of the ledger.
type ShardID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A whole number shard identifier.
	ShardNum int64 `protobuf:"varint,1,opt,name=shardNum,proto3" json:"shardNum,omitempty"`
}

func (x *ShardID) Reset() {
	*x = ShardID{}
	mi := &file_basic_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardID) ProtoMessage() {}

func (x *ShardID) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardID.ProtoReflect.Descriptor instead.
func (*ShardID) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{0}
}

func (x *ShardID) GetShardNum() int64 {
	if x != nil {
		return x.ShardNum
	}
	return 0
}

// *
// A realm identifier.<br/>
// Within a given shard, every realm has a unique numeric identifier.
// Each account, file, and contract instance belongs to exactly one realm.
type RealmID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A whole number shard identifier.
	ShardNum int64 `protobuf:"varint,1,opt,name=shardNum,proto3" json:"shardNum,omitempty"`
	// *
	// A whole number realm identifier.
	RealmNum int64 `protobuf:"varint,2,opt,name=realmNum,proto3" json:"realmNum,omitempty"`
}

func (x *RealmID) Reset() {
	*x = RealmID{}
	mi := &file_basic_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealmID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealmID) ProtoMessage() {}

func (x *RealmID) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealmID.ProtoReflect.Descriptor instead.
func (*RealmID) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{1}
}

func (x *RealmID) GetShardNum() int64 {
	if x != nil {
		return x.ShardNum
	}
	return 0
}

func (x *RealmID) GetRealmNum() int64 {
	if x != nil {
		return x.RealmNum
	}
	return 0
}

// *
// Unique identifier for a token.<br/>
// As with all entity identifiers within the network, a token identifier
// consists of a combination of shard number, realm number, and entity number.
// Each of these numbers is unique within its scope (shard > realm > entity).
type TokenID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A whole number shard identifier.
	ShardNum int64 `protobuf:"varint,1,opt,name=shardNum,proto3" json:"shardNum,omitempty"`
	// *
	// A whole number realm identifier.
	RealmNum int64 `protobuf:"varint,2,opt,name=realmNum,proto3" json:"realmNum,omitempty"`
	// *
	// A whole number token identifier.
	TokenNum int64 `protobuf:"varint,3,opt,name=tokenNum,proto3" json:"tokenNum,omitempty"`
}

func (x *TokenID) Reset() {
	*x = TokenID{}
	mi := &file_basic_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenID) ProtoMessage() {}

func (x *TokenID) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenID.ProtoReflect.Descriptor instead.
func (*TokenID) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{2}
}

func (x *TokenID) GetShardNum() int64 {
	if x != nil {
		return x.ShardNum
	}
	return 0
}

func (x *TokenID) GetRealmNum() int64 {
	if x != nil {
		return x.RealmNum
	}
	return 0
}

func (x *TokenID) GetTokenNum() int64 {
	if x != nil {
		return x.TokenNum
	}
	return 0
}

// *
// A unique identifier for an Hedera account.
//
// An account identifier is of the form `shard.realm.[number|alias]`.<br/>
// The identifier MAY use the alias form when transferring HBAR to a public key
// before the account for that key is created, when only the alias value is
// known, or in some smart contracts that use the EVM address style alias to
// refer to Accounts.<br/>
// When the account entry is completed, the alias SHALL be stored separately in
// the Account record, and the identifier in the Account SHALL use the
// `accountNum` form.
//
// ---
// ### Additional Notes
//
// #### Alias
// There is considerable complexity with `alias` (aka `evm_address`) for
// Accounts. Much of this comes from the existence of a "hidden" alias for
// almost all accounts, and the reuse of the alias field for both EVM reference
// and "automatic" account creation.<br/>
// For the purposes of this specification, we will use the following terms for
// clarity.
//   - `key_alias`<br/>
//     The account public key as a protobuf serialized message and used for
//     auto-creation and subsequent lookup. This is only valid if the account
//     key is a single `primitive` key, either Ed25519 or ECDSA_SECP256K1.
//   - `evm_address`<br/>
//     Exists for every account and is one of
//   - `contract_address`<br/>
//     The 20 byte EVM address prescribed by `CREATE` or `CREATE2`
//   - `evm_key_address`<br/>
//     An arbitrary 20 byte EVM address that, for a usable externally owned
//     account (EOA) SHALL be the rightmost 20 bytes of the Keccak-256 hash
//     of a ECDSA_SECP256K1 key.<br/>
//     Such accounts may be created in one of three ways:
//   - Sending hbar or fungible tokens to an unused
//     ECDSA_SECP256K1 key alias.
//   - Sending hbar or fungible tokens to an unassigned 20-byte
//     EVM address.
//   - Submitting a `CryptoCreate` signed with the corresponding
//     private key.
//   - `long_zero`<br/>
//     A synthetic 20 byte address inferred for "normally" created accounts.
//     It is constructed from the "standard" AccountID as follows.
//     1. 4 byte big-endian shard number
//     1. 8 byte big-endian realm number
//     1. 8 byte big-endian entity number<br/>
//
// The `alias` field in the `Account` message SHALL contain one of four values
// for any given account.
//   - The `key_alias`, if the account was created by transferring HBAR to the
//     `key_alias` public key value.
//   - The `evm_key_address` if the account was created from an EVM public key
//   - The `contract_address` if the account belongs to an EVM contract
//   - Not-Set/null/Bytes.EMPTY (collectively `null`) if the account was
//     created normally
//
// If the `alias` field of an `Account` is any form of `null`, then the account
// MAY be referred to by `alias` in an `AccountID` by using the `long_zero`
// address for the account.<br/>
// This "hidden default" alias SHALL NOT be stored, but is synthesized by the
// node software as needed, and may be synthesized by an EVM contract or client
// software as well.
//
// ---
//
// #### Alias forms
// An `AccountID` in a transaction MAY reference an `Account` with
// `shard.realm.alias`.<br/>
// If the account `alias` field is set for an Account, that value SHALL be the
// account alias.<br/>
// If the account `alias` field is not set for an Account, the `long_zero` alias
// SHALL be the account alias.
type AccountID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A whole number shard identifier.
	ShardNum int64 `protobuf:"varint,1,opt,name=shardNum,proto3" json:"shardNum,omitempty"`
	// *
	// A whole number realm identifier.
	RealmNum int64 `protobuf:"varint,2,opt,name=realmNum,proto3" json:"realmNum,omitempty"`
	// Types that are assignable to Account:
	//
	//	*AccountID_AccountNum
	//	*AccountID_Alias
	Account isAccountID_Account `protobuf_oneof:"account"`
}

func (x *AccountID) Reset() {
	*x = AccountID{}
	mi := &file_basic_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountID) ProtoMessage() {}

func (x *AccountID) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountID.ProtoReflect.Descriptor instead.
func (*AccountID) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{3}
}

func (x *AccountID) GetShardNum() int64 {
	if x != nil {
		return x.ShardNum
	}
	return 0
}

func (x *AccountID) GetRealmNum() int64 {
	if x != nil {
		return x.RealmNum
	}
	return 0
}

func (m *AccountID) GetAccount() isAccountID_Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (x *AccountID) GetAccountNum() int64 {
	if x, ok := x.GetAccount().(*AccountID_AccountNum); ok {
		return x.AccountNum
	}
	return 0
}

func (x *AccountID) GetAlias() []byte {
	if x, ok := x.GetAccount().(*AccountID_Alias); ok {
		return x.Alias
	}
	return nil
}

type isAccountID_Account interface {
	isAccountID_Account()
}

type AccountID_AccountNum struct {
	// *
	// A whole number account number, unique within its realm and shard.
	// <p>
	// For any AccountID fields in the query response, transaction records,
	// transaction receipts, or block stream `accountNum` MUST be used.
	AccountNum int64 `protobuf:"varint,3,opt,name=accountNum,proto3,oneof"`
}

type AccountID_Alias struct {
	// *
	// An alias value.<br/>
	// Alias is a value used in some contexts to refer to an account when
	// account number is not available, and may be an alias public key, or
	// an EVM address.
	Alias []byte `protobuf:"bytes,4,opt,name=alias,proto3,oneof"`
}

func (*AccountID_AccountNum) isAccountID_Account() {}

func (*AccountID_Alias) isAccountID_Account() {}

// *
// An identifier for a unique token (or "NFT"), used by both contract
// and token services.
type NftID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A token identifier.<br/>
	// This token represents the collection containing this NFT.
	Token_ID *TokenID `protobuf:"bytes,1,opt,name=token_ID,json=tokenID,proto3" json:"token_ID,omitempty"`
	// *
	// A unique serial number.<br/>
	// This serial number is unique within its token type.
	SerialNumber int64 `protobuf:"varint,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *NftID) Reset() {
	*x = NftID{}
	mi := &file_basic_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NftID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftID) ProtoMessage() {}

func (x *NftID) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftID.ProtoReflect.Descriptor instead.
func (*NftID) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{4}
}

func (x *NftID) GetToken_ID() *TokenID {
	if x != nil {
		return x.Token_ID
	}
	return nil
}

func (x *NftID) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

// *
// An identifier for a File within the network.
type FileID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A whole number shard identifier.
	ShardNum int64 `protobuf:"varint,1,opt,name=shardNum,proto3" json:"shardNum,omitempty"`
	// *
	// A whole number realm identifier.
	RealmNum int64 `protobuf:"varint,2,opt,name=realmNum,proto3" json:"realmNum,omitempty"`
	// *
	// A whole number file identifier, unique within its realm and shard.
	FileNum int64 `protobuf:"varint,3,opt,name=fileNum,proto3" json:"fileNum,omitempty"`
}

func (x *FileID) Reset() {
	*x = FileID{}
	mi := &file_basic_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileID) ProtoMessage() {}

func (x *FileID) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileID.ProtoReflect.Descriptor instead.
func (*FileID) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{5}
}

func (x *FileID) GetShardNum() int64 {
	if x != nil {
		return x.ShardNum
	}
	return 0
}

func (x *FileID) GetRealmNum() int64 {
	if x != nil {
		return x.RealmNum
	}
	return 0
}

func (x *FileID) GetFileNum() int64 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

// *
// An identifier for a smart contract within the network.
type ContractID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A whole number shard identifier.
	ShardNum int64 `protobuf:"varint,1,opt,name=shardNum,proto3" json:"shardNum,omitempty"`
	// *
	// A whole number realm identifier.
	RealmNum int64 `protobuf:"varint,2,opt,name=realmNum,proto3" json:"realmNum,omitempty"`
	// Types that are assignable to Contract:
	//
	//	*ContractID_ContractNum
	//	*ContractID_EvmAddress
	Contract isContractID_Contract `protobuf_oneof:"contract"`
}

func (x *ContractID) Reset() {
	*x = ContractID{}
	mi := &file_basic_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractID) ProtoMessage() {}

func (x *ContractID) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractID.ProtoReflect.Descriptor instead.
func (*ContractID) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{6}
}

func (x *ContractID) GetShardNum() int64 {
	if x != nil {
		return x.ShardNum
	}
	return 0
}

func (x *ContractID) GetRealmNum() int64 {
	if x != nil {
		return x.RealmNum
	}
	return 0
}

func (m *ContractID) GetContract() isContractID_Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (x *ContractID) GetContractNum() int64 {
	if x, ok := x.GetContract().(*ContractID_ContractNum); ok {
		return x.ContractNum
	}
	return 0
}

func (x *ContractID) GetEvmAddress() []byte {
	if x, ok := x.GetContract().(*ContractID_EvmAddress); ok {
		return x.EvmAddress
	}
	return nil
}

type isContractID_Contract interface {
	isContractID_Contract()
}

type ContractID_ContractNum struct {
	// *
	// A whole number contract identifier, unique within its realm and shard.
	ContractNum int64 `protobuf:"varint,3,opt,name=contractNum,proto3,oneof"`
}

type ContractID_EvmAddress struct {
	// *
	// A 20-byte EVM address of the contract to call.
	// <p>
	// A contract created via a HAPI `ContractCreate` call SHALL have
	// an EVM address determined by its `shard.realm.num` identifier.<br/>
	// This address is as follows
	// <ol>
	//
	//	<li>4 byte big-endian shard number</li>
	//	<li>8 byte big-endian realm number</li>
	//	<li>8 byte big-endian contract number</li>
	//
	// </ol>
	// This address is not stored in state, but is computed when needed.
	// <p>
	// Contracts created by any other means, including a HAPI
	// `EthereumTransaction` whose `to` address is the zero address,
	// SHALL have the EVM address prescribed by the `CREATE` or
	// `CREATE2` opcode, as applicable.
	EvmAddress []byte `protobuf:"bytes,4,opt,name=evm_address,json=evmAddress,proto3,oneof"`
}

func (*ContractID_ContractNum) isContractID_Contract() {}

func (*ContractID_EvmAddress) isContractID_Contract() {}

// *
// An unique identifier for a topic.<br/>
// Topics are part of the consensus service, messages are published to a topic.
type TopicID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A whole number shard identifier.
	ShardNum int64 `protobuf:"varint,1,opt,name=shardNum,proto3" json:"shardNum,omitempty"`
	// *
	// A whole number realm identifier.
	RealmNum int64 `protobuf:"varint,2,opt,name=realmNum,proto3" json:"realmNum,omitempty"`
	// *
	// A whole number topic identifier, unique within its realm and shard.
	TopicNum int64 `protobuf:"varint,3,opt,name=topicNum,proto3" json:"topicNum,omitempty"`
}

func (x *TopicID) Reset() {
	*x = TopicID{}
	mi := &file_basic_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicID) ProtoMessage() {}

func (x *TopicID) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicID.ProtoReflect.Descriptor instead.
func (*TopicID) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{7}
}

func (x *TopicID) GetShardNum() int64 {
	if x != nil {
		return x.ShardNum
	}
	return 0
}

func (x *TopicID) GetRealmNum() int64 {
	if x != nil {
		return x.RealmNum
	}
	return 0
}

func (x *TopicID) GetTopicNum() int64 {
	if x != nil {
		return x.TopicNum
	}
	return 0
}

// *
// An unique identifier for a Schedule
type ScheduleID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A whole number shard
	ShardNum int64 `protobuf:"varint,1,opt,name=shardNum,proto3" json:"shardNum,omitempty"`
	// *
	// A whole number realm
	RealmNum int64 `protobuf:"varint,2,opt,name=realmNum,proto3" json:"realmNum,omitempty"`
	// *
	// A whole number schedule, unique within its realm and shard
	ScheduleNum int64 `protobuf:"varint,3,opt,name=scheduleNum,proto3" json:"scheduleNum,omitempty"`
}

func (x *ScheduleID) Reset() {
	*x = ScheduleID{}
	mi := &file_basic_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleID) ProtoMessage() {}

func (x *ScheduleID) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleID.ProtoReflect.Descriptor instead.
func (*ScheduleID) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{8}
}

func (x *ScheduleID) GetShardNum() int64 {
	if x != nil {
		return x.ShardNum
	}
	return 0
}

func (x *ScheduleID) GetRealmNum() int64 {
	if x != nil {
		return x.RealmNum
	}
	return 0
}

func (x *ScheduleID) GetScheduleNum() int64 {
	if x != nil {
		return x.ScheduleNum
	}
	return 0
}

// *
// A transaction identifier.<br/>
// This is used for retrieving receipts and records for a transaction
// and internally by the network for detecting when duplicate transactions are
// submitted.
//
// A transaction may be processed more reliably by submitting it to
// several nodes, each with a different node account, but all with the same
// TransactionID. Then, the transaction will take effect when the first of all
// those nodes submits the transaction and it reaches consensus. The other
// transactions SHALL NOT be executed (and SHALL result in a
// `DUPLICATE_TRANSACTION` response).<br/>
// Multiple submission increase reliability on the assumption that an error in,
// for example, network connectivity will not affect all nodes equally. Latency
// might be slightly lower, if one node is handling intake significantly slower
// than others, for example. The base transaction fee is required for each
// submission, however, so the total fees charged are significantly higher when
// using this approach.
//
// ### Requirements
// Each transaction identifier MUST be unique.<br/>
// Multiple transactions MAY be submitted with the same transaction
// identifier, but all except the first SHALL be rejected as duplicate
// transactions.<br/>
// An identifier MUST specify a `payer` account to be charged all fees
// associated with the transaction.<br/>
// The `payer` account MUST exist and MUST have sufficient HBAR to pay all
// transaction fees.<br/>
// An identifier MUST specify a "valid start time".<br/>
// The "valid start time" MUST be strictly _earlier_ than the current
// network consensus time when submitted.<br/>
// The "valid start time" MUST NOT be more than `transaction.maxValidDuration`
// seconds before the current network consensus time when submitted.<br/>
// A client-submitted transaction MUST NOT set the `scheduled` flag.
//
// ### Additional Notes
//
// Additional items applicable to Scheduled Transactions:
//
//   - The ID of a Scheduled Transaction, once executed, SHALL inherit both
//     `transactionValidStart` and `accountID` from the `ScheduleCreate`
//     transaction that created the schedule.
//   - The `scheduled` property SHALL be set for Scheduled Transactions.
type TransactionID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A timestamp for the transaction start time.<br/>
	// This is the earliest expected start time for this transaction.
	// <p>
	// This value MUST be strictly less than `consensusTimestamp` when the
	// transaction is submitted.
	TransactionValidStart *Timestamp `protobuf:"bytes,1,opt,name=transactionValidStart,proto3" json:"transactionValidStart,omitempty"`
	// *
	// An Account identifier.
	// <p>
	// The identified account SHALL pay transaction fees for this transaction.
	AccountID *AccountID `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	// *
	// A scheduled transaction flag.<br/>
	// If set, this transaction represents the execution of a Schedule after
	// all necessary signatures are gathered.
	// <p>
	// This flag MUST NOT be set in a user-submitted transaction.
	Scheduled bool `protobuf:"varint,3,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
	// *
	// An identifier for an internal transaction.<br/>
	// An internal transaction is one that was spawned as part of handling a
	// user transaction. These internal transactions share the
	// transactionValidStart and accountID of the user transaction, so a nonce
	// is necessary to give them a unique TransactionID.
	// <p>
	// An example is when a "parent" ContractCreate or ContractCall transaction
	// calls one or more HTS precompiled contracts; each of the "child"
	// transactions spawned for a precompile has a transaction id with a
	// different nonce.
	// <p>
	// This value MUST be unset for user-submitted transactions.
	Nonce int32 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *TransactionID) Reset() {
	*x = TransactionID{}
	mi := &file_basic_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionID) ProtoMessage() {}

func (x *TransactionID) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionID.ProtoReflect.Descriptor instead.
func (*TransactionID) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{9}
}

func (x *TransactionID) GetTransactionValidStart() *Timestamp {
	if x != nil {
		return x.TransactionValidStart
	}
	return nil
}

func (x *TransactionID) GetAccountID() *AccountID {
	if x != nil {
		return x.AccountID
	}
	return nil
}

func (x *TransactionID) GetScheduled() bool {
	if x != nil {
		return x.Scheduled
	}
	return false
}

func (x *TransactionID) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// *
// An account, and the amount that it sends or receives during a token transfer.
//
// This message is only relevant to fungible/common token transfers.
// Non-fungible/unique (NFT) token transfers MUST use the NftTransfer message.
type AccountAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// An account identifier that will send or receive token(s).
	AccountID *AccountID `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	// *
	// An amount to send (negative) or receive (positive).
	// <p>
	// This amount MUST be denominated in the smallest unit of the relevant
	// token.<br/>
	// For HBAR this SHALL be tinybar (10<sup>-8</sup> HBAR).<br/>
	// For other fungible/common tokens this SHALL depend on the value of
	// `decimals` for that token.
	Amount int64 `protobuf:"zigzag64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// *
	// An approved allowance flag.<br/>
	// If true then the transfer is expected to be an approved allowance.
	// <p>
	// If set, `accountID` SHALL be the owner that previously approved
	// the allowance.<br/>
	// The default value SHALL be false (unset).
	IsApproval bool `protobuf:"varint,3,opt,name=is_approval,json=isApproval,proto3" json:"is_approval,omitempty"`
}

func (x *AccountAmount) Reset() {
	*x = AccountAmount{}
	mi := &file_basic_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAmount) ProtoMessage() {}

func (x *AccountAmount) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAmount.ProtoReflect.Descriptor instead.
func (*AccountAmount) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{10}
}

func (x *AccountAmount) GetAccountID() *AccountID {
	if x != nil {
		return x.AccountID
	}
	return nil
}

func (x *AccountAmount) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AccountAmount) GetIsApproval() bool {
	if x != nil {
		return x.IsApproval
	}
	return false
}

// *
// A list of accounts and amounts to transfer.
//
// Each `AccountAmount` SHALL specify the account and the amount to
// send(negative) or receive(positive).<br/>
// Each `TransferList` SHALL be contained in another message that contains
// other details required to complete a transfer. This is typically a
// `CryptoTransferTransactionBody` or `TransactionRecord`.<br/>
// The `TransferList` SHALL only be used for HBAR transfers. Other token types
// MUST use the `TokenTransferList` message.
type TransferList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A list of AccountAmount pairs.<br/>
	// Each entry in this list is an account and an amount to transfer
	// into it (positive) or out of it (negative)
	AccountAmounts []*AccountAmount `protobuf:"bytes,1,rep,name=accountAmounts,proto3" json:"accountAmounts,omitempty"`
}

func (x *TransferList) Reset() {
	*x = TransferList{}
	mi := &file_basic_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferList) ProtoMessage() {}

func (x *TransferList) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferList.ProtoReflect.Descriptor instead.
func (*TransferList) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{11}
}

func (x *TransferList) GetAccountAmounts() []*AccountAmount {
	if x != nil {
		return x.AccountAmounts
	}
	return nil
}

// *
// A NFT transfer.<br/>
// This refers to a sender account, a receiver account, and the serial number
// of an NFT to transfer from sender to receiver.
//
// Each `NftTransfer` SHALL be contained in another message (typically
// `TokenTransferList`) that details which `Token` type applies to this NFT
// transfer.
type NftTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// An Account identifier for the sender.
	SenderAccountID *AccountID `protobuf:"bytes,1,opt,name=senderAccountID,proto3" json:"senderAccountID,omitempty"`
	// *
	// An Account identifier for the receiver.
	ReceiverAccountID *AccountID `protobuf:"bytes,2,opt,name=receiverAccountID,proto3" json:"receiverAccountID,omitempty"`
	// *
	// A serial number for the NFT to transfer.
	SerialNumber int64 `protobuf:"varint,3,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	// *
	// An approved allowance flag.<br/>
	// If true then the transfer is expected to be an approved allowance.
	// <p>
	// If set, `senderAccountID` SHALL be the owner that previously approved
	// the allowance.<br/>
	// If set, the `senderAccountID` MUST be the "payer" account for
	// the transaction <br/>
	// The default value SHALL be false (unset).
	IsApproval bool `protobuf:"varint,4,opt,name=is_approval,json=isApproval,proto3" json:"is_approval,omitempty"`
}

func (x *NftTransfer) Reset() {
	*x = NftTransfer{}
	mi := &file_basic_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NftTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftTransfer) ProtoMessage() {}

func (x *NftTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftTransfer.ProtoReflect.Descriptor instead.
func (*NftTransfer) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{12}
}

func (x *NftTransfer) GetSenderAccountID() *AccountID {
	if x != nil {
		return x.SenderAccountID
	}
	return nil
}

func (x *NftTransfer) GetReceiverAccountID() *AccountID {
	if x != nil {
		return x.ReceiverAccountID
	}
	return nil
}

func (x *NftTransfer) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *NftTransfer) GetIsApproval() bool {
	if x != nil {
		return x.IsApproval
	}
	return false
}

// *
// A list of transfers for a particular (non-HBAR) token type.
//
// A `TokenTransferList` applies to a single token type, but may contain many
// individual transfers.<br/>
// Each transfer of a fungible/common token MUST specify an `accountID` and
// `amount`. Amount SHALL be positive when the account receives tokens, and
// SHALL be negative when the account sends tokens. The amount SHOULD NOT be
// `0`.<br/>
// In a transfer list containing fungible/common tokens in the `transfers`
// list, the sum of all such transfers MUST be zero (`0`).
// Each transfer of a unique token SHALL specify both sender and receiver, as
// well as the serial number transferred.<br/>
// A single `TokenTransferList` MUST contain `transfers` or `nftTransfers`,
// but MUST NOT contain both.
type TokenTransferList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A token identifier.<br/>
	// This is the token to be transferred.
	Token *TokenID `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// *
	// A list of account amounts.
	// <p>
	// Each entry SHALL have an account and amount.<br/>
	// These transfers SHALL be "double-entry" style; the credits (positive
	// amount) and debits (negative amount) MUST sum to 0, unless this
	// transfer list is part of a `mint` or `burn` operation.<br/>
	// This SHALL be be set for fungible/common tokens and MUST be
	// empty otherwise.
	Transfers []*AccountAmount `protobuf:"bytes,2,rep,name=transfers,proto3" json:"transfers,omitempty"`
	// *
	// A list of NftTransfers.
	// <p>
	// Each entry SHALL have a sender and receiver account, and the
	// serial number of the unique token to transfer.<br/>
	// This SHALL be be set for non-fungible/unique tokens and SHALL be
	// empty otherwise.
	NftTransfers []*NftTransfer `protobuf:"bytes,3,rep,name=nftTransfers,proto3" json:"nftTransfers,omitempty"`
	// *
	// An expected decimal precision.<br/>
	// This is the number of decimals a fungible/common token type is
	// _expected_ to have.
	// <p>
	// The transfer SHALL fail with response code `UNEXPECTED_TOKEN_DECIMALS`
	// if this is set and the actual decimals specified for the `Token` differ
	// from this value.<br/>
	// If `nftTransfers` is set, then this value SHOULD NOT be set.
	ExpectedDecimals *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=expected_decimals,json=expectedDecimals,proto3" json:"expected_decimals,omitempty"`
}

func (x *TokenTransferList) Reset() {
	*x = TokenTransferList{}
	mi := &file_basic_types_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenTransferList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenTransferList) ProtoMessage() {}

func (x *TokenTransferList) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenTransferList.ProtoReflect.Descriptor instead.
func (*TokenTransferList) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{13}
}

func (x *TokenTransferList) GetToken() *TokenID {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TokenTransferList) GetTransfers() []*AccountAmount {
	if x != nil {
		return x.Transfers
	}
	return nil
}

func (x *TokenTransferList) GetNftTransfers() []*NftTransfer {
	if x != nil {
		return x.NftTransfers
	}
	return nil
}

func (x *TokenTransferList) GetExpectedDecimals() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExpectedDecimals
	}
	return nil
}

// *
// A rational number.<br/>
// A common use is to set the amount of a value transfer to collect as a
// custom fee.
//
// It is RECOMMENDED that both numerator and denominator be no larger than
// necessary to express the required fraction. A very large numerator, in
// particular, may not be reliable.
// Both fields are REQUIRED and SHOULD be positive integers.
type Fraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A fractional number's numerator.
	Numerator int64 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	// *
	// A fractional number's denominator.
	// <p>
	// A zero value SHALL fail with response code `FRACTION_DIVIDES_BY_ZERO`.
	Denominator int64 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (x *Fraction) Reset() {
	*x = Fraction{}
	mi := &file_basic_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fraction) ProtoMessage() {}

func (x *Fraction) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fraction.ProtoReflect.Descriptor instead.
func (*Fraction) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{14}
}

func (x *Fraction) GetNumerator() int64 {
	if x != nil {
		return x.Numerator
	}
	return 0
}

func (x *Fraction) GetDenominator() int64 {
	if x != nil {
		return x.Denominator
	}
	return 0
}

// *
// A Key is an entity representing one or more cryptographic public/private key
// pairs and, optionally, the structure for how multiple signatures may be
// composed to meet complex multiple-signature authorization requirements.
//
// A Key can be a public key from either the Ed25519 or ECDSA(secp256k1)
// signature schemes. In the ECDSA(secp256k1) case we require the 33-byte
// compressed form of the public key. For simplicity, we call these
// cryptographic public keys `primitive` keys.<br/>
// If an entity has a primitive key associated to it, then the corresponding
// private key must sign any transaction to send tokens or perform other
// actions requiring authorization.
//
// A Key can also be the ID of a smart contract, which SHALL authorize that
// contract to execute any system contract with signing requirements that are
// met by the key.<br/>
// > Example
// >> If account `0.0.A` has a threshold key whose threshold is satisfied
// >> by a contract ID key for contract `0.0.C`, then when `0.0.C` is called,
// >> it is authorized to use system contracts to manage any asset owned by
// >> `0.0.A`. If the contract ID key is "delegatable", then `0.0.C` can even
// >> perform these actions when running code accessed via `DELEGATECALL`.
//
// A Key can be a "threshold key", which is a list of N keys, any M of which
// may sign in order for the signature to be considered valid. The value of
// M for a given threshold key MUST be less than or equal to N. A threshold
// key is sometimes called a "M-of-N" key.
//
// A Key can be a "key list" where all keys in the list must sign unless
// specified otherwise in the documentation for a specific transaction
// type (e.g. FileDeleteTransactionBody).<br/>
// This implies that the use of a key list is dependent on context. For
// example, an Hedera file that is created with a list of keys, SHALL require
// that all of those keys must sign a transaction to create or modify the file,
// but only one key from that list MUST sign a transaction to delete the file.
// So it is a single list that sometimes acts as a N-of-N threshold key, and
// sometimes acts as a 1-of-N threshold key.<br/>
// To reduce confusion this may cause, a key list SHALL always be considered
// N-of-N, unless specified otherwise in official documentation.<br/>
// A key list MAY have repeated primitive public keys, but the signature
// requirement for all keys in a repeated set SHALL be satisfied by a single
// valid signature. There is no mechanism to require a single key to sign a
// single transaction more than once.
//
// Any list or threshold key MAY have nested key lists or threshold keys.
// This allows, for example, the keys within a threshold signature to
// themselves be threshold, list, contract, or primitive keys. This nesting
// structure enables complex asymmetric multi-party signature requirements to
// be met.
//
// To ensure adequate performance and transaction security, key nesting is
// limited to at most fifteen(15) levels.
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*Key_ContractID
	//	*Key_Ed25519
	//	*Key_RSA_3072
	//	*Key_ECDSA_384
	//	*Key_ThresholdKey
	//	*Key_KeyList
	//	*Key_ECDSASecp256K1
	//	*Key_DelegatableContractId
	Key isKey_Key `protobuf_oneof:"key"`
}

func (x *Key) Reset() {
	*x = Key{}
	mi := &file_basic_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{15}
}

func (m *Key) GetKey() isKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *Key) GetContractID() *ContractID {
	if x, ok := x.GetKey().(*Key_ContractID); ok {
		return x.ContractID
	}
	return nil
}

func (x *Key) GetEd25519() []byte {
	if x, ok := x.GetKey().(*Key_Ed25519); ok {
		return x.Ed25519
	}
	return nil
}

// Deprecated: Marked as deprecated in basic_types.proto.
func (x *Key) GetRSA_3072() []byte {
	if x, ok := x.GetKey().(*Key_RSA_3072); ok {
		return x.RSA_3072
	}
	return nil
}

// Deprecated: Marked as deprecated in basic_types.proto.
func (x *Key) GetECDSA_384() []byte {
	if x, ok := x.GetKey().(*Key_ECDSA_384); ok {
		return x.ECDSA_384
	}
	return nil
}

func (x *Key) GetThresholdKey() *ThresholdKey {
	if x, ok := x.GetKey().(*Key_ThresholdKey); ok {
		return x.ThresholdKey
	}
	return nil
}

func (x *Key) GetKeyList() *KeyList {
	if x, ok := x.GetKey().(*Key_KeyList); ok {
		return x.KeyList
	}
	return nil
}

func (x *Key) GetECDSASecp256K1() []byte {
	if x, ok := x.GetKey().(*Key_ECDSASecp256K1); ok {
		return x.ECDSASecp256K1
	}
	return nil
}

func (x *Key) GetDelegatableContractId() *ContractID {
	if x, ok := x.GetKey().(*Key_DelegatableContractId); ok {
		return x.DelegatableContractId
	}
	return nil
}

type isKey_Key interface {
	isKey_Key()
}

type Key_ContractID struct {
	// *
	// A smart contract instance that is authorized implicitly.
	// <p>
	// This key type SHALL require that the code in the active message frame
	// belong to the contract with the given id.
	ContractID *ContractID `protobuf:"bytes,1,opt,name=contractID,proto3,oneof"`
}

type Key_Ed25519 struct {
	// *
	// An array of Ed25519 public key bytes.
	Ed25519 []byte `protobuf:"bytes,2,opt,name=ed25519,proto3,oneof"`
}

type Key_RSA_3072 struct {
	// *
	// This option is not currently supported.<br/>
	// An array of RSA-3072 public key bytes.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	RSA_3072 []byte `protobuf:"bytes,3,opt,name=RSA_3072,json=RSA3072,proto3,oneof"`
}

type Key_ECDSA_384 struct {
	// *
	// This option is not currently supported.<br/>
	// An array of ECDSA, using the p-384 curve, public key bytes.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	ECDSA_384 []byte `protobuf:"bytes,4,opt,name=ECDSA_384,json=ECDSA384,proto3,oneof"`
}

type Key_ThresholdKey struct {
	// *
	// A threshold, M, combined with a list of N keys, any M of which are
	// sufficient to form a valid signature.
	ThresholdKey *ThresholdKey `protobuf:"bytes,5,opt,name=thresholdKey,proto3,oneof"`
}

type Key_KeyList struct {
	// *
	// A list of keys. This may be treated like a "N-of-N" threshold key,
	// as a component of another key, or in some other manner as documented.
	KeyList *KeyList `protobuf:"bytes,6,opt,name=keyList,proto3,oneof"`
}

type Key_ECDSASecp256K1 struct {
	// *
	// A set of compressed ECDSA(secp256k1) public key bytes.<br/>
	// This is an EVM compatibility format.
	ECDSASecp256K1 []byte `protobuf:"bytes,7,opt,name=ECDSA_secp256k1,json=ECDSASecp256k1,proto3,oneof"`
}

type Key_DelegatableContractId struct {
	// *
	// A smart contract that, if the recipient of the active message frame,
	// SHALL be imputed authorization.<br/>
	// Setting this key type is a more permissive version of setting a
	// contractID key.
	// <p>
	// This key form SHALL NOT strictly require that the code being executed
	// in the frame belong to the given contract. The code in frame MAY be
	// running another contract via a `delegatecall`.
	DelegatableContractId *ContractID `protobuf:"bytes,8,opt,name=delegatable_contract_id,json=delegatableContractId,proto3,oneof"`
}

func (*Key_ContractID) isKey_Key() {}

func (*Key_Ed25519) isKey_Key() {}

func (*Key_RSA_3072) isKey_Key() {}

func (*Key_ECDSA_384) isKey_Key() {}

func (*Key_ThresholdKey) isKey_Key() {}

func (*Key_KeyList) isKey_Key() {}

func (*Key_ECDSASecp256K1) isKey_Key() {}

func (*Key_DelegatableContractId) isKey_Key() {}

// *
// A threshold value and a list of public keys that, together, form a threshold
// signature requirement. Any subset of the keys in the list may satisfy the
// signature requirements of this type of key, provided the number of keys meets
// or exceeds the threshold. For example, if a particular key has a threshold of
// three(3) and eight(8) keys in the list, then any three(3) signatures, from
// the list of eight(8), is sufficient to authorize that key.
//
// For threshold purposes, all signatures from a single `primitive` key are
// considered a single signature, so that signature(s) from a single key SHALL
// NOT _directly_ meet a threshold greater than one(1).
//
// #### Note
// > It is possible to construct a complex key structure that _would_ enable a
// > single primitive key to successfully meet a threshold requirement. All
// > threshold keys SHOULD be carefully audited to ensure no one `primitive`
// > key, or smart contract, has disproportionate capability.
type ThresholdKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A transaction MUST have valid signatures from at least this number of
	// separate keys, from the `keys` list to be authorized by this key.
	Threshold uint32 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// *
	// A list of the keys that MAY satisfy signature requirements of this key.
	Keys *KeyList `protobuf:"bytes,2,opt,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ThresholdKey) Reset() {
	*x = ThresholdKey{}
	mi := &file_basic_types_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThresholdKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThresholdKey) ProtoMessage() {}

func (x *ThresholdKey) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThresholdKey.ProtoReflect.Descriptor instead.
func (*ThresholdKey) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{16}
}

func (x *ThresholdKey) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ThresholdKey) GetKeys() *KeyList {
	if x != nil {
		return x.Keys
	}
	return nil
}

// *
// A list of keys.<br/>
// A `KeyList` requires all keys (N-of-N) to sign, unless otherwise
// specified in official documentation. A KeyList may contain repeated keys,
// but all such repeated keys are considered a single key when determining
// signature authorization.
//
// ### Additional Notes
//  1. An empty key list is the "standard" mechanism to represent an
//     unassigned key. For example, if the `admin_key` of a token is set
//     to the empty key list, then that token has no admin key, and
//     functionality that requires an admin key to sign the
//     transaction is disabled.
type KeyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A list of keys. All values in this list SHALL be non-null.
	// <p>
	Keys []*Key `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *KeyList) Reset() {
	*x = KeyList{}
	mi := &file_basic_types_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyList) ProtoMessage() {}

func (x *KeyList) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyList.ProtoReflect.Descriptor instead.
func (*KeyList) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{17}
}

func (x *KeyList) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

// *
// This message is deprecated and MUST NOT be used to communicate with
// network nodes. It is retained here only for historical reasons.
//
// Client software MUST NOT include this message in any request. <br/>
// Compliant nodes SHALL NOT accept any request containing this message.
//
// Please use the `SignaturePair` and `SignatureMap` messages instead of
// this message.
//
// Deprecated: Marked as deprecated in basic_types.proto.
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Signature:
	//
	//	*Signature_Contract
	//	*Signature_Ed25519
	//	*Signature_RSA_3072
	//	*Signature_ECDSA_384
	//	*Signature_ThresholdSignature
	//	*Signature_SignatureList
	Signature isSignature_Signature `protobuf_oneof:"signature"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_basic_types_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{18}
}

func (m *Signature) GetSignature() isSignature_Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (x *Signature) GetContract() []byte {
	if x, ok := x.GetSignature().(*Signature_Contract); ok {
		return x.Contract
	}
	return nil
}

func (x *Signature) GetEd25519() []byte {
	if x, ok := x.GetSignature().(*Signature_Ed25519); ok {
		return x.Ed25519
	}
	return nil
}

func (x *Signature) GetRSA_3072() []byte {
	if x, ok := x.GetSignature().(*Signature_RSA_3072); ok {
		return x.RSA_3072
	}
	return nil
}

func (x *Signature) GetECDSA_384() []byte {
	if x, ok := x.GetSignature().(*Signature_ECDSA_384); ok {
		return x.ECDSA_384
	}
	return nil
}

func (x *Signature) GetThresholdSignature() *ThresholdSignature {
	if x, ok := x.GetSignature().(*Signature_ThresholdSignature); ok {
		return x.ThresholdSignature
	}
	return nil
}

func (x *Signature) GetSignatureList() *SignatureList {
	if x, ok := x.GetSignature().(*Signature_SignatureList); ok {
		return x.SignatureList
	}
	return nil
}

type isSignature_Signature interface {
	isSignature_Signature()
}

type Signature_Contract struct {
	// *
	// Smart contract virtual signature (always length zero).
	Contract []byte `protobuf:"bytes,1,opt,name=contract,proto3,oneof"`
}

type Signature_Ed25519 struct {
	// *
	// Ed25519 signature bytes.
	Ed25519 []byte `protobuf:"bytes,2,opt,name=ed25519,proto3,oneof"`
}

type Signature_RSA_3072 struct {
	// *
	// RSA-3072 signature bytes.
	RSA_3072 []byte `protobuf:"bytes,3,opt,name=RSA_3072,json=RSA3072,proto3,oneof"`
}

type Signature_ECDSA_384 struct {
	// *
	// ECDSA p-384 signature bytes.
	ECDSA_384 []byte `protobuf:"bytes,4,opt,name=ECDSA_384,json=ECDSA384,proto3,oneof"`
}

type Signature_ThresholdSignature struct {
	// *
	// A list of signatures for a single N-of-M threshold Key. This must be
	// a list of exactly M signatures, at least N of which are non-null.
	ThresholdSignature *ThresholdSignature `protobuf:"bytes,5,opt,name=thresholdSignature,proto3,oneof"`
}

type Signature_SignatureList struct {
	// *
	// A list of M signatures, each corresponding to a Key in a KeyList
	// of the same length.
	SignatureList *SignatureList `protobuf:"bytes,6,opt,name=signatureList,proto3,oneof"`
}

func (*Signature_Contract) isSignature_Signature() {}

func (*Signature_Ed25519) isSignature_Signature() {}

func (*Signature_RSA_3072) isSignature_Signature() {}

func (*Signature_ECDSA_384) isSignature_Signature() {}

func (*Signature_ThresholdSignature) isSignature_Signature() {}

func (*Signature_SignatureList) isSignature_Signature() {}

// *
// This message is deprecated and MUST NOT be used to communicate with network
// nodes. It is retained here only for historical reasons.
//
// Client software MUST NOT include this message in any request. <br/>
// Compliant nodes SHALL NOT accept any request containing this message.
//
// Please use the `SignaturePair` and `SignatureMap` messages, in combination
// with `ThresholdKey` keys, instead of this message.
//
// Deprecated: Marked as deprecated in basic_types.proto.
type ThresholdSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// For an N-of-M threshold key, this is a list of M signatures, at least N
	// of which must be non-null.
	Sigs *SignatureList `protobuf:"bytes,2,opt,name=sigs,proto3" json:"sigs,omitempty"`
}

func (x *ThresholdSignature) Reset() {
	*x = ThresholdSignature{}
	mi := &file_basic_types_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThresholdSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThresholdSignature) ProtoMessage() {}

func (x *ThresholdSignature) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThresholdSignature.ProtoReflect.Descriptor instead.
func (*ThresholdSignature) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{19}
}

func (x *ThresholdSignature) GetSigs() *SignatureList {
	if x != nil {
		return x.Sigs
	}
	return nil
}

// *
// This message is deprecated and MUST NOT be used to communicate with network
// nodes. It is retained here only for historical reasons.
//
// Client software MUST NOT include this message in any request. <br/>
// Compliant nodes SHALL NOT accept any request containing this message.
//
// Please use the `SignaturePair` and `SignatureMap` messages instead of
// this message.
//
// Deprecated: Marked as deprecated in basic_types.proto.
type SignatureList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Each signature corresponds to a Key in the KeyList.
	Sigs []*Signature `protobuf:"bytes,2,rep,name=sigs,proto3" json:"sigs,omitempty"`
}

func (x *SignatureList) Reset() {
	*x = SignatureList{}
	mi := &file_basic_types_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignatureList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureList) ProtoMessage() {}

func (x *SignatureList) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureList.ProtoReflect.Descriptor instead.
func (*SignatureList) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{20}
}

func (x *SignatureList) GetSigs() []*Signature {
	if x != nil {
		return x.Sigs
	}
	return nil
}

// *
// A public key and signature pair.<br/>
// Only Ed25519 and ECDSA(secp256k1) keys and signatures are currently supported
// as cryptographic (non-implied) signatures.
type SignaturePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Prefix bytes of the public key.
	// <p>
	// The client may use any number of bytes from zero to the whole length of
	// the public key for pubKeyPrefix. If zero bytes are used, then it MUST be
	// true that only one cryptographic key is required to sign the associated
	// transaction.<br/>
	// If the `pubKeyPrefix` is 0 bytes and more than a single cryptographic
	// key is required to sign the transaction, the request SHALL resolve to
	// `INVALID_SIGNATURE`.
	// <blockquote>Important Note<blockquote>
	// In the special case that a signature is provided to authorize a
	// precompiled contract, the `pubKeyPrefix` MUST contain the _entire public
	// key_.<br/>
	// That is, if the key is an Ed25519 key, the `pubKeyPrefix` MUST be
	// 32 bytes long and contain the full public key bytes.<br/>
	// If the key is an ECDSA(secp256k1) key, the `pubKeyPrefix` MUST be
	// 33 bytes long and contain the full _compressed_ form of the public key.
	// </blockquote></blockquote>
	// <p>
	// <dl><dt>Purpose</dt>
	// <dd>The `pubKeyPrefix` exists to save cost. A signed transaction with
	// shorter prefixes will have fewer bytes, and so will have a lower
	// transaction fee.
	// The prefixes, however, MUST be long enough to distinguish between all
	// of the public keys that might be signing the transaction. Therefore,
	// software signing a transaction SHOULD evaluate which keys might possibly
	// be required to sign a transaction, and ensure that the shortest prefix
	// that is sufficient to unambiguously identify the correct key is used.
	// </dd></dl>
	PubKeyPrefix []byte `protobuf:"bytes,1,opt,name=pubKeyPrefix,proto3" json:"pubKeyPrefix,omitempty"`
	// Types that are assignable to Signature:
	//
	//	*SignaturePair_Contract
	//	*SignaturePair_Ed25519
	//	*SignaturePair_RSA_3072
	//	*SignaturePair_ECDSA_384
	//	*SignaturePair_ECDSASecp256K1
	Signature isSignaturePair_Signature `protobuf_oneof:"signature"`
}

func (x *SignaturePair) Reset() {
	*x = SignaturePair{}
	mi := &file_basic_types_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignaturePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignaturePair) ProtoMessage() {}

func (x *SignaturePair) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignaturePair.ProtoReflect.Descriptor instead.
func (*SignaturePair) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{21}
}

func (x *SignaturePair) GetPubKeyPrefix() []byte {
	if x != nil {
		return x.PubKeyPrefix
	}
	return nil
}

func (m *SignaturePair) GetSignature() isSignaturePair_Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (x *SignaturePair) GetContract() []byte {
	if x, ok := x.GetSignature().(*SignaturePair_Contract); ok {
		return x.Contract
	}
	return nil
}

func (x *SignaturePair) GetEd25519() []byte {
	if x, ok := x.GetSignature().(*SignaturePair_Ed25519); ok {
		return x.Ed25519
	}
	return nil
}

// Deprecated: Marked as deprecated in basic_types.proto.
func (x *SignaturePair) GetRSA_3072() []byte {
	if x, ok := x.GetSignature().(*SignaturePair_RSA_3072); ok {
		return x.RSA_3072
	}
	return nil
}

// Deprecated: Marked as deprecated in basic_types.proto.
func (x *SignaturePair) GetECDSA_384() []byte {
	if x, ok := x.GetSignature().(*SignaturePair_ECDSA_384); ok {
		return x.ECDSA_384
	}
	return nil
}

func (x *SignaturePair) GetECDSASecp256K1() []byte {
	if x, ok := x.GetSignature().(*SignaturePair_ECDSASecp256K1); ok {
		return x.ECDSASecp256K1
	}
	return nil
}

type isSignaturePair_Signature interface {
	isSignaturePair_Signature()
}

type SignaturePair_Contract struct {
	// *
	// A smart contract virtual signature.
	// <p>
	// This value MUST be length zero, if set.
	Contract []byte `protobuf:"bytes,2,opt,name=contract,proto3,oneof"`
}

type SignaturePair_Ed25519 struct {
	// *
	// An Ed25519 signature.
	Ed25519 []byte `protobuf:"bytes,3,opt,name=ed25519,proto3,oneof"`
}

type SignaturePair_RSA_3072 struct {
	// *
	// This option is not supported.<br/>
	// A RSA-3072 signature.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	RSA_3072 []byte `protobuf:"bytes,4,opt,name=RSA_3072,json=RSA3072,proto3,oneof"`
}

type SignaturePair_ECDSA_384 struct {
	// *
	// This option is not supported.<br/>
	// ECDSA p-384 signature.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	ECDSA_384 []byte `protobuf:"bytes,5,opt,name=ECDSA_384,json=ECDSA384,proto3,oneof"`
}

type SignaturePair_ECDSASecp256K1 struct {
	// *
	// An ECDSA(secp256k1) signature.
	ECDSASecp256K1 []byte `protobuf:"bytes,6,opt,name=ECDSA_secp256k1,json=ECDSASecp256k1,proto3,oneof"`
}

func (*SignaturePair_Contract) isSignaturePair_Signature() {}

func (*SignaturePair_Ed25519) isSignaturePair_Signature() {}

func (*SignaturePair_RSA_3072) isSignaturePair_Signature() {}

func (*SignaturePair_ECDSA_384) isSignaturePair_Signature() {}

func (*SignaturePair_ECDSASecp256K1) isSignaturePair_Signature() {}

// *
// A set of signatures corresponding to every unique public key that
// signed a given transaction.
//
// If any public key matches more than one prefix in the signature map,
// the transaction containing that map SHALL fail immediately with the
// response code `KEY_PREFIX_MISMATCH`.
type SignatureMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A list of signature pairs for a specific transaction.<br/>
	// Each signature pair represents a single cryptographic (`primitive`)
	// public key identified by a "prefix" value and the cryptographic
	// signature produced for that key.
	SigPair []*SignaturePair `protobuf:"bytes,1,rep,name=sigPair,proto3" json:"sigPair,omitempty"`
}

func (x *SignatureMap) Reset() {
	*x = SignatureMap{}
	mi := &file_basic_types_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignatureMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureMap) ProtoMessage() {}

func (x *SignatureMap) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureMap.ProtoReflect.Descriptor instead.
func (*SignatureMap) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{22}
}

func (x *SignatureMap) GetSigPair() []*SignaturePair {
	if x != nil {
		return x.SigPair
	}
	return nil
}

// *
// A set of values the nodes use in determining transaction and query fees, and
// constants involved in fee calculations.
//
// Nodes SHALL multiply the amount of "resources" allocated to a transaction or
// query by the corresponding price to calculate the appropriate fee. Units are
// one-thousandth of a `tinyCent`. The "resource" allocations SHALL be estimated
// based on transaction characteristics and current network state, and MAY be
// further adjusted based on network load and congestion.
//
// This SHALL be used, in different contexts, for the cost _factors_ used to
// calculate charged amounts, for the resource accumulation, and for actual
// amounts to be charged.<br/>
// Amounts recorded here MUST be converted to tinybar according to the
// current active `ExchangeRate` for the network.
type FeeComponents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Base: "minimum total fee".
	// <p>
	// The calculated fee MUST be greater than this value.
	Min int64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// *
	// Base: "maximum total fee".
	// <p>
	// The calculated fee MUST be less than this value.
	Max int64 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// *
	// Base: "constant fee".<br/>
	// A baseline constant contribution to total fee.
	Constant int64 `protobuf:"varint,3,opt,name=constant,proto3" json:"constant,omitempty"`
	// *
	// Bandwidth: "bytes per transaction".<br/>
	// The fee for bandwidth consumed by a transaction, measured in bytes
	Bpt int64 `protobuf:"varint,4,opt,name=bpt,proto3" json:"bpt,omitempty"`
	// *
	// Signatures: "validations per transaction".<br/>
	// The fee for signature verifications required by a transaction
	Vpt int64 `protobuf:"varint,5,opt,name=vpt,proto3" json:"vpt,omitempty"`
	// *
	// Memory: "RAM byte-hours".<br/>
	// The fee for RAM required to process a transaction,
	// measured in byte-hours
	Rbh int64 `protobuf:"varint,6,opt,name=rbh,proto3" json:"rbh,omitempty"`
	// *
	// Disk: "storage byte-hours".<br/>
	// The fee for storage required by a transaction, measured in byte-hours
	Sbh int64 `protobuf:"varint,7,opt,name=sbh,proto3" json:"sbh,omitempty"`
	// *
	// Compute: Ethereum term for a derivative EVM compute resource.<br/>
	// The fee of computation for a smart contract transaction. The value of
	// gas is set by a conversion rate, and is regularly updated to reflect
	// reasonable and customary costs.
	Gas int64 `protobuf:"varint,8,opt,name=gas,proto3" json:"gas,omitempty"`
	// *
	// Ad valorem: "transferred value".<br/>
	// The fee for HBAR transferred by a transaction.
	Tv int64 `protobuf:"varint,9,opt,name=tv,proto3" json:"tv,omitempty"`
	// *
	// Response memory: "bytes per response".<br/>
	// The fee for data retrieved from memory to deliver a response,
	// measured in bytes
	Bpr int64 `protobuf:"varint,10,opt,name=bpr,proto3" json:"bpr,omitempty"`
	// *
	// Response disk: "storage bytes per response".<br/>
	// The fee for data retrieved from disk to deliver a response,
	// measured in bytes
	Sbpr int64 `protobuf:"varint,11,opt,name=sbpr,proto3" json:"sbpr,omitempty"`
}

func (x *FeeComponents) Reset() {
	*x = FeeComponents{}
	mi := &file_basic_types_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeeComponents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeComponents) ProtoMessage() {}

func (x *FeeComponents) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeComponents.ProtoReflect.Descriptor instead.
func (*FeeComponents) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{23}
}

func (x *FeeComponents) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *FeeComponents) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *FeeComponents) GetConstant() int64 {
	if x != nil {
		return x.Constant
	}
	return 0
}

func (x *FeeComponents) GetBpt() int64 {
	if x != nil {
		return x.Bpt
	}
	return 0
}

func (x *FeeComponents) GetVpt() int64 {
	if x != nil {
		return x.Vpt
	}
	return 0
}

func (x *FeeComponents) GetRbh() int64 {
	if x != nil {
		return x.Rbh
	}
	return 0
}

func (x *FeeComponents) GetSbh() int64 {
	if x != nil {
		return x.Sbh
	}
	return 0
}

func (x *FeeComponents) GetGas() int64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *FeeComponents) GetTv() int64 {
	if x != nil {
		return x.Tv
	}
	return 0
}

func (x *FeeComponents) GetBpr() int64 {
	if x != nil {
		return x.Bpr
	}
	return 0
}

func (x *FeeComponents) GetSbpr() int64 {
	if x != nil {
		return x.Sbpr
	}
	return 0
}

// *
// The fee schedule for a specific transaction or query based on the fee data.
type TransactionFeeSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// An enumeration for a particular transaction or query.<br/>
	// The functionality type determines the base cost parameters.
	HederaFunctionality HederaFunctionality `protobuf:"varint,1,opt,name=hederaFunctionality,proto3,enum=proto.HederaFunctionality" json:"hederaFunctionality,omitempty"`
	// *
	// Use `fees` instead of this field.<br/>
	// Resource price coefficients.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	FeeData *FeeData `protobuf:"bytes,2,opt,name=feeData,proto3" json:"feeData,omitempty"`
	// *
	// The resource price coefficients for transaction type and any applicable
	// subtypes.<br/>
	// The multiple entries enable support for subtype price definitions.
	Fees []*FeeData `protobuf:"bytes,3,rep,name=fees,proto3" json:"fees,omitempty"`
}

func (x *TransactionFeeSchedule) Reset() {
	*x = TransactionFeeSchedule{}
	mi := &file_basic_types_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionFeeSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFeeSchedule) ProtoMessage() {}

func (x *TransactionFeeSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFeeSchedule.ProtoReflect.Descriptor instead.
func (*TransactionFeeSchedule) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{24}
}

func (x *TransactionFeeSchedule) GetHederaFunctionality() HederaFunctionality {
	if x != nil {
		return x.HederaFunctionality
	}
	return HederaFunctionality_NONE
}

// Deprecated: Marked as deprecated in basic_types.proto.
func (x *TransactionFeeSchedule) GetFeeData() *FeeData {
	if x != nil {
		return x.FeeData
	}
	return nil
}

func (x *TransactionFeeSchedule) GetFees() []*FeeData {
	if x != nil {
		return x.Fees
	}
	return nil
}

// *
// A total fee, in component amounts charged for a transaction.
//
// Total fees are composed of three sets of components.
//   - Node data, components that compensate the specific node that submitted
//     the transaction.
//   - Network data, components that compensate the Hedera network for gossiping
//     the transaction and determining the consensus timestamp.
//   - Service data, components that compensate the Hedera network for the ongoing
//     maintenance and operation of the network, as well as ongoing development
//     of network services.
//
// Fee components are recorded in thousandths of a tiny cent, and the network
// exchange rate converts these to tinybar amounts, which are what the network
// charges for transactions and what the network reports in the record stream.
type FeeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Fee components to be paid to the submitting node.
	Nodedata *FeeComponents `protobuf:"bytes,1,opt,name=nodedata,proto3" json:"nodedata,omitempty"`
	// *
	// Fee components to be paid to the network for bringing a
	// transaction to consensus.
	Networkdata *FeeComponents `protobuf:"bytes,2,opt,name=networkdata,proto3" json:"networkdata,omitempty"`
	// *
	// Fee components to be paid to the network for providing the immediate and
	// ongoing services associated with executing the transaction, maintaining
	// the network, and developing the network software.
	Servicedata *FeeComponents `protobuf:"bytes,3,opt,name=servicedata,proto3" json:"servicedata,omitempty"`
	// *
	// A sub-type distinguishing between different types of `FeeData` that may
	// apply to the same base transaction type (associated with
	// an `HederaFunctionality`).
	SubType SubType `protobuf:"varint,4,opt,name=subType,proto3,enum=proto.SubType" json:"subType,omitempty"`
}

func (x *FeeData) Reset() {
	*x = FeeData{}
	mi := &file_basic_types_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeData) ProtoMessage() {}

func (x *FeeData) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeData.ProtoReflect.Descriptor instead.
func (*FeeData) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{25}
}

func (x *FeeData) GetNodedata() *FeeComponents {
	if x != nil {
		return x.Nodedata
	}
	return nil
}

func (x *FeeData) GetNetworkdata() *FeeComponents {
	if x != nil {
		return x.Networkdata
	}
	return nil
}

func (x *FeeData) GetServicedata() *FeeComponents {
	if x != nil {
		return x.Servicedata
	}
	return nil
}

func (x *FeeData) GetSubType() SubType {
	if x != nil {
		return x.SubType
	}
	return SubType_DEFAULT
}

// *
// A set of fee schedules covering all transaction types and query types, along
// with a specific time at which this fee schedule will expire.
//
// Nodes SHALL use the most recent unexpired fee schedule to determine the fees
// for all transactions based on various resource components imputed to each
// transaction.
type FeeSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Sets of fee coefficients for various transaction or query types.
	TransactionFeeSchedule []*TransactionFeeSchedule `protobuf:"bytes,1,rep,name=transactionFeeSchedule,proto3" json:"transactionFeeSchedule,omitempty"`
	// *
	// A time, in seconds since the `epoch`, when this fee schedule
	// will expire.
	// <p>
	// For this purpose, `epoch` SHALL be the UNIX epoch
	// with 0 at `1970-01-01T00:00:00.000Z`.
	ExpiryTime *TimestampSeconds `protobuf:"bytes,2,opt,name=expiryTime,proto3" json:"expiryTime,omitempty"`
}

func (x *FeeSchedule) Reset() {
	*x = FeeSchedule{}
	mi := &file_basic_types_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeeSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeSchedule) ProtoMessage() {}

func (x *FeeSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeSchedule.ProtoReflect.Descriptor instead.
func (*FeeSchedule) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{26}
}

func (x *FeeSchedule) GetTransactionFeeSchedule() []*TransactionFeeSchedule {
	if x != nil {
		return x.TransactionFeeSchedule
	}
	return nil
}

func (x *FeeSchedule) GetExpiryTime() *TimestampSeconds {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

// *
// The "current" fee schedule and the "next" fee schedule.
//
// The current fee schedule is the schedule that SHALL apply to the current
// transaction.<br/>
// The next fee schedule is the schedule that SHALL apply after the current
// schedule expires.<br/>
// We store both to avoid a condition where transactions are processed very
// near the time when a fee schedule expires and it might be indeterminate
// which fees to apply. With both current and next fee schedule the network
// can deterministically apply the correct fee schedule based on consensus
// timestamp for each transaction.
type CurrentAndNextFeeSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A current, unexpired, fee schedule.
	CurrentFeeSchedule *FeeSchedule `protobuf:"bytes,1,opt,name=currentFeeSchedule,proto3" json:"currentFeeSchedule,omitempty"`
	// *
	// A future fee schedule to use when the current schedule expires.
	NextFeeSchedule *FeeSchedule `protobuf:"bytes,2,opt,name=nextFeeSchedule,proto3" json:"nextFeeSchedule,omitempty"`
}

func (x *CurrentAndNextFeeSchedule) Reset() {
	*x = CurrentAndNextFeeSchedule{}
	mi := &file_basic_types_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrentAndNextFeeSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentAndNextFeeSchedule) ProtoMessage() {}

func (x *CurrentAndNextFeeSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentAndNextFeeSchedule.ProtoReflect.Descriptor instead.
func (*CurrentAndNextFeeSchedule) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{27}
}

func (x *CurrentAndNextFeeSchedule) GetCurrentFeeSchedule() *FeeSchedule {
	if x != nil {
		return x.CurrentFeeSchedule
	}
	return nil
}

func (x *CurrentAndNextFeeSchedule) GetNextFeeSchedule() *FeeSchedule {
	if x != nil {
		return x.NextFeeSchedule
	}
	return nil
}

// *
// A network node endpoint.<br/>
// Each network node in the global address book publishes one or more endpoints
// which enable the nodes to communicate both with other nodes, for gossip, and
// with clients to receive transaction requests.
//
// This message supports IPv4 with address and TCP port,
// and MAY include a FQDN instead of an IP address.<br/>
// IPv6 is not currently supported.
//
// When the `domain_name` field is set, the `ipAddressV4` field
// MUST NOT be set.<br/>
// When the `ipAddressV4` field is set, the `domain_name` field
// MUST NOT be set.
type ServiceEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A 32-bit IPv4 address.<br/>
	// This is the address of the endpoint, encoded in pure "big-endian"
	// (i.e. left to right) order (e.g. `127.0.0.1` has hex bytes in the
	// order `7F`, `00`, `00`, `01`).
	IpAddressV4 []byte `protobuf:"bytes,1,opt,name=ipAddressV4,proto3" json:"ipAddressV4,omitempty"`
	// *
	// A TCP port to use.
	// <p>
	// This value MUST be between 0 and 65535, inclusive.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// *
	// A node domain name.
	// <p>
	// This MUST be the fully qualified domain name of the node.<br/>
	// This value MUST NOT exceed 253 characters.<br/>
	// When the `domain_name` field is set, the `ipAddressV4`
	// field MUST NOT be set.<br/>
	// When the `ipAddressV4` field is set, the `domain_name`
	// field MUST NOT be set.
	DomainName string `protobuf:"bytes,3,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
}

func (x *ServiceEndpoint) Reset() {
	*x = ServiceEndpoint{}
	mi := &file_basic_types_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceEndpoint) ProtoMessage() {}

func (x *ServiceEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceEndpoint.ProtoReflect.Descriptor instead.
func (*ServiceEndpoint) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{28}
}

func (x *ServiceEndpoint) GetIpAddressV4() []byte {
	if x != nil {
		return x.IpAddressV4
	}
	return nil
}

func (x *ServiceEndpoint) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServiceEndpoint) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

// *
// The data about a node, including its service endpoints and the Hedera account
// to be paid for services provided by the node (that is, queries answered and
// transactions submitted).
//
// All active fields are populated in the `0.0.102` address book file.<br/>
// Only fields documented with "`0.0.101` field" are populated in the 0.0.101
// address book file.
//
// This message MAY be superseded by messages in state/addressbook/node.proto
// and node_get_info.proto.
type NodeAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// ServiceEndpoint is now used to retrieve a node's list of IP
	// addresses and ports.<br/>
	// The IP address of the Node, as a string, encoded in UTF-8.<br/>
	// This value SHALL NOT be populated.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	IpAddress []byte `protobuf:"bytes,1,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	// *
	// ServiceEndpoint is now used to retrieve a node's list of IP
	// addresses and ports.<br/>
	// The port number of the grpc server for the node.<br/>
	// This value SHALL NOT be populated.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	Portno int32 `protobuf:"varint,2,opt,name=portno,proto3" json:"portno,omitempty"`
	// *
	// Description provides short text functionality.<br/>
	// A short description of the node.
	// <p>
	// This field SHALL NOT be populated.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	Memo []byte `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// A hexadecimal String encoding of an X509 public key.
	// <p>
	// This X509 RSA _public_ key SHALL be used to verify record stream files
	// (e.g., record stream files).<br/>
	// This field SHALL be a string of hexadecimal characters, encoded UTF-8,
	// which, translated to binary, form the public key DER encoding.
	RSA_PubKey string `protobuf:"bytes,4,opt,name=RSA_PubKey,json=RSAPubKey,proto3" json:"RSA_PubKey,omitempty"`
	// *
	// A numeric identifier for the node.
	// <p>
	// This value SHALL NOT be sequential.
	// <p>
	// A `0.0.101` field
	NodeId int64 `protobuf:"varint,5,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// *
	// An account to be paid the "node" portion of transaction fees.<br/>
	// The "node" fees are paid to the node that submitted the transaction.
	// <p>
	// A `0.0.101` field
	NodeAccountId *AccountID `protobuf:"bytes,6,opt,name=nodeAccountId,proto3" json:"nodeAccountId,omitempty"`
	// *
	// A hash of the node's TLS certificate.
	// <p>
	// This field SHALL be a string of hexadecimal characters, encoded UTF-8,
	// which, translated to binary, form a SHA-384 hash of the node's TLS
	// certificate in PEM format.
	// This TLS certificate MUST be encoded UTF-8 and normalized according to
	// the NFKD form prior to computing the hash value.<br/>
	// The value of this field SHALL be used to verify the node TLS
	// certificate when presented during protocol negotiation.
	// <p>
	// A `0.0.101` field
	NodeCertHash []byte `protobuf:"bytes,7,opt,name=nodeCertHash,proto3" json:"nodeCertHash,omitempty"`
	// *
	// A node's service IP addresses and TCP ports.<br/>
	// Nodes require multiple endpoints to ensure that inter-node communication
	// (e.g. gossip) is properly separated from client communication to
	// API endpoints.
	// <p>
	// A `0.0.101` field
	ServiceEndpoint []*ServiceEndpoint `protobuf:"bytes,8,rep,name=serviceEndpoint,proto3" json:"serviceEndpoint,omitempty"`
	// *
	// A short description of the node.
	// <p>
	// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
	// (default 100) bytes when encoded as UTF-8.
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// *
	// This is replaced by per-account stake tracking and dynamic
	// calculation.<br/>
	// The amount of tinybar staked to the node.<br/>
	// This value SHOULD NOT be populated, and SHALL be ignored.
	//
	// Deprecated: Marked as deprecated in basic_types.proto.
	Stake int64 `protobuf:"varint,10,opt,name=stake,proto3" json:"stake,omitempty"`
}

func (x *NodeAddress) Reset() {
	*x = NodeAddress{}
	mi := &file_basic_types_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAddress) ProtoMessage() {}

func (x *NodeAddress) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAddress.ProtoReflect.Descriptor instead.
func (*NodeAddress) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{29}
}

// Deprecated: Marked as deprecated in basic_types.proto.
func (x *NodeAddress) GetIpAddress() []byte {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

// Deprecated: Marked as deprecated in basic_types.proto.
func (x *NodeAddress) GetPortno() int32 {
	if x != nil {
		return x.Portno
	}
	return 0
}

// Deprecated: Marked as deprecated in basic_types.proto.
func (x *NodeAddress) GetMemo() []byte {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *NodeAddress) GetRSA_PubKey() string {
	if x != nil {
		return x.RSA_PubKey
	}
	return ""
}

func (x *NodeAddress) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NodeAddress) GetNodeAccountId() *AccountID {
	if x != nil {
		return x.NodeAccountId
	}
	return nil
}

func (x *NodeAddress) GetNodeCertHash() []byte {
	if x != nil {
		return x.NodeCertHash
	}
	return nil
}

func (x *NodeAddress) GetServiceEndpoint() []*ServiceEndpoint {
	if x != nil {
		return x.ServiceEndpoint
	}
	return nil
}

func (x *NodeAddress) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Deprecated: Marked as deprecated in basic_types.proto.
func (x *NodeAddress) GetStake() int64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

// *
// A list of nodes and their metadata that contains details of the nodes
// running the network.
//
// Used to parse the contents of system files `0.0.101` and `0.0.102`.
type NodeAddressBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Published data for all nodes in the network
	NodeAddress []*NodeAddress `protobuf:"bytes,1,rep,name=nodeAddress,proto3" json:"nodeAddress,omitempty"`
}

func (x *NodeAddressBook) Reset() {
	*x = NodeAddressBook{}
	mi := &file_basic_types_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeAddressBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAddressBook) ProtoMessage() {}

func (x *NodeAddressBook) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAddressBook.ProtoReflect.Descriptor instead.
func (*NodeAddressBook) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{30}
}

func (x *NodeAddressBook) GetNodeAddress() []*NodeAddress {
	if x != nil {
		return x.NodeAddress
	}
	return nil
}

// *
// A software version according to "[semantic versioning](https://semver.org/)"
// or "date versioning".
//
// Hedera currently modifies the "typical" semantic versioning somewhat, the
// `major` version is always `0`, and each release increments the `minor`
// version. The `patch` and `pre` components are used in the typical manner.
// The `build` component is not generally used.
type SemanticVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A major version.<br/>
	// Hedera does not increment this value and retains a `0` value to
	// indicate that API may change for any release.
	// <p>
	// This value SHALL increment for an incompatible API change.<br/>
	Major int32 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	// *
	// A minor version.<br/>
	// Hedera increments this value with each release.<br/>
	// There may be incompatible API changes in any Hedera Services release.
	// <p>
	// This value SHALL increment for backwards-compatible new
	// functionality.
	Minor int32 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	// *
	// A patch version.
	// <p>
	// This value SHALL increment for backwards-compatible bug fixes.
	Patch int32 `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
	// *
	// A pre-release version.
	// <p>
	// This MAY be denoted by appending a hyphen and a series of dot separated
	// identifiers per [Semver Specification](https://semver.org/#spec-item-9);
	// given a string `0.14.0-alpha.1+21AF26D3`, this field would contain
	// 'alpha.1'
	Pre string `protobuf:"bytes,4,opt,name=pre,proto3" json:"pre,omitempty"`
	// *
	// A build version.
	// <p>
	// Build version MAY be denoted by appending a plus sign and a series of
	// dot separated identifiers immediately following the patch or pre-release
	// version per [Semver Specification](https://semver.org/#spec-item-10); so
	// given a string `0.14.0-alpha.1+21AF26D3`, this field
	// would contain '21AF26D3'
	Build string `protobuf:"bytes,5,opt,name=build,proto3" json:"build,omitempty"`
}

func (x *SemanticVersion) Reset() {
	*x = SemanticVersion{}
	mi := &file_basic_types_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemanticVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticVersion) ProtoMessage() {}

func (x *SemanticVersion) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticVersion.ProtoReflect.Descriptor instead.
func (*SemanticVersion) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{31}
}

func (x *SemanticVersion) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *SemanticVersion) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *SemanticVersion) GetPatch() int32 {
	if x != nil {
		return x.Patch
	}
	return 0
}

func (x *SemanticVersion) GetPre() string {
	if x != nil {
		return x.Pre
	}
	return ""
}

func (x *SemanticVersion) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

// *
// A single runtime configuration setting.
//
// Typically a name-value pair, this may also contain a small amount of
// associated data.
type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A name for this setting property.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// A value for this setting property.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// *
	// A small quantity of data associated with this setting.
	// <p>
	// This SHOULD be less than 100 bytes.<br/>
	// If the value is a string, it MUST be encoded UTF-8.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	mi := &file_basic_types_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{32}
}

func (x *Setting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Setting) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Setting) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// *
// Setting values representing a source of runtime configuration information.
type ServicesConfigurationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A List of `Setting` values, typically read from application properties.
	NameValue []*Setting `protobuf:"bytes,1,rep,name=nameValue,proto3" json:"nameValue,omitempty"`
}

func (x *ServicesConfigurationList) Reset() {
	*x = ServicesConfigurationList{}
	mi := &file_basic_types_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServicesConfigurationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesConfigurationList) ProtoMessage() {}

func (x *ServicesConfigurationList) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesConfigurationList.ProtoReflect.Descriptor instead.
func (*ServicesConfigurationList) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{33}
}

func (x *ServicesConfigurationList) GetNameValue() []*Setting {
	if x != nil {
		return x.NameValue
	}
	return nil
}

// *
// An Hedera Token Service token relationship. A token relationship describes
// the connection between an Account and a Token type, including the current
// account balance in that token.
//
// A `TokenRelationship` SHALL contain, for the designated token and enclosing
// account, The account's current balance, whether the account has KYC granted,
// whether the assets are frozen and whether the association was automatic.<br/>
// A `TokenRelationship` MAY also contain the `symbol` and `decimals` values
// copied from the token.<br/>
// `TokenRelationship` entries SHALL be valid only within the context of a
// `GetAccountDetails` query response, or other enclosing message, which
// specifies the account side of the relationship.
type TokenRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A token identifier.
	// <p>
	// This MUST match an existing token that is not deleted.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	// *
	// A token symbol.
	// <p>
	// This MUST match an existing token that is not deleted.<br/>
	// This MUST match the value for the token identified in `tokenId`.
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// *
	// An account balance for this token.
	// <p>
	// For fungible/common tokens this SHALL be the balance that the
	// account holds of that token. The value is provided as an integer amount
	// of the smallest unit of the token (i.e. 10<sup>`-decimals`</sup> whole
	// tokens).<br/>
	// For non-fungible/unique tokens this SHALL be the whole number of
	// unique tokens held by the account for this token type.
	Balance uint64 `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
	// *
	// A KYC status for the account with respect to this token.
	// <p>
	// This may be `KycNotApplicable`, `Granted` or `Revoked` and, if KYC is
	// not supported for this token (e.g. the `kyc_key` of the token is not
	// set), this SHALL be `KycNotApplicable`.
	KycStatus TokenKycStatus `protobuf:"varint,4,opt,name=kycStatus,proto3,enum=proto.TokenKycStatus" json:"kycStatus,omitempty"`
	// *
	// A Freeze status for the account with respect to this token.
	// <p>
	// This value SHALL be one of `FreezeNotApplicable`, `Frozen`
	// or `Unfrozen`.<br/>
	// If the token cannot freeze account assets (e.g. the `freeze_key` of the
	// token is not set), this SHALL be `FreezeNotApplicable`.
	FreezeStatus TokenFreezeStatus `protobuf:"varint,5,opt,name=freezeStatus,proto3,enum=proto.TokenFreezeStatus" json:"freezeStatus,omitempty"`
	// *
	// A maximum "precision" for this token.
	// <p>
	// This value MUST match the `decimals` field of the token identified in
	// the `tokenId` field.<br/>
	// A single whole token SHALL be divided into at most
	// 10<sup>`decimals`</sup> sub-units.
	Decimals uint32 `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// *
	// An automatic association flag.
	// <p>
	// This SHALL be set if the relationship was created implicitly
	// (automatically).<br/>
	// This SHALL be unset if the relationship was created explicitly
	// (manually) via a `TokenAssociate` transaction.
	AutomaticAssociation bool `protobuf:"varint,7,opt,name=automatic_association,json=automaticAssociation,proto3" json:"automatic_association,omitempty"`
}

func (x *TokenRelationship) Reset() {
	*x = TokenRelationship{}
	mi := &file_basic_types_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRelationship) ProtoMessage() {}

func (x *TokenRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRelationship.ProtoReflect.Descriptor instead.
func (*TokenRelationship) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{34}
}

func (x *TokenRelationship) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *TokenRelationship) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenRelationship) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *TokenRelationship) GetKycStatus() TokenKycStatus {
	if x != nil {
		return x.KycStatus
	}
	return TokenKycStatus_KycNotApplicable
}

func (x *TokenRelationship) GetFreezeStatus() TokenFreezeStatus {
	if x != nil {
		return x.FreezeStatus
	}
	return TokenFreezeStatus_FreezeNotApplicable
}

func (x *TokenRelationship) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *TokenRelationship) GetAutomaticAssociation() bool {
	if x != nil {
		return x.AutomaticAssociation
	}
	return false
}

// *
// A number of _transferable units_ of a specified token.
//
// The transferable unit of a token is its smallest denomination, as given by
// the token's `decimals` property. Each minted token contains
// 10<sup>`decimals`</sup> transferable units. For example, we could think of
// the cent as the transferable unit of the US dollar (`decimals=2`); and the
// tinybar as the transferable unit of HBAR (`decimals=8`).
//
// Transferable units are not directly comparable across different tokens.
type TokenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A token identifier.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	// *
	// A number of transferable units of the identified token.
	// <p>
	// For fungible/common tokens this SHALL be the balance, in units of
	// 10<sup>`-decimals`</sup> whole tokens.<br/>
	// For non-fungible/unique tokens, this SHALL be the number of
	// individual unique tokens in this balance.
	Balance uint64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// *
	// A number of "decimals" precision.
	// <p>
	// This MUST match the `decimals` value for the token identified by the
	// `tokenId` field.
	Decimals uint32 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (x *TokenBalance) Reset() {
	*x = TokenBalance{}
	mi := &file_basic_types_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalance) ProtoMessage() {}

func (x *TokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalance.ProtoReflect.Descriptor instead.
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{35}
}

func (x *TokenBalance) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *TokenBalance) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *TokenBalance) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

// *
// A set of token balance values.
//
// Each entry describes the balance the enclosing account holds for a specific
// token. The balance is an amount for a fungible/common token or a count for
// a non-fungible/unique token.
type TokenBalances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A list of token balance values.<br/>
	// Each entry represents a single account balance for a single token.
	TokenBalances []*TokenBalance `protobuf:"bytes,1,rep,name=tokenBalances,proto3" json:"tokenBalances,omitempty"`
}

func (x *TokenBalances) Reset() {
	*x = TokenBalances{}
	mi := &file_basic_types_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenBalances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalances) ProtoMessage() {}

func (x *TokenBalances) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalances.ProtoReflect.Descriptor instead.
func (*TokenBalances) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{36}
}

func (x *TokenBalances) GetTokenBalances() []*TokenBalance {
	if x != nil {
		return x.TokenBalances
	}
	return nil
}

// *
// An association between a token and an account.
//
// An account must be associated with a token before that account can transact
// in (send or receive) that token.
type TokenAssociation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A token identifier for the associated token.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// *
	// An account identifier for the associated account.
	AccountId *AccountID `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *TokenAssociation) Reset() {
	*x = TokenAssociation{}
	mi := &file_basic_types_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenAssociation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAssociation) ProtoMessage() {}

func (x *TokenAssociation) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAssociation.ProtoReflect.Descriptor instead.
func (*TokenAssociation) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{37}
}

func (x *TokenAssociation) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *TokenAssociation) GetAccountId() *AccountID {
	if x != nil {
		return x.AccountId
	}
	return nil
}

// *
// Staking information for an account or a contract.
//
// This is used for responses returned from `CryptoGetInfo` or
// `ContractGetInfo` queries.
type StakingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A flag indicating that the holder of this account has chosen to decline
	// staking rewards.
	DeclineReward bool `protobuf:"varint,1,opt,name=decline_reward,json=declineReward,proto3" json:"decline_reward,omitempty"`
	// *
	// A `Timestamp` of the start time for the latest active staking period.
	// <p>
	// This MUST be a period during which either the staking settings for this
	// account or contract changed or the account or contract received staking
	// rewards, whichever is later. Examples of a change in staking settings
	// include starting staking or changing the staked_node_id.<br/>
	// If this account or contract is not currently staked to a node, then this
	// field SHALL NOT be set.
	StakePeriodStart *Timestamp `protobuf:"bytes,2,opt,name=stake_period_start,json=stakePeriodStart,proto3" json:"stake_period_start,omitempty"`
	// *
	// An amount, in tinybar, to be received in the next reward payout.<br/>
	// Rewards are not paid out immediately; for efficiency reasons rewards are
	// only paid out as part of another transaction involving that account.
	PendingReward int64 `protobuf:"varint,3,opt,name=pending_reward,json=pendingReward,proto3" json:"pending_reward,omitempty"`
	// *
	// A proxy-staked balance.<br/>
	// The total HBAR balance of all accounts that delegate staking to this
	// account or contract.
	StakedToMe int64 `protobuf:"varint,4,opt,name=staked_to_me,json=stakedToMe,proto3" json:"staked_to_me,omitempty"`
	// Types that are assignable to StakedId:
	//
	//	*StakingInfo_StakedAccountId
	//	*StakingInfo_StakedNodeId
	StakedId isStakingInfo_StakedId `protobuf_oneof:"staked_id"`
}

func (x *StakingInfo) Reset() {
	*x = StakingInfo{}
	mi := &file_basic_types_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingInfo) ProtoMessage() {}

func (x *StakingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingInfo.ProtoReflect.Descriptor instead.
func (*StakingInfo) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{38}
}

func (x *StakingInfo) GetDeclineReward() bool {
	if x != nil {
		return x.DeclineReward
	}
	return false
}

func (x *StakingInfo) GetStakePeriodStart() *Timestamp {
	if x != nil {
		return x.StakePeriodStart
	}
	return nil
}

func (x *StakingInfo) GetPendingReward() int64 {
	if x != nil {
		return x.PendingReward
	}
	return 0
}

func (x *StakingInfo) GetStakedToMe() int64 {
	if x != nil {
		return x.StakedToMe
	}
	return 0
}

func (m *StakingInfo) GetStakedId() isStakingInfo_StakedId {
	if m != nil {
		return m.StakedId
	}
	return nil
}

func (x *StakingInfo) GetStakedAccountId() *AccountID {
	if x, ok := x.GetStakedId().(*StakingInfo_StakedAccountId); ok {
		return x.StakedAccountId
	}
	return nil
}

func (x *StakingInfo) GetStakedNodeId() int64 {
	if x, ok := x.GetStakedId().(*StakingInfo_StakedNodeId); ok {
		return x.StakedNodeId
	}
	return 0
}

type isStakingInfo_StakedId interface {
	isStakingInfo_StakedId()
}

type StakingInfo_StakedAccountId struct {
	// *
	// A delegated stake.
	// <p>
	// This account delegates to the indicated account for staking purposes.
	StakedAccountId *AccountID `protobuf:"bytes,5,opt,name=staked_account_id,json=stakedAccountId,proto3,oneof"`
}

type StakingInfo_StakedNodeId struct {
	// *
	// A direct stake.
	// <p>
	// This accounts stakes its balance to the designated node.
	StakedNodeId int64 `protobuf:"varint,6,opt,name=staked_node_id,json=stakedNodeId,proto3,oneof"`
}

func (*StakingInfo_StakedAccountId) isStakingInfo_StakedId() {}

func (*StakingInfo_StakedNodeId) isStakingInfo_StakedId() {}

// *
// A unique, composite, identifier for a pending airdrop.
//
// Each pending airdrop SHALL be uniquely identified by
// a `PendingAirdropId`.<br/>
// A `PendingAirdropId` SHALL be recorded when created and MUST be provided in
// any transaction that would modify that pending airdrop
// (such as a `claimAirdrop` or `cancelAirdrop`).
type PendingAirdropId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A sending account.
	// <p>
	// This is the account that initiated, and SHALL fund,
	// this pending airdrop.<br/>
	// This field is REQUIRED.
	SenderId *AccountID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// *
	// A receiving account.
	// <p>
	// This is the ID of the account that SHALL receive the airdrop.<br/>
	// This field is REQUIRED.
	ReceiverId *AccountID `protobuf:"bytes,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	// Types that are assignable to TokenReference:
	//
	//	*PendingAirdropId_FungibleTokenType
	//	*PendingAirdropId_NonFungibleToken
	TokenReference isPendingAirdropId_TokenReference `protobuf_oneof:"token_reference"`
}

func (x *PendingAirdropId) Reset() {
	*x = PendingAirdropId{}
	mi := &file_basic_types_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingAirdropId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingAirdropId) ProtoMessage() {}

func (x *PendingAirdropId) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingAirdropId.ProtoReflect.Descriptor instead.
func (*PendingAirdropId) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{39}
}

func (x *PendingAirdropId) GetSenderId() *AccountID {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *PendingAirdropId) GetReceiverId() *AccountID {
	if x != nil {
		return x.ReceiverId
	}
	return nil
}

func (m *PendingAirdropId) GetTokenReference() isPendingAirdropId_TokenReference {
	if m != nil {
		return m.TokenReference
	}
	return nil
}

func (x *PendingAirdropId) GetFungibleTokenType() *TokenID {
	if x, ok := x.GetTokenReference().(*PendingAirdropId_FungibleTokenType); ok {
		return x.FungibleTokenType
	}
	return nil
}

func (x *PendingAirdropId) GetNonFungibleToken() *NftID {
	if x, ok := x.GetTokenReference().(*PendingAirdropId_NonFungibleToken); ok {
		return x.NonFungibleToken
	}
	return nil
}

type isPendingAirdropId_TokenReference interface {
	isPendingAirdropId_TokenReference()
}

type PendingAirdropId_FungibleTokenType struct {
	// *
	// A token identifier.<br/>
	// This is the type of token for a fungible/common token airdrop.
	// <p>
	// This field is REQUIRED for a fungible/common token and MUST NOT
	// be used for a non-fungible/unique token.
	FungibleTokenType *TokenID `protobuf:"bytes,3,opt,name=fungible_token_type,json=fungibleTokenType,proto3,oneof"`
}

type PendingAirdropId_NonFungibleToken struct {
	// *
	// The id of a single NFT<br/>
	// This is the type of token for a non-fungible/unique token airdrop
	// and consists of a Token ID and serial number.
	// <p>
	// This field is REQUIRED for a non-fungible/unique token and
	// MUST NOT be used for a fungible/common token.
	NonFungibleToken *NftID `protobuf:"bytes,4,opt,name=non_fungible_token,json=nonFungibleToken,proto3,oneof"`
}

func (*PendingAirdropId_FungibleTokenType) isPendingAirdropId_TokenReference() {}

func (*PendingAirdropId_NonFungibleToken) isPendingAirdropId_TokenReference() {}

// *
// A single pending airdrop value.
//
// This message SHALL record the airdrop amount for a
// fungible/common token.<br/>
// This message SHOULD be null for a non-fungible/unique token.<br/>
// If a non-null `PendingAirdropValue` is set for a non-fungible/unique
// token, the amount field MUST be `0`.
//
// It is RECOMMENDED that implementations store pending airdrop information
// as a key-value map from `PendingAirdropId` to `PendingAirdropValue`, with
// a `null` value used for non-fungible pending airdrops.
type PendingAirdropValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// An amount to transfer for fungible/common tokens.<br/>
	// This is expressed in the smallest available units for that token
	// (i.e. 10<sup>-`decimals`</sup> whole tokens).
	// <p>
	// This amount SHALL be transferred from the sender to the receiver,
	// if claimed.<br/>
	// If the token is a fungible/common token, this value MUST be strictly
	// greater than `0`.<br/>
	// If the token is a non-fungible/unique token, this message SHOULD NOT
	// be set, and if set, this field MUST be `0`.
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PendingAirdropValue) Reset() {
	*x = PendingAirdropValue{}
	mi := &file_basic_types_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingAirdropValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingAirdropValue) ProtoMessage() {}

func (x *PendingAirdropValue) ProtoReflect() protoreflect.Message {
	mi := &file_basic_types_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingAirdropValue.ProtoReflect.Descriptor instead.
func (*PendingAirdropValue) Descriptor() ([]byte, []int) {
	return file_basic_types_proto_rawDescGZIP(), []int{40}
}

func (x *PendingAirdropValue) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_basic_types_proto protoreflect.FileDescriptor

var file_basic_types_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x07, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x22, 0x41, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x6d, 0x4e, 0x75, 0x6d, 0x22, 0x5d, 0x0a, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x4e, 0x75, 0x6d, 0x22, 0x88, 0x01, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x57, 0x0a, 0x05, 0x4e, 0x66, 0x74, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x22, 0x97, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x12,
	0x21, 0x0a, 0x0b, 0x65, 0x76, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x76, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x5d,
	0x0a, 0x07, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x75,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x22, 0x66, 0x0a,
	0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d,
	0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d,
	0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2e, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x22, 0x78, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x22, 0x4c, 0x0a,
	0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x0b,
	0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0f, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x22, 0xf0, 0x01, 0x0a,
	0x11, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x44, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0c,
	0x6e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x66, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x0c, 0x6e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x22,
	0x4a, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x80, 0x03, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x64, 0x32, 0x35,
	0x35, 0x31, 0x39, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x65, 0x64, 0x32,
	0x35, 0x35, 0x31, 0x39, 0x12, 0x1f, 0x0a, 0x08, 0x52, 0x53, 0x41, 0x5f, 0x33, 0x30, 0x37, 0x32,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x07, 0x52, 0x53,
	0x41, 0x33, 0x30, 0x37, 0x32, 0x12, 0x21, 0x0a, 0x09, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x33,
	0x38, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x08,
	0x45, 0x43, 0x44, 0x53, 0x41, 0x33, 0x38, 0x34, 0x12, 0x39, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x0f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x73, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36,
	0x6b, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x45, 0x43, 0x44, 0x53,
	0x41, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x12, 0x4b, 0x0a, 0x17, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x48, 0x00,
	0x52, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x50,
	0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0x29, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x09,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x64, 0x32, 0x35, 0x35,
	0x31, 0x39, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x65, 0x64, 0x32, 0x35,
	0x35, 0x31, 0x39, 0x12, 0x1b, 0x0a, 0x08, 0x52, 0x53, 0x41, 0x5f, 0x33, 0x30, 0x37, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x52, 0x53, 0x41, 0x33, 0x30, 0x37, 0x32,
	0x12, 0x1d, 0x0a, 0x09, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x33, 0x38, 0x34, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x45, 0x43, 0x44, 0x53, 0x41, 0x33, 0x38, 0x34, 0x12,
	0x4b, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x12, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x0d,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x73, 0x69, 0x67, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22,
	0x39, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x04, 0x73, 0x69, 0x67, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xe9, 0x01, 0x0a, 0x0d, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x1c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1a,
	0x0a, 0x07, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x07, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x12, 0x1f, 0x0a, 0x08, 0x52, 0x53,
	0x41, 0x5f, 0x33, 0x30, 0x37, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x07, 0x52, 0x53, 0x41, 0x33, 0x30, 0x37, 0x32, 0x12, 0x21, 0x0a, 0x09, 0x45,
	0x43, 0x44, 0x53, 0x41, 0x5f, 0x33, 0x38, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x08, 0x45, 0x43, 0x44, 0x53, 0x41, 0x33, 0x38, 0x34, 0x12, 0x29,
	0x0a, 0x0f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x73, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b,
	0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x45, 0x43, 0x44, 0x53, 0x41,
	0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x3e, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x50, 0x61, 0x69,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x73,
	0x69, 0x67, 0x50, 0x61, 0x69, 0x72, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x70, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x62, 0x70, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x70,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x70, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x62, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x62, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x62, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x62, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67,
	0x61, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x74, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x70, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x62, 0x70, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x62, 0x70, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x62, 0x70, 0x72, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x64, 0x65, 0x72, 0x61, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x13, 0x68, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x2c, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x66,
	0x65, 0x65, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x36, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x65, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0b,
	0x46, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x19,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x65,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x12, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x46, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3c, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x46, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x46, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x68, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x34, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x34,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x72,
	0x74, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x52,
	0x53, 0x41, 0x5f, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x43, 0x65, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x65, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x40,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x22, 0x47, 0x0a, 0x0f,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x12,
	0x34, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7b, 0x0a, 0x0f, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x22, 0x47, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x19, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x11, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x28, 0x0a, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6b, 0x79, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x6b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a,
	0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x0c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x22, 0x4a, 0x0a, 0x0d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x3e, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x87, 0x02,
	0x0a, 0x10, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x44, 0x48, 0x00, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x75,
	0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x66, 0x74, 0x49, 0x44,
	0x48, 0x00, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x2d, 0x0a, 0x13, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x22, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x48, 0x41, 0x32, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x00, 0x2a, 0x39, 0x0a, 0x09, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x55, 0x4e, 0x47, 0x49,
	0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x4e, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x49,
	0x51, 0x55, 0x45, 0x10, 0x01, 0x2a, 0x97, 0x02, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x47, 0x49, 0x42, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f,
	0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x45,
	0x45, 0x53, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x4f,
	0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55,
	0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x45,
	0x45, 0x53, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x4f, 0x50, 0x49, 0x43,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x10, 0x07, 0x2a,
	0x2b, 0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x3c, 0x0a, 0x12,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x46, 0x0a, 0x11, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x6e, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x10, 0x02, 0x2a, 0x40, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4b, 0x79, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x79, 0x63, 0x4e, 0x6f, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x64, 0x10, 0x02, 0x2a, 0x44, 0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x8d, 0x10, 0x0a, 0x13, 0x48,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x11, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64,
	0x64, 0x4c, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x12,
	0x1c, 0x0a, 0x14, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x06, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x41,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x10,
	0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x11,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x49, 0x44, 0x10, 0x13, 0x12, 0x0c,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x11,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x10, 0x15, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x18, 0x0a, 0x10, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x10, 0x16, 0x1a, 0x02, 0x08,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10,
	0x19, 0x12, 0x1a, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x10, 0x1a, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x1b, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x1c, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x6e, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x10, 0x1d, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x10, 0x21, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x23, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x10, 0x32, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x10, 0x33, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x10, 0x34, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x35, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x36, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x10, 0x37, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x38, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10,
	0x3a, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x3b, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x3c, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x4b, 0x79, 0x63, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x3d, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4b, 0x79,
	0x63, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x3e, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x3f, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x40,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x10, 0x41, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x10, 0x42, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69,
	0x70, 0x65, 0x10, 0x43, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10,
	0x44, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10,
	0x45, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x10, 0x46, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x47, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x10, 0x48, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x49,
	0x12, 0x1f, 0x0a, 0x17, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x10, 0x4a, 0x1a, 0x02, 0x08,
	0x01, 0x12, 0x17, 0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x10, 0x4b, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x10, 0x4c,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x4d, 0x12, 0x1f, 0x0a, 0x17,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x4e, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x4f, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x10, 0x50, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x51, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x10, 0x52, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x10, 0x53, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x54, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x55, 0x12, 0x0c, 0x0a, 0x08, 0x55,
	0x74, 0x69, 0x6c, 0x50, 0x72, 0x6e, 0x67, 0x10, 0x56, 0x12, 0x20, 0x0a, 0x18, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0x57, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x73, 0x10, 0x58,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x59,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x5a,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x5b,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x10,
	0x5c, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f,
	0x70, 0x10, 0x5d, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x10, 0x5e, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70,
	0x10, 0x5f, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x64, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x69,
	0x6e, 0x74, 0x73, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x56, 0x6f, 0x74, 0x65, 0x10, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10,
	0x67, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x68, 0x12,
	0x1e, 0x0a, 0x1a, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4b,
	0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x69, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x56,
	0x6f, 0x74, 0x65, 0x10, 0x6a, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x72, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x6b, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x74, 0x6f,
	0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x10, 0x6c, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f,
	0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61,
	0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_basic_types_proto_rawDescOnce sync.Once
	file_basic_types_proto_rawDescData = file_basic_types_proto_rawDesc
)

func file_basic_types_proto_rawDescGZIP() []byte {
	file_basic_types_proto_rawDescOnce.Do(func() {
		file_basic_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_basic_types_proto_rawDescData)
	})
	return file_basic_types_proto_rawDescData
}

var file_basic_types_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_basic_types_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_basic_types_proto_goTypes = []any{
	(BlockHashAlgorithm)(0),           // 0: proto.BlockHashAlgorithm
	(TokenType)(0),                    // 1: proto.TokenType
	(SubType)(0),                      // 2: proto.SubType
	(TokenSupplyType)(0),              // 3: proto.TokenSupplyType
	(TokenKeyValidation)(0),           // 4: proto.TokenKeyValidation
	(TokenFreezeStatus)(0),            // 5: proto.TokenFreezeStatus
	(TokenKycStatus)(0),               // 6: proto.TokenKycStatus
	(TokenPauseStatus)(0),             // 7: proto.TokenPauseStatus
	(HederaFunctionality)(0),          // 8: proto.HederaFunctionality
	(*ShardID)(nil),                   // 9: proto.ShardID
	(*RealmID)(nil),                   // 10: proto.RealmID
	(*TokenID)(nil),                   // 11: proto.TokenID
	(*AccountID)(nil),                 // 12: proto.AccountID
	(*NftID)(nil),                     // 13: proto.NftID
	(*FileID)(nil),                    // 14: proto.FileID
	(*ContractID)(nil),                // 15: proto.ContractID
	(*TopicID)(nil),                   // 16: proto.TopicID
	(*ScheduleID)(nil),                // 17: proto.ScheduleID
	(*TransactionID)(nil),             // 18: proto.TransactionID
	(*AccountAmount)(nil),             // 19: proto.AccountAmount
	(*TransferList)(nil),              // 20: proto.TransferList
	(*NftTransfer)(nil),               // 21: proto.NftTransfer
	(*TokenTransferList)(nil),         // 22: proto.TokenTransferList
	(*Fraction)(nil),                  // 23: proto.Fraction
	(*Key)(nil),                       // 24: proto.Key
	(*ThresholdKey)(nil),              // 25: proto.ThresholdKey
	(*KeyList)(nil),                   // 26: proto.KeyList
	(*Signature)(nil),                 // 27: proto.Signature
	(*ThresholdSignature)(nil),        // 28: proto.ThresholdSignature
	(*SignatureList)(nil),             // 29: proto.SignatureList
	(*SignaturePair)(nil),             // 30: proto.SignaturePair
	(*SignatureMap)(nil),              // 31: proto.SignatureMap
	(*FeeComponents)(nil),             // 32: proto.FeeComponents
	(*TransactionFeeSchedule)(nil),    // 33: proto.TransactionFeeSchedule
	(*FeeData)(nil),                   // 34: proto.FeeData
	(*FeeSchedule)(nil),               // 35: proto.FeeSchedule
	(*CurrentAndNextFeeSchedule)(nil), // 36: proto.CurrentAndNextFeeSchedule
	(*ServiceEndpoint)(nil),           // 37: proto.ServiceEndpoint
	(*NodeAddress)(nil),               // 38: proto.NodeAddress
	(*NodeAddressBook)(nil),           // 39: proto.NodeAddressBook
	(*SemanticVersion)(nil),           // 40: proto.SemanticVersion
	(*Setting)(nil),                   // 41: proto.Setting
	(*ServicesConfigurationList)(nil), // 42: proto.ServicesConfigurationList
	(*TokenRelationship)(nil),         // 43: proto.TokenRelationship
	(*TokenBalance)(nil),              // 44: proto.TokenBalance
	(*TokenBalances)(nil),             // 45: proto.TokenBalances
	(*TokenAssociation)(nil),          // 46: proto.TokenAssociation
	(*StakingInfo)(nil),               // 47: proto.StakingInfo
	(*PendingAirdropId)(nil),          // 48: proto.PendingAirdropId
	(*PendingAirdropValue)(nil),       // 49: proto.PendingAirdropValue
	(*Timestamp)(nil),                 // 50: proto.Timestamp
	(*wrapperspb.UInt32Value)(nil),    // 51: google.protobuf.UInt32Value
	(*TimestampSeconds)(nil),          // 52: proto.TimestampSeconds
}
var file_basic_types_proto_depIdxs = []int32{
	11, // 0: proto.NftID.token_ID:type_name -> proto.TokenID
	50, // 1: proto.TransactionID.transactionValidStart:type_name -> proto.Timestamp
	12, // 2: proto.TransactionID.accountID:type_name -> proto.AccountID
	12, // 3: proto.AccountAmount.accountID:type_name -> proto.AccountID
	19, // 4: proto.TransferList.accountAmounts:type_name -> proto.AccountAmount
	12, // 5: proto.NftTransfer.senderAccountID:type_name -> proto.AccountID
	12, // 6: proto.NftTransfer.receiverAccountID:type_name -> proto.AccountID
	11, // 7: proto.TokenTransferList.token:type_name -> proto.TokenID
	19, // 8: proto.TokenTransferList.transfers:type_name -> proto.AccountAmount
	21, // 9: proto.TokenTransferList.nftTransfers:type_name -> proto.NftTransfer
	51, // 10: proto.TokenTransferList.expected_decimals:type_name -> google.protobuf.UInt32Value
	15, // 11: proto.Key.contractID:type_name -> proto.ContractID
	25, // 12: proto.Key.thresholdKey:type_name -> proto.ThresholdKey
	26, // 13: proto.Key.keyList:type_name -> proto.KeyList
	15, // 14: proto.Key.delegatable_contract_id:type_name -> proto.ContractID
	26, // 15: proto.ThresholdKey.keys:type_name -> proto.KeyList
	24, // 16: proto.KeyList.keys:type_name -> proto.Key
	28, // 17: proto.Signature.thresholdSignature:type_name -> proto.ThresholdSignature
	29, // 18: proto.Signature.signatureList:type_name -> proto.SignatureList
	29, // 19: proto.ThresholdSignature.sigs:type_name -> proto.SignatureList
	27, // 20: proto.SignatureList.sigs:type_name -> proto.Signature
	30, // 21: proto.SignatureMap.sigPair:type_name -> proto.SignaturePair
	8,  // 22: proto.TransactionFeeSchedule.hederaFunctionality:type_name -> proto.HederaFunctionality
	34, // 23: proto.TransactionFeeSchedule.feeData:type_name -> proto.FeeData
	34, // 24: proto.TransactionFeeSchedule.fees:type_name -> proto.FeeData
	32, // 25: proto.FeeData.nodedata:type_name -> proto.FeeComponents
	32, // 26: proto.FeeData.networkdata:type_name -> proto.FeeComponents
	32, // 27: proto.FeeData.servicedata:type_name -> proto.FeeComponents
	2,  // 28: proto.FeeData.subType:type_name -> proto.SubType
	33, // 29: proto.FeeSchedule.transactionFeeSchedule:type_name -> proto.TransactionFeeSchedule
	52, // 30: proto.FeeSchedule.expiryTime:type_name -> proto.TimestampSeconds
	35, // 31: proto.CurrentAndNextFeeSchedule.currentFeeSchedule:type_name -> proto.FeeSchedule
	35, // 32: proto.CurrentAndNextFeeSchedule.nextFeeSchedule:type_name -> proto.FeeSchedule
	12, // 33: proto.NodeAddress.nodeAccountId:type_name -> proto.AccountID
	37, // 34: proto.NodeAddress.serviceEndpoint:type_name -> proto.ServiceEndpoint
	38, // 35: proto.NodeAddressBook.nodeAddress:type_name -> proto.NodeAddress
	41, // 36: proto.ServicesConfigurationList.nameValue:type_name -> proto.Setting
	11, // 37: proto.TokenRelationship.tokenId:type_name -> proto.TokenID
	6,  // 38: proto.TokenRelationship.kycStatus:type_name -> proto.TokenKycStatus
	5,  // 39: proto.TokenRelationship.freezeStatus:type_name -> proto.TokenFreezeStatus
	11, // 40: proto.TokenBalance.tokenId:type_name -> proto.TokenID
	44, // 41: proto.TokenBalances.tokenBalances:type_name -> proto.TokenBalance
	11, // 42: proto.TokenAssociation.token_id:type_name -> proto.TokenID
	12, // 43: proto.TokenAssociation.account_id:type_name -> proto.AccountID
	50, // 44: proto.StakingInfo.stake_period_start:type_name -> proto.Timestamp
	12, // 45: proto.StakingInfo.staked_account_id:type_name -> proto.AccountID
	12, // 46: proto.PendingAirdropId.sender_id:type_name -> proto.AccountID
	12, // 47: proto.PendingAirdropId.receiver_id:type_name -> proto.AccountID
	11, // 48: proto.PendingAirdropId.fungible_token_type:type_name -> proto.TokenID
	13, // 49: proto.PendingAirdropId.non_fungible_token:type_name -> proto.NftID
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_basic_types_proto_init() }
func file_basic_types_proto_init() {
	if File_basic_types_proto != nil {
		return
	}
	file_timestamp_proto_init()
	file_basic_types_proto_msgTypes[3].OneofWrappers = []any{
		(*AccountID_AccountNum)(nil),
		(*AccountID_Alias)(nil),
	}
	file_basic_types_proto_msgTypes[6].OneofWrappers = []any{
		(*ContractID_ContractNum)(nil),
		(*ContractID_EvmAddress)(nil),
	}
	file_basic_types_proto_msgTypes[15].OneofWrappers = []any{
		(*Key_ContractID)(nil),
		(*Key_Ed25519)(nil),
		(*Key_RSA_3072)(nil),
		(*Key_ECDSA_384)(nil),
		(*Key_ThresholdKey)(nil),
		(*Key_KeyList)(nil),
		(*Key_ECDSASecp256K1)(nil),
		(*Key_DelegatableContractId)(nil),
	}
	file_basic_types_proto_msgTypes[18].OneofWrappers = []any{
		(*Signature_Contract)(nil),
		(*Signature_Ed25519)(nil),
		(*Signature_RSA_3072)(nil),
		(*Signature_ECDSA_384)(nil),
		(*Signature_ThresholdSignature)(nil),
		(*Signature_SignatureList)(nil),
	}
	file_basic_types_proto_msgTypes[21].OneofWrappers = []any{
		(*SignaturePair_Contract)(nil),
		(*SignaturePair_Ed25519)(nil),
		(*SignaturePair_RSA_3072)(nil),
		(*SignaturePair_ECDSA_384)(nil),
		(*SignaturePair_ECDSASecp256K1)(nil),
	}
	file_basic_types_proto_msgTypes[38].OneofWrappers = []any{
		(*StakingInfo_StakedAccountId)(nil),
		(*StakingInfo_StakedNodeId)(nil),
	}
	file_basic_types_proto_msgTypes[39].OneofWrappers = []any{
		(*PendingAirdropId_FungibleTokenType)(nil),
		(*PendingAirdropId_NonFungibleToken)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_basic_types_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_basic_types_proto_goTypes,
		DependencyIndexes: file_basic_types_proto_depIdxs,
		EnumInfos:         file_basic_types_proto_enumTypes,
		MessageInfos:      file_basic_types_proto_msgTypes,
	}.Build()
	File_basic_types_proto = out.File
	file_basic_types_proto_rawDesc = nil
	file_basic_types_proto_goTypes = nil
	file_basic_types_proto_depIdxs = nil
}
