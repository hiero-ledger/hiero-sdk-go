//*
// # Ethereum Call
// Make an Ethereum transaction "call" with all data in Ethereum formats,
// including the contract alias. Call data may be in the transaction,
// or stored within an Hedera File.<br/>
// The caller MAY offer additional gas above what is offered in the call
// data, but MAY be charged up to 80% of that value if the amount required
// is less than this "floor" amount.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: ethereum_transaction.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A transaction in Ethereum format.<br/>
// Make an Ethereum transaction "call" with all data in Ethereum formats,
// including the contract alias. Call data may be in the transaction, or
// stored within an Hedera File.
//
// The caller MAY offer additional gas above what is offered in the call data,
// but MAY be charged up to 80% of that value if the amount required is less
// than this "floor" amount.
//
// ### Block Stream Effects
// An `EthereumOutput` message SHALL be emitted for each transaction.
type EthereumTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The raw Ethereum transaction data.
	// <p>
	// This transaction MUST be RLP encoded.<br/>
	// This SHALL be the complete transaction data unless the `call_data`
	// field is set.<br/>
	// If `call_data` is set, this field SHALL be modified to replace the
	// `callData` element with the content of the referenced file.<br/>
	// The transaction signature SHALL be validated after `callData` is
	// complete, if necessary.
	EthereumData []byte `protobuf:"bytes,1,opt,name=ethereum_data,json=ethereumData,proto3" json:"ethereum_data,omitempty"`
	// *
	// The `callData` for the Ethereum transaction.
	// <p>
	// If this field is set, the data in the `ethereum_data` field SHALL be
	// re-written to replace the `callData` element with the contents of this
	// file at time of execution.<br/>
	// The Ethereum transaction MUST be "rehydrated" with this modified
	// `callData` before signature validation MAY be performed.
	CallData *FileID `protobuf:"bytes,2,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	// *
	// A maximum amount of "gas" offered to pay the Ethereum transaction costs.
	// <p>
	// This gas offered is in addition to any gas supplied with the Ethereum
	// transaction as declared in the `ethereum_data`.<br/>
	// In most circumstances the account with an alias matching the public
	// key available from the Ethereum transaction signature offers sufficient
	// gas to power the transaction, but in some cases it MAY be desirable
	// for the account submitting this transaction to either supplement
	// or entirely fund the transaction cost.<br/>
	// The amount of gas offered here SHALL be used to pay for
	// transaction costs _in excess_ of any gas offered within
	// the Ethereum transaction.<br/>
	// If the gas offered within the Ethereum transaction is sufficient
	// for all costs, the gas offered in this field SHALL NOT be expended.<br/>
	// Regardless of actual transaction cost, the payer for this transaction
	// SHALL NOT be charged more gas than the amount offered here.<br/>
	// If the sum of both gas amounts is not sufficient to pay for the
	// transaction, the entire total amount of gas offered SHALL be expended,
	// the transaction SHALL fail, and the response code `INSUFFICIENT_GAS`
	// SHALL be set.<br/>
	// If any amount of gas is charged to the payer of this transaction,
	// at least 80% of the value offered in this field SHALL be charged
	// as a minimum fee.<br/>
	// If the amount of gas authorized in the Ethereum transaction data is `0`,
	// then the payer of this transaction SHALL be charged the entire cost of
	// the Ethereum transaction, subject to the limit set in this field.
	MaxGasAllowance int64 `protobuf:"varint,3,opt,name=max_gas_allowance,json=maxGasAllowance,proto3" json:"max_gas_allowance,omitempty"`
}

func (x *EthereumTransactionBody) Reset() {
	*x = EthereumTransactionBody{}
	mi := &file_ethereum_transaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionBody) ProtoMessage() {}

func (x *EthereumTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_transaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionBody.ProtoReflect.Descriptor instead.
func (*EthereumTransactionBody) Descriptor() ([]byte, []int) {
	return file_ethereum_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *EthereumTransactionBody) GetEthereumData() []byte {
	if x != nil {
		return x.EthereumData
	}
	return nil
}

func (x *EthereumTransactionBody) GetCallData() *FileID {
	if x != nil {
		return x.CallData
	}
	return nil
}

func (x *EthereumTransactionBody) GetMaxGasAllowance() int64 {
	if x != nil {
		return x.MaxGasAllowance
	}
	return 0
}

var File_ethereum_transaction_proto protoreflect.FileDescriptor

var file_ethereum_transaction_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x47, 0x61, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73,
	0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ethereum_transaction_proto_rawDescOnce sync.Once
	file_ethereum_transaction_proto_rawDescData = file_ethereum_transaction_proto_rawDesc
)

func file_ethereum_transaction_proto_rawDescGZIP() []byte {
	file_ethereum_transaction_proto_rawDescOnce.Do(func() {
		file_ethereum_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_ethereum_transaction_proto_rawDescData)
	})
	return file_ethereum_transaction_proto_rawDescData
}

var file_ethereum_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ethereum_transaction_proto_goTypes = []any{
	(*EthereumTransactionBody)(nil), // 0: proto.EthereumTransactionBody
	(*FileID)(nil),                  // 1: proto.FileID
}
var file_ethereum_transaction_proto_depIdxs = []int32{
	1, // 0: proto.EthereumTransactionBody.call_data:type_name -> proto.FileID
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ethereum_transaction_proto_init() }
func file_ethereum_transaction_proto_init() {
	if File_ethereum_transaction_proto != nil {
		return
	}
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ethereum_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ethereum_transaction_proto_goTypes,
		DependencyIndexes: file_ethereum_transaction_proto_depIdxs,
		MessageInfos:      file_ethereum_transaction_proto_msgTypes,
	}.Build()
	File_ethereum_transaction_proto = out.File
	file_ethereum_transaction_proto_rawDesc = nil
	file_ethereum_transaction_proto_goTypes = nil
	file_ethereum_transaction_proto_depIdxs = nil
}
