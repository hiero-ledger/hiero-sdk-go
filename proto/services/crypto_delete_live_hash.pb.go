//*
// # Delete Live Hash
// Dissociate a specific live hash from a specified account.
//
// > Important
// >> This transaction is obsolete and not supported.<br/>
// >> Any transaction of this type that is submitted SHALL fail with a `PRE_CHECK` result
// >> of `NOT_SUPPORTED`.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: crypto_delete_live_hash.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Delete a specific live hash associated to a given account.
//
// This transaction MUST be signed by either the key of the associated account,
// or at least one of the keys listed in the live hash.
//
// ### Block Stream Effects
// None
type CryptoDeleteLiveHashTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// An account associated to a live hash.
	AccountOfLiveHash *AccountID `protobuf:"bytes,1,opt,name=accountOfLiveHash,proto3" json:"accountOfLiveHash,omitempty"`
	// *
	// The SHA-384 value of a specific live hash to delete.
	LiveHashToDelete []byte `protobuf:"bytes,2,opt,name=liveHashToDelete,proto3" json:"liveHashToDelete,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CryptoDeleteLiveHashTransactionBody) Reset() {
	*x = CryptoDeleteLiveHashTransactionBody{}
	mi := &file_crypto_delete_live_hash_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptoDeleteLiveHashTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoDeleteLiveHashTransactionBody) ProtoMessage() {}

func (x *CryptoDeleteLiveHashTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_delete_live_hash_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoDeleteLiveHashTransactionBody.ProtoReflect.Descriptor instead.
func (*CryptoDeleteLiveHashTransactionBody) Descriptor() ([]byte, []int) {
	return file_crypto_delete_live_hash_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoDeleteLiveHashTransactionBody) GetAccountOfLiveHash() *AccountID {
	if x != nil {
		return x.AccountOfLiveHash
	}
	return nil
}

func (x *CryptoDeleteLiveHashTransactionBody) GetLiveHashToDelete() []byte {
	if x != nil {
		return x.LiveHashToDelete
	}
	return nil
}

var File_crypto_delete_live_hash_proto protoreflect.FileDescriptor

const file_crypto_delete_live_hash_proto_rawDesc = "" +
	"\n" +
	"\x1dcrypto_delete_live_hash.proto\x12\x05proto\x1a\x11basic_types.proto\"\x91\x01\n" +
	"#CryptoDeleteLiveHashTransactionBody\x12>\n" +
	"\x11accountOfLiveHash\x18\x01 \x01(\v2\x10.proto.AccountIDR\x11accountOfLiveHash\x12*\n" +
	"\x10liveHashToDelete\x18\x02 \x01(\fR\x10liveHashToDeleteB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_crypto_delete_live_hash_proto_rawDescOnce sync.Once
	file_crypto_delete_live_hash_proto_rawDescData []byte
)

func file_crypto_delete_live_hash_proto_rawDescGZIP() []byte {
	file_crypto_delete_live_hash_proto_rawDescOnce.Do(func() {
		file_crypto_delete_live_hash_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_crypto_delete_live_hash_proto_rawDesc), len(file_crypto_delete_live_hash_proto_rawDesc)))
	})
	return file_crypto_delete_live_hash_proto_rawDescData
}

var file_crypto_delete_live_hash_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_crypto_delete_live_hash_proto_goTypes = []any{
	(*CryptoDeleteLiveHashTransactionBody)(nil), // 0: proto.CryptoDeleteLiveHashTransactionBody
	(*AccountID)(nil), // 1: proto.AccountID
}
var file_crypto_delete_live_hash_proto_depIdxs = []int32{
	1, // 0: proto.CryptoDeleteLiveHashTransactionBody.accountOfLiveHash:type_name -> proto.AccountID
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_crypto_delete_live_hash_proto_init() }
func file_crypto_delete_live_hash_proto_init() {
	if File_crypto_delete_live_hash_proto != nil {
		return
	}
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_crypto_delete_live_hash_proto_rawDesc), len(file_crypto_delete_live_hash_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_crypto_delete_live_hash_proto_goTypes,
		DependencyIndexes: file_crypto_delete_live_hash_proto_depIdxs,
		MessageInfos:      file_crypto_delete_live_hash_proto_msgTypes,
	}.Build()
	File_crypto_delete_live_hash_proto = out.File
	file_crypto_delete_live_hash_proto_goTypes = nil
	file_crypto_delete_live_hash_proto_depIdxs = nil
}
