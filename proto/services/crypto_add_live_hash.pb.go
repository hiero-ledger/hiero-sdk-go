//*
// # Add Live Hash
// Associate content to an account via a SHA-384 hash.
//
// > Important
// >> This transaction is obsolete and not supported.<br/>
// >> Any transaction of this type that is submitted SHALL fail
// >> with a `PRE_CHECK` result of `NOT_SUPPORTED`.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: crypto_add_live_hash.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A Live Hash value associating some item of content to an account.
//
// This message represents a desired entry in the ledger for a SHA-384
// hash of some content, an associated specific account, a list of authorized
// keys, and a duration the live hash is "valid".
type LiveHash struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// An account associated via this live hash to the hashed content.
	AccountId *AccountID `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// *
	// A SHA-384 hash of some content that is associated to the account
	// or account holder.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// *
	// A list of keys, all of which MUST sign the transaction to add the
	// live hash.<br/>
	// Any one of these keys may, however, remove the live hash to revoke
	// the association.
	Keys *KeyList `protobuf:"bytes,3,opt,name=keys,proto3" json:"keys,omitempty"`
	// *
	// A duration describing how long this Live Hash SHALL remain valid.<br/>
	// A Live Hash SHOULD NOT be relied upon after this duration has elapsed.
	Duration      *Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveHash) Reset() {
	*x = LiveHash{}
	mi := &file_crypto_add_live_hash_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveHash) ProtoMessage() {}

func (x *LiveHash) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_add_live_hash_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveHash.ProtoReflect.Descriptor instead.
func (*LiveHash) Descriptor() ([]byte, []int) {
	return file_crypto_add_live_hash_proto_rawDescGZIP(), []int{0}
}

func (x *LiveHash) GetAccountId() *AccountID {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *LiveHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *LiveHash) GetKeys() *KeyList {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *LiveHash) GetDuration() *Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// *
// Add a hash value to the ledger and associate it with an account.
//
// Create an entry in the ledger for a SHA-384 hash of some content, and
// associate that with a specific account.  This is sometimes used to associate
// a credential or certificate with an account as a public record.<br/>
// The entry created is also associated with a list of keys, all of which
// MUST sign this transaction.<br/>
// The account key for the associated account MUST sign this transaction.<br/>
//
// The live hash, once created, MAY be removed from the ledger with one
// or more signatures.
// - The account key of the account associated to the live hash.
// - Any one key from the key list in the live hash entry.
// - Any combination of keys from the key list in the live hash entry.
type CryptoAddLiveHashTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A Live Hash to be added to the ledger and associated with
	// the identified account.
	LiveHash      *LiveHash `protobuf:"bytes,3,opt,name=liveHash,proto3" json:"liveHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CryptoAddLiveHashTransactionBody) Reset() {
	*x = CryptoAddLiveHashTransactionBody{}
	mi := &file_crypto_add_live_hash_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptoAddLiveHashTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoAddLiveHashTransactionBody) ProtoMessage() {}

func (x *CryptoAddLiveHashTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_add_live_hash_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoAddLiveHashTransactionBody.ProtoReflect.Descriptor instead.
func (*CryptoAddLiveHashTransactionBody) Descriptor() ([]byte, []int) {
	return file_crypto_add_live_hash_proto_rawDescGZIP(), []int{1}
}

func (x *CryptoAddLiveHashTransactionBody) GetLiveHash() *LiveHash {
	if x != nil {
		return x.LiveHash
	}
	return nil
}

var File_crypto_add_live_hash_proto protoreflect.FileDescriptor

const file_crypto_add_live_hash_proto_rawDesc = "" +
	"\n" +
	"\x1acrypto_add_live_hash.proto\x12\x05proto\x1a\x11basic_types.proto\x1a\x0eduration.proto\"\x9f\x01\n" +
	"\bLiveHash\x12.\n" +
	"\taccountId\x18\x01 \x01(\v2\x10.proto.AccountIDR\taccountId\x12\x12\n" +
	"\x04hash\x18\x02 \x01(\fR\x04hash\x12\"\n" +
	"\x04keys\x18\x03 \x01(\v2\x0e.proto.KeyListR\x04keys\x12+\n" +
	"\bduration\x18\x05 \x01(\v2\x0f.proto.DurationR\bduration\"O\n" +
	" CryptoAddLiveHashTransactionBody\x12+\n" +
	"\bliveHash\x18\x03 \x01(\v2\x0f.proto.LiveHashR\bliveHashB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_crypto_add_live_hash_proto_rawDescOnce sync.Once
	file_crypto_add_live_hash_proto_rawDescData []byte
)

func file_crypto_add_live_hash_proto_rawDescGZIP() []byte {
	file_crypto_add_live_hash_proto_rawDescOnce.Do(func() {
		file_crypto_add_live_hash_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_crypto_add_live_hash_proto_rawDesc), len(file_crypto_add_live_hash_proto_rawDesc)))
	})
	return file_crypto_add_live_hash_proto_rawDescData
}

var file_crypto_add_live_hash_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_crypto_add_live_hash_proto_goTypes = []any{
	(*LiveHash)(nil),                         // 0: proto.LiveHash
	(*CryptoAddLiveHashTransactionBody)(nil), // 1: proto.CryptoAddLiveHashTransactionBody
	(*AccountID)(nil),                        // 2: proto.AccountID
	(*KeyList)(nil),                          // 3: proto.KeyList
	(*Duration)(nil),                         // 4: proto.Duration
}
var file_crypto_add_live_hash_proto_depIdxs = []int32{
	2, // 0: proto.LiveHash.accountId:type_name -> proto.AccountID
	3, // 1: proto.LiveHash.keys:type_name -> proto.KeyList
	4, // 2: proto.LiveHash.duration:type_name -> proto.Duration
	0, // 3: proto.CryptoAddLiveHashTransactionBody.liveHash:type_name -> proto.LiveHash
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_crypto_add_live_hash_proto_init() }
func file_crypto_add_live_hash_proto_init() {
	if File_crypto_add_live_hash_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_duration_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_crypto_add_live_hash_proto_rawDesc), len(file_crypto_add_live_hash_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_crypto_add_live_hash_proto_goTypes,
		DependencyIndexes: file_crypto_add_live_hash_proto_depIdxs,
		MessageInfos:      file_crypto_add_live_hash_proto_msgTypes,
	}.Build()
	File_crypto_add_live_hash_proto = out.File
	file_crypto_add_live_hash_proto_goTypes = nil
	file_crypto_add_live_hash_proto_depIdxs = nil
}
