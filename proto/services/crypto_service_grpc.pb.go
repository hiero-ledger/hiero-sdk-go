//*
// # Crypto Service
// A service defining transactions and queries related to accounts.
//
// This includes transactions for HBAR transfers and balance queries as well as
// transactions to manage "allowances" which permit a third party to spend a
// portion of the HBAR balance in an account.<br/>
// Basic account, record, and receipt queries are also defined in this service.
//
// Transactions and queries relating to tokens _other than HBAR_ are defined
// in the Token Service.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: crypto_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CryptoService_CreateAccount_FullMethodName          = "/proto.CryptoService/createAccount"
	CryptoService_UpdateAccount_FullMethodName          = "/proto.CryptoService/updateAccount"
	CryptoService_CryptoTransfer_FullMethodName         = "/proto.CryptoService/cryptoTransfer"
	CryptoService_CryptoDelete_FullMethodName           = "/proto.CryptoService/cryptoDelete"
	CryptoService_ApproveAllowances_FullMethodName      = "/proto.CryptoService/approveAllowances"
	CryptoService_DeleteAllowances_FullMethodName       = "/proto.CryptoService/deleteAllowances"
	CryptoService_AddLiveHash_FullMethodName            = "/proto.CryptoService/addLiveHash"
	CryptoService_DeleteLiveHash_FullMethodName         = "/proto.CryptoService/deleteLiveHash"
	CryptoService_GetLiveHash_FullMethodName            = "/proto.CryptoService/getLiveHash"
	CryptoService_GetAccountRecords_FullMethodName      = "/proto.CryptoService/getAccountRecords"
	CryptoService_CryptoGetBalance_FullMethodName       = "/proto.CryptoService/cryptoGetBalance"
	CryptoService_GetAccountInfo_FullMethodName         = "/proto.CryptoService/getAccountInfo"
	CryptoService_GetTransactionReceipts_FullMethodName = "/proto.CryptoService/getTransactionReceipts"
	CryptoService_GetTxRecordByTxID_FullMethodName      = "/proto.CryptoService/getTxRecordByTxID"
)

// CryptoServiceClient is the client API for CryptoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Transactions and queries for the Hedera Crypto Service.
type CryptoServiceClient interface {
	// *
	// Create a new account by submitting the transaction
	CreateAccount(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Update an account by submitting the transaction
	UpdateAccount(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Initiate a transfer by submitting the transaction
	CryptoTransfer(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Delete an account by submitting the transaction
	CryptoDelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Add one or more approved allowances for spenders to transfer the paying
	// account's hbar or tokens.
	ApproveAllowances(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Delete one or more of the specific approved NFT serial numbers on an
	// owner account.
	DeleteAllowances(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Deprecated: Do not use.
	// *
	// Add a livehash
	// <blockquote>Important<blockquote>
	// This transaction is obsolete, not supported, and SHALL fail with a
	// pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
	AddLiveHash(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Deprecated: Do not use.
	// *
	// Delete a livehash
	// <blockquote>Important<blockquote>
	// This transaction is obsolete, not supported, and SHALL fail with a
	// pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
	DeleteLiveHash(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Deprecated: Do not use.
	// *
	// Retrieve a livehash for an account
	// <blockquote>Important<blockquote>
	// This query is obsolete, not supported, and SHALL fail with a pre-check
	// result of `NOT_SUPPORTED`.</blockquote></blockquote>
	GetLiveHash(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// Return all transactions in the last 180s of consensus time for which
	// the given account was the effective payer **and** network property
	// `ledger.keepRecordsInState` was `true`.
	GetAccountRecords(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// Retrieve the balance of an account
	CryptoGetBalance(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// Retrieve the metadata of an account
	GetAccountInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// Retrieve the latest receipt for a transaction that is either awaiting
	// consensus, or reached consensus in the last 180 seconds
	GetTransactionReceipts(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// Retrieve the record of a transaction that is either awaiting consensus,
	// or reached consensus in the last 180 seconds
	GetTxRecordByTxID(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
}

type cryptoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoServiceClient(cc grpc.ClientConnInterface) CryptoServiceClient {
	return &cryptoServiceClient{cc}
}

func (c *cryptoServiceClient) CreateAccount(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, CryptoService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) UpdateAccount(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, CryptoService_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) CryptoTransfer(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, CryptoService_CryptoTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) CryptoDelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, CryptoService_CryptoDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) ApproveAllowances(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, CryptoService_ApproveAllowances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) DeleteAllowances(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, CryptoService_DeleteAllowances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *cryptoServiceClient) AddLiveHash(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, CryptoService_AddLiveHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *cryptoServiceClient) DeleteLiveHash(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, CryptoService_DeleteLiveHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *cryptoServiceClient) GetLiveHash(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CryptoService_GetLiveHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) GetAccountRecords(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CryptoService_GetAccountRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) CryptoGetBalance(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CryptoService_CryptoGetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) GetAccountInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CryptoService_GetAccountInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) GetTransactionReceipts(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CryptoService_GetTransactionReceipts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) GetTxRecordByTxID(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CryptoService_GetTxRecordByTxID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoServiceServer is the server API for CryptoService service.
// All implementations must embed UnimplementedCryptoServiceServer
// for forward compatibility.
//
// *
// Transactions and queries for the Hedera Crypto Service.
type CryptoServiceServer interface {
	// *
	// Create a new account by submitting the transaction
	CreateAccount(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Update an account by submitting the transaction
	UpdateAccount(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Initiate a transfer by submitting the transaction
	CryptoTransfer(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Delete an account by submitting the transaction
	CryptoDelete(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Add one or more approved allowances for spenders to transfer the paying
	// account's hbar or tokens.
	ApproveAllowances(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Delete one or more of the specific approved NFT serial numbers on an
	// owner account.
	DeleteAllowances(context.Context, *Transaction) (*TransactionResponse, error)
	// Deprecated: Do not use.
	// *
	// Add a livehash
	// <blockquote>Important<blockquote>
	// This transaction is obsolete, not supported, and SHALL fail with a
	// pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
	AddLiveHash(context.Context, *Transaction) (*TransactionResponse, error)
	// Deprecated: Do not use.
	// *
	// Delete a livehash
	// <blockquote>Important<blockquote>
	// This transaction is obsolete, not supported, and SHALL fail with a
	// pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
	DeleteLiveHash(context.Context, *Transaction) (*TransactionResponse, error)
	// Deprecated: Do not use.
	// *
	// Retrieve a livehash for an account
	// <blockquote>Important<blockquote>
	// This query is obsolete, not supported, and SHALL fail with a pre-check
	// result of `NOT_SUPPORTED`.</blockquote></blockquote>
	GetLiveHash(context.Context, *Query) (*Response, error)
	// *
	// Return all transactions in the last 180s of consensus time for which
	// the given account was the effective payer **and** network property
	// `ledger.keepRecordsInState` was `true`.
	GetAccountRecords(context.Context, *Query) (*Response, error)
	// *
	// Retrieve the balance of an account
	CryptoGetBalance(context.Context, *Query) (*Response, error)
	// *
	// Retrieve the metadata of an account
	GetAccountInfo(context.Context, *Query) (*Response, error)
	// *
	// Retrieve the latest receipt for a transaction that is either awaiting
	// consensus, or reached consensus in the last 180 seconds
	GetTransactionReceipts(context.Context, *Query) (*Response, error)
	// *
	// Retrieve the record of a transaction that is either awaiting consensus,
	// or reached consensus in the last 180 seconds
	GetTxRecordByTxID(context.Context, *Query) (*Response, error)
	mustEmbedUnimplementedCryptoServiceServer()
}

// UnimplementedCryptoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCryptoServiceServer struct{}

func (UnimplementedCryptoServiceServer) CreateAccount(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedCryptoServiceServer) UpdateAccount(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedCryptoServiceServer) CryptoTransfer(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CryptoTransfer not implemented")
}
func (UnimplementedCryptoServiceServer) CryptoDelete(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CryptoDelete not implemented")
}
func (UnimplementedCryptoServiceServer) ApproveAllowances(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveAllowances not implemented")
}
func (UnimplementedCryptoServiceServer) DeleteAllowances(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllowances not implemented")
}
func (UnimplementedCryptoServiceServer) AddLiveHash(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLiveHash not implemented")
}
func (UnimplementedCryptoServiceServer) DeleteLiveHash(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLiveHash not implemented")
}
func (UnimplementedCryptoServiceServer) GetLiveHash(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveHash not implemented")
}
func (UnimplementedCryptoServiceServer) GetAccountRecords(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountRecords not implemented")
}
func (UnimplementedCryptoServiceServer) CryptoGetBalance(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CryptoGetBalance not implemented")
}
func (UnimplementedCryptoServiceServer) GetAccountInfo(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (UnimplementedCryptoServiceServer) GetTransactionReceipts(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionReceipts not implemented")
}
func (UnimplementedCryptoServiceServer) GetTxRecordByTxID(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxRecordByTxID not implemented")
}
func (UnimplementedCryptoServiceServer) mustEmbedUnimplementedCryptoServiceServer() {}
func (UnimplementedCryptoServiceServer) testEmbeddedByValue()                       {}

// UnsafeCryptoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoServiceServer will
// result in compilation errors.
type UnsafeCryptoServiceServer interface {
	mustEmbedUnimplementedCryptoServiceServer()
}

func RegisterCryptoServiceServer(s grpc.ServiceRegistrar, srv CryptoServiceServer) {
	// If the following call pancis, it indicates UnimplementedCryptoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CryptoService_ServiceDesc, srv)
}

func _CryptoService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).CreateAccount(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).UpdateAccount(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_CryptoTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).CryptoTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_CryptoTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).CryptoTransfer(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_CryptoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).CryptoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_CryptoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).CryptoDelete(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_ApproveAllowances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).ApproveAllowances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_ApproveAllowances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).ApproveAllowances(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_DeleteAllowances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).DeleteAllowances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_DeleteAllowances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).DeleteAllowances(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_AddLiveHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).AddLiveHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_AddLiveHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).AddLiveHash(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_DeleteLiveHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).DeleteLiveHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_DeleteLiveHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).DeleteLiveHash(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_GetLiveHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).GetLiveHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_GetLiveHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).GetLiveHash(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_GetAccountRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).GetAccountRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_GetAccountRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).GetAccountRecords(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_CryptoGetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).CryptoGetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_CryptoGetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).CryptoGetBalance(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_GetAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).GetAccountInfo(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_GetTransactionReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).GetTransactionReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_GetTransactionReceipts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).GetTransactionReceipts(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_GetTxRecordByTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).GetTxRecordByTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoService_GetTxRecordByTxID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).GetTxRecordByTxID(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptoService_ServiceDesc is the grpc.ServiceDesc for CryptoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CryptoService",
	HandlerType: (*CryptoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createAccount",
			Handler:    _CryptoService_CreateAccount_Handler,
		},
		{
			MethodName: "updateAccount",
			Handler:    _CryptoService_UpdateAccount_Handler,
		},
		{
			MethodName: "cryptoTransfer",
			Handler:    _CryptoService_CryptoTransfer_Handler,
		},
		{
			MethodName: "cryptoDelete",
			Handler:    _CryptoService_CryptoDelete_Handler,
		},
		{
			MethodName: "approveAllowances",
			Handler:    _CryptoService_ApproveAllowances_Handler,
		},
		{
			MethodName: "deleteAllowances",
			Handler:    _CryptoService_DeleteAllowances_Handler,
		},
		{
			MethodName: "addLiveHash",
			Handler:    _CryptoService_AddLiveHash_Handler,
		},
		{
			MethodName: "deleteLiveHash",
			Handler:    _CryptoService_DeleteLiveHash_Handler,
		},
		{
			MethodName: "getLiveHash",
			Handler:    _CryptoService_GetLiveHash_Handler,
		},
		{
			MethodName: "getAccountRecords",
			Handler:    _CryptoService_GetAccountRecords_Handler,
		},
		{
			MethodName: "cryptoGetBalance",
			Handler:    _CryptoService_CryptoGetBalance_Handler,
		},
		{
			MethodName: "getAccountInfo",
			Handler:    _CryptoService_GetAccountInfo_Handler,
		},
		{
			MethodName: "getTransactionReceipts",
			Handler:    _CryptoService_GetTransactionReceipts_Handler,
		},
		{
			MethodName: "getTxRecordByTxID",
			Handler:    _CryptoService_GetTxRecordByTxID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crypto_service.proto",
}
