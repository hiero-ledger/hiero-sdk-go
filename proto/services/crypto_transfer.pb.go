//*
// # Crypto Transfer
// Transaction to transfer HBAR between accounts, or between accounts and
// smart contracts.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: crypto_transfer.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Transfer HBAR and/or other tokens among two or more accounts and/or smart
// contracts.
//
// Transfers of HBAR or fungible/common tokens in this transaction are
// structured as a "double-entry" transfer list which debits one or more
// accounts, and separately credits one or more accounts. Each such transfer
// list may specify up to 10 individual credits or debits.<br/>
// Transfers of non-fungible/unique tokens in this transaction are
// structured as a "single-entry" transfer list, which both debits one account
// and credits another account in a single entry.
//
// At least one transfer MUST be present, this MAY be an HBAR transfer in
// `transfers`, or MAY be a token transfer in `tokenTransfers`.<br/>
// Either `transfers` or `tokenTransfers` MAY be unset, provided the other
// is set and not empty.<br/>
// If any one account with a debit in any transfer list holds insufficient
// balance to complete the transfer, the entire transaction SHALL fail, and
// all transfers SHALL NOT be completed.<br/>
// If any one account that is _sending_ an individual non-fungible/unique (NFT)
// token does not currently hold that unique NFT, the entire transaction SHALL
// FAIL, and all transfers SHALL NOT be completed.
// The transaction fee SHALL be charged for a transaction that fails due to
// insufficient balance or not holding the NFT to be transferred.<br/>
// Each account with any debit amounts in any transfer list MUST sign this
// transaction.<br/>
// Each account with any credit amounts in any transfer list that also has the
// `receiverSigRequired` flag set MUST sign this transaction.
//
// ### Block Stream Effects
// All debits and credits completed by this transaction SHALL be included in
// the transaction result transfer list.<br/>
// Multiple fungible/common debits from one account, or credits to one account,
// MAY be consolidated to a single debit or credit entry in the
// transaction result.<br/>
// Multiple non-fungible/unique transfers SHALL NOT be consolidated in the
// transaction result.
type CryptoTransferTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A list of HBAR transfers.
	// <p>
	// Each transfer in this list MUST be denominated in tinybar.
	Transfers *TransferList `protobuf:"bytes,1,opt,name=transfers,proto3" json:"transfers,omitempty"`
	// *
	// One or more lists of token transfers.
	// <p>
	// This list MUST NOT contain more than 10 entries.<br/>
	// If custom fees must be charged, the fee SHALL be assessed against the
	// effective "payer" for this transaction.<br/>
	// If the effective "payer" for this transaction lacks sufficient balance
	// to pay custom fees assessed, the entire transaction SHALL fail with a
	// response code `INSUFFICIENT_PAYER_BALANCE_FOR_CUSTOM_FEE`.
	TokenTransfers []*TokenTransferList `protobuf:"bytes,2,rep,name=tokenTransfers,proto3" json:"tokenTransfers,omitempty"`
}

func (x *CryptoTransferTransactionBody) Reset() {
	*x = CryptoTransferTransactionBody{}
	mi := &file_crypto_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptoTransferTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoTransferTransactionBody) ProtoMessage() {}

func (x *CryptoTransferTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoTransferTransactionBody.ProtoReflect.Descriptor instead.
func (*CryptoTransferTransactionBody) Descriptor() ([]byte, []int) {
	return file_crypto_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoTransferTransactionBody) GetTransfers() *TransferList {
	if x != nil {
		return x.Transfers
	}
	return nil
}

func (x *CryptoTransferTransactionBody) GetTokenTransfers() []*TokenTransferList {
	if x != nil {
		return x.TokenTransfers
	}
	return nil
}

var File_crypto_transfer_proto protoreflect.FileDescriptor

var file_crypto_transfer_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x94, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_crypto_transfer_proto_rawDescOnce sync.Once
	file_crypto_transfer_proto_rawDescData = file_crypto_transfer_proto_rawDesc
)

func file_crypto_transfer_proto_rawDescGZIP() []byte {
	file_crypto_transfer_proto_rawDescOnce.Do(func() {
		file_crypto_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_crypto_transfer_proto_rawDescData)
	})
	return file_crypto_transfer_proto_rawDescData
}

var file_crypto_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_crypto_transfer_proto_goTypes = []any{
	(*CryptoTransferTransactionBody)(nil), // 0: proto.CryptoTransferTransactionBody
	(*TransferList)(nil),                  // 1: proto.TransferList
	(*TokenTransferList)(nil),             // 2: proto.TokenTransferList
}
var file_crypto_transfer_proto_depIdxs = []int32{
	1, // 0: proto.CryptoTransferTransactionBody.transfers:type_name -> proto.TransferList
	2, // 1: proto.CryptoTransferTransactionBody.tokenTransfers:type_name -> proto.TokenTransferList
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_crypto_transfer_proto_init() }
func file_crypto_transfer_proto_init() {
	if File_crypto_transfer_proto != nil {
		return
	}
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crypto_transfer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_crypto_transfer_proto_goTypes,
		DependencyIndexes: file_crypto_transfer_proto_depIdxs,
		MessageInfos:      file_crypto_transfer_proto_msgTypes,
	}.Build()
	File_crypto_transfer_proto = out.File
	file_crypto_transfer_proto_rawDesc = nil
	file_crypto_transfer_proto_goTypes = nil
	file_crypto_transfer_proto_depIdxs = nil
}
