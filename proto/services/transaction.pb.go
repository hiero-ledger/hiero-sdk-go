//*
// # Transaction
// A (mostly legacy) wrapper around the bytes of a
// serialized `SignedTransaction` message.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: transaction.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A wrapper around signed transaction bytes.<br/>
// This was originally a transaction with body, signatures, and/or bytes,
// but is not only a wrapper around a byte array containing signed transction
// bytes.
//
// The `signedTransactionBytes` field is REQUIRED and MUST contain a valid,
// serialized, `SignedTransaction` message.<br/>
// All other fields are deprecated and MUST NOT be set.
//
// #### Additional Notes
// The four deprecated fields will be removed and reserved in a future release.
type Transaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Replaced with `signedTransactionBytes`.<br/>
	// The body of the transaction.
	//
	// Deprecated: Marked as deprecated in transaction.proto.
	Body *TransactionBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// *
	// Replaced with `signedTransactionBytes`.<br/>
	// The signatures on the body.
	//
	// Deprecated: Marked as deprecated in transaction.proto.
	Sigs *SignatureList `protobuf:"bytes,2,opt,name=sigs,proto3" json:"sigs,omitempty"`
	// *
	// Replaced with `signedTransactionBytes`.<br/>
	// The signatures on the body with a newer format.
	//
	// Deprecated: Marked as deprecated in transaction.proto.
	SigMap *SignatureMap `protobuf:"bytes,3,opt,name=sigMap,proto3" json:"sigMap,omitempty"`
	// *
	// Replaced with `signedTransactionBytes`.<br/>
	// TransactionBody serialized into bytes.
	//
	// Deprecated: Marked as deprecated in transaction.proto.
	BodyBytes []byte `protobuf:"bytes,4,opt,name=bodyBytes,proto3" json:"bodyBytes,omitempty"`
	// *
	// A valid, serialized, `SignedTransaction` message.
	// <p>
	// This field MUST be present.
	// This field MUST NOT exceed the current network transaction size limit
	// (currently 6144 bytes).
	SignedTransactionBytes []byte `protobuf:"bytes,5,opt,name=signedTransactionBytes,proto3" json:"signedTransactionBytes,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_transaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in transaction.proto.
func (x *Transaction) GetBody() *TransactionBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// Deprecated: Marked as deprecated in transaction.proto.
func (x *Transaction) GetSigs() *SignatureList {
	if x != nil {
		return x.Sigs
	}
	return nil
}

// Deprecated: Marked as deprecated in transaction.proto.
func (x *Transaction) GetSigMap() *SignatureMap {
	if x != nil {
		return x.SigMap
	}
	return nil
}

// Deprecated: Marked as deprecated in transaction.proto.
func (x *Transaction) GetBodyBytes() []byte {
	if x != nil {
		return x.BodyBytes
	}
	return nil
}

func (x *Transaction) GetSignedTransactionBytes() []byte {
	if x != nil {
		return x.SignedTransactionBytes
	}
	return nil
}

// *
// A transaction body.
//
// Every transaction is structured as a signed byte array. That byte array
// is a serialized `TransactionBody`.  The transaction body contains the full
// content of the transaction, while the `SignedTransaction` includes a
// signature map for signatures authenticating that byte array, and that is
// serialized and transmitted wrapped in a `Transaction` message.<br/>
// The bulk of this message is a `oneof` block which offers the option for
// any one of the transaction messages for the network.
// This message also includes several additional fields to specify
// various parameters required to process a transaction.
type TransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A transaction identifier.<br/>
	// Each transaction is uniquely identified by its transaction
	// identifier.
	// <p>
	// Each transaction identifier MUST be unique.<br/>
	// Multiple transactions MAY be submitted with the same transaction
	// identifier, but all except the first SHALL be rejected as duplicate
	// transactions.<br/>
	// This identifier MUST specify a `payer` account to be charged
	// all fees associated with the transaction.<br/>
	// This identifier MUST specify a "valid start time".<br/>
	// The "valid start time" MUST be strictly _earlier_ than the current
	// network consensus time.<br/>
	// The "valid start time" MUST NOT be more than the current network
	// configuration value for `transaction.maxValidDuration` seconds
	// before the current network consensus time.<br/>
	// This identifier MUST NOT set the `scheduled` flag.<br/>
	// This identifier MUST NOT set a nonce value.
	TransactionID *TransactionID `protobuf:"bytes,1,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	// *
	// A node account identifier.
	// <p>
	// This MUST identify the account of the consensus node to which
	// this transaction is submitted.
	NodeAccountID *AccountID `protobuf:"bytes,2,opt,name=nodeAccountID,proto3" json:"nodeAccountID,omitempty"`
	// *
	// A maximum transaction fee, in tinybar.
	// <p>
	// The network SHALL NOT charge a transaction fee that exceeds this
	// amount.<br/>
	// The network MAY charge up to this amount, and reject the transaction,
	// if the amount offered is insufficient to cover the required fees.<br/>
	// The network MAY charge a minimum fee equal to 80% of the amount offered
	// if the amount offered is much larger than the required fees.
	TransactionFee uint64 `protobuf:"varint,3,opt,name=transactionFee,proto3" json:"transactionFee,omitempty"`
	// *
	// A maximum duration in which to execute this transaction.
	// <p>
	// This transaction SHALL be rejected as expired if the valid start time,
	// extended by this duration, is less than the current network consensus
	// time when the transaction is submitted.<br/>
	// This transaction SHALL be rejected with an invalid duration if this
	// value is greater than the current network configuration value for
	// `transaction.maxValidDuration`.
	TransactionValidDuration *Duration `protobuf:"bytes,4,opt,name=transactionValidDuration,proto3" json:"transactionValidDuration,omitempty"`
	// *
	// Records are always generated.<br/>
	// Obsolete option to not generate a record.
	// <p>
	// This flag SHALL be ignored. Every transaction SHALL generate a record,
	// or block stream equivalent.
	//
	// Deprecated: Marked as deprecated in transaction.proto.
	GenerateRecord bool `protobuf:"varint,5,opt,name=generateRecord,proto3" json:"generateRecord,omitempty"`
	// *
	// A short description for this transaction.
	// <p>
	// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
	// (default 100) bytes when encoded as UTF-8.
	Memo string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// The <b>public key</b> of the trusted batch assembler.
	BatchKey *Key `protobuf:"bytes,73,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
	// The fields here are ordered in strictly ascending field ordinal
	// order due to limitations in PBJ.
	//
	// Types that are valid to be assigned to Data:
	//
	//	*TransactionBody_ContractCall
	//	*TransactionBody_ContractCreateInstance
	//	*TransactionBody_ContractUpdateInstance
	//	*TransactionBody_CryptoAddLiveHash
	//	*TransactionBody_CryptoCreateAccount
	//	*TransactionBody_CryptoDelete
	//	*TransactionBody_CryptoDeleteLiveHash
	//	*TransactionBody_CryptoTransfer
	//	*TransactionBody_CryptoUpdateAccount
	//	*TransactionBody_FileAppend
	//	*TransactionBody_FileCreate
	//	*TransactionBody_FileDelete
	//	*TransactionBody_FileUpdate
	//	*TransactionBody_SystemDelete
	//	*TransactionBody_SystemUndelete
	//	*TransactionBody_ContractDeleteInstance
	//	*TransactionBody_Freeze
	//	*TransactionBody_ConsensusCreateTopic
	//	*TransactionBody_ConsensusUpdateTopic
	//	*TransactionBody_ConsensusDeleteTopic
	//	*TransactionBody_ConsensusSubmitMessage
	//	*TransactionBody_UncheckedSubmit
	//	*TransactionBody_TokenCreation
	//	*TransactionBody_TokenFreeze
	//	*TransactionBody_TokenUnfreeze
	//	*TransactionBody_TokenGrantKyc
	//	*TransactionBody_TokenRevokeKyc
	//	*TransactionBody_TokenDeletion
	//	*TransactionBody_TokenUpdate
	//	*TransactionBody_TokenMint
	//	*TransactionBody_TokenBurn
	//	*TransactionBody_TokenWipe
	//	*TransactionBody_TokenAssociate
	//	*TransactionBody_TokenDissociate
	//	*TransactionBody_ScheduleCreate
	//	*TransactionBody_ScheduleDelete
	//	*TransactionBody_ScheduleSign
	//	*TransactionBody_TokenFeeScheduleUpdate
	//	*TransactionBody_TokenPause
	//	*TransactionBody_TokenUnpause
	//	*TransactionBody_CryptoApproveAllowance
	//	*TransactionBody_CryptoDeleteAllowance
	//	*TransactionBody_EthereumTransaction
	//	*TransactionBody_NodeStakeUpdate
	//	*TransactionBody_UtilPrng
	//	*TransactionBody_TokenUpdateNfts
	//	*TransactionBody_NodeCreate
	//	*TransactionBody_NodeUpdate
	//	*TransactionBody_NodeDelete
	//	*TransactionBody_TokenReject
	//	*TransactionBody_TokenAirdrop
	//	*TransactionBody_TokenCancelAirdrop
	//	*TransactionBody_TokenClaimAirdrop
	//	*TransactionBody_StateSignatureTransaction
	//	*TransactionBody_HintsPreprocessingVote
	//	*TransactionBody_HintsKeyPublication
	//	*TransactionBody_HintsPartialSignature
	//	*TransactionBody_HistoryProofSignature
	//	*TransactionBody_HistoryProofKeyPublication
	//	*TransactionBody_HistoryProofVote
	//	*TransactionBody_CrsPublication
	//	*TransactionBody_AtomicBatch
	//	*TransactionBody_LambdaSstore
	//	*TransactionBody_HookDispatch
	Data isTransactionBody_Data `protobuf_oneof:"data"`
	// *
	// A list of maximum custom fees that the users are willing to pay.
	// <p>
	// This field is OPTIONAL.<br/>
	// If left empty, the users are accepting to pay any custom fee.<br/>
	// If used with a transaction type that does not support custom fee limits, the transaction will fail.
	MaxCustomFees []*CustomFeeLimit `protobuf:"bytes,1001,rep,name=max_custom_fees,json=maxCustomFees,proto3" json:"max_custom_fees,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionBody) Reset() {
	*x = TransactionBody{}
	mi := &file_transaction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBody) ProtoMessage() {}

func (x *TransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBody.ProtoReflect.Descriptor instead.
func (*TransactionBody) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionBody) GetTransactionID() *TransactionID {
	if x != nil {
		return x.TransactionID
	}
	return nil
}

func (x *TransactionBody) GetNodeAccountID() *AccountID {
	if x != nil {
		return x.NodeAccountID
	}
	return nil
}

func (x *TransactionBody) GetTransactionFee() uint64 {
	if x != nil {
		return x.TransactionFee
	}
	return 0
}

func (x *TransactionBody) GetTransactionValidDuration() *Duration {
	if x != nil {
		return x.TransactionValidDuration
	}
	return nil
}

// Deprecated: Marked as deprecated in transaction.proto.
func (x *TransactionBody) GetGenerateRecord() bool {
	if x != nil {
		return x.GenerateRecord
	}
	return false
}

func (x *TransactionBody) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *TransactionBody) GetBatchKey() *Key {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

func (x *TransactionBody) GetData() isTransactionBody_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TransactionBody) GetContractCall() *ContractCallTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_ContractCall); ok {
			return x.ContractCall
		}
	}
	return nil
}

func (x *TransactionBody) GetContractCreateInstance() *ContractCreateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_ContractCreateInstance); ok {
			return x.ContractCreateInstance
		}
	}
	return nil
}

func (x *TransactionBody) GetContractUpdateInstance() *ContractUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_ContractUpdateInstance); ok {
			return x.ContractUpdateInstance
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in transaction.proto.
func (x *TransactionBody) GetCryptoAddLiveHash() *CryptoAddLiveHashTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_CryptoAddLiveHash); ok {
			return x.CryptoAddLiveHash
		}
	}
	return nil
}

func (x *TransactionBody) GetCryptoCreateAccount() *CryptoCreateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_CryptoCreateAccount); ok {
			return x.CryptoCreateAccount
		}
	}
	return nil
}

func (x *TransactionBody) GetCryptoDelete() *CryptoDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_CryptoDelete); ok {
			return x.CryptoDelete
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in transaction.proto.
func (x *TransactionBody) GetCryptoDeleteLiveHash() *CryptoDeleteLiveHashTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_CryptoDeleteLiveHash); ok {
			return x.CryptoDeleteLiveHash
		}
	}
	return nil
}

func (x *TransactionBody) GetCryptoTransfer() *CryptoTransferTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_CryptoTransfer); ok {
			return x.CryptoTransfer
		}
	}
	return nil
}

func (x *TransactionBody) GetCryptoUpdateAccount() *CryptoUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_CryptoUpdateAccount); ok {
			return x.CryptoUpdateAccount
		}
	}
	return nil
}

func (x *TransactionBody) GetFileAppend() *FileAppendTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_FileAppend); ok {
			return x.FileAppend
		}
	}
	return nil
}

func (x *TransactionBody) GetFileCreate() *FileCreateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_FileCreate); ok {
			return x.FileCreate
		}
	}
	return nil
}

func (x *TransactionBody) GetFileDelete() *FileDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_FileDelete); ok {
			return x.FileDelete
		}
	}
	return nil
}

func (x *TransactionBody) GetFileUpdate() *FileUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_FileUpdate); ok {
			return x.FileUpdate
		}
	}
	return nil
}

func (x *TransactionBody) GetSystemDelete() *SystemDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_SystemDelete); ok {
			return x.SystemDelete
		}
	}
	return nil
}

func (x *TransactionBody) GetSystemUndelete() *SystemUndeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_SystemUndelete); ok {
			return x.SystemUndelete
		}
	}
	return nil
}

func (x *TransactionBody) GetContractDeleteInstance() *ContractDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_ContractDeleteInstance); ok {
			return x.ContractDeleteInstance
		}
	}
	return nil
}

func (x *TransactionBody) GetFreeze() *FreezeTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_Freeze); ok {
			return x.Freeze
		}
	}
	return nil
}

func (x *TransactionBody) GetConsensusCreateTopic() *ConsensusCreateTopicTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_ConsensusCreateTopic); ok {
			return x.ConsensusCreateTopic
		}
	}
	return nil
}

func (x *TransactionBody) GetConsensusUpdateTopic() *ConsensusUpdateTopicTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_ConsensusUpdateTopic); ok {
			return x.ConsensusUpdateTopic
		}
	}
	return nil
}

func (x *TransactionBody) GetConsensusDeleteTopic() *ConsensusDeleteTopicTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_ConsensusDeleteTopic); ok {
			return x.ConsensusDeleteTopic
		}
	}
	return nil
}

func (x *TransactionBody) GetConsensusSubmitMessage() *ConsensusSubmitMessageTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_ConsensusSubmitMessage); ok {
			return x.ConsensusSubmitMessage
		}
	}
	return nil
}

func (x *TransactionBody) GetUncheckedSubmit() *UncheckedSubmitBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_UncheckedSubmit); ok {
			return x.UncheckedSubmit
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenCreation() *TokenCreateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenCreation); ok {
			return x.TokenCreation
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenFreeze() *TokenFreezeAccountTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenFreeze); ok {
			return x.TokenFreeze
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenUnfreeze() *TokenUnfreezeAccountTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenUnfreeze); ok {
			return x.TokenUnfreeze
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenGrantKyc() *TokenGrantKycTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenGrantKyc); ok {
			return x.TokenGrantKyc
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenRevokeKyc() *TokenRevokeKycTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenRevokeKyc); ok {
			return x.TokenRevokeKyc
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenDeletion() *TokenDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenDeletion); ok {
			return x.TokenDeletion
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenUpdate() *TokenUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenUpdate); ok {
			return x.TokenUpdate
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenMint() *TokenMintTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenMint); ok {
			return x.TokenMint
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenBurn() *TokenBurnTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenBurn); ok {
			return x.TokenBurn
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenWipe() *TokenWipeAccountTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenWipe); ok {
			return x.TokenWipe
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenAssociate() *TokenAssociateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenAssociate); ok {
			return x.TokenAssociate
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenDissociate() *TokenDissociateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenDissociate); ok {
			return x.TokenDissociate
		}
	}
	return nil
}

func (x *TransactionBody) GetScheduleCreate() *ScheduleCreateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_ScheduleCreate); ok {
			return x.ScheduleCreate
		}
	}
	return nil
}

func (x *TransactionBody) GetScheduleDelete() *ScheduleDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_ScheduleDelete); ok {
			return x.ScheduleDelete
		}
	}
	return nil
}

func (x *TransactionBody) GetScheduleSign() *ScheduleSignTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_ScheduleSign); ok {
			return x.ScheduleSign
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenFeeScheduleUpdate() *TokenFeeScheduleUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenFeeScheduleUpdate); ok {
			return x.TokenFeeScheduleUpdate
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenPause() *TokenPauseTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenPause); ok {
			return x.TokenPause
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenUnpause() *TokenUnpauseTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenUnpause); ok {
			return x.TokenUnpause
		}
	}
	return nil
}

func (x *TransactionBody) GetCryptoApproveAllowance() *CryptoApproveAllowanceTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_CryptoApproveAllowance); ok {
			return x.CryptoApproveAllowance
		}
	}
	return nil
}

func (x *TransactionBody) GetCryptoDeleteAllowance() *CryptoDeleteAllowanceTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_CryptoDeleteAllowance); ok {
			return x.CryptoDeleteAllowance
		}
	}
	return nil
}

func (x *TransactionBody) GetEthereumTransaction() *EthereumTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_EthereumTransaction); ok {
			return x.EthereumTransaction
		}
	}
	return nil
}

func (x *TransactionBody) GetNodeStakeUpdate() *NodeStakeUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_NodeStakeUpdate); ok {
			return x.NodeStakeUpdate
		}
	}
	return nil
}

func (x *TransactionBody) GetUtilPrng() *UtilPrngTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_UtilPrng); ok {
			return x.UtilPrng
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenUpdateNfts() *TokenUpdateNftsTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenUpdateNfts); ok {
			return x.TokenUpdateNfts
		}
	}
	return nil
}

func (x *TransactionBody) GetNodeCreate() *NodeCreateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_NodeCreate); ok {
			return x.NodeCreate
		}
	}
	return nil
}

func (x *TransactionBody) GetNodeUpdate() *NodeUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_NodeUpdate); ok {
			return x.NodeUpdate
		}
	}
	return nil
}

func (x *TransactionBody) GetNodeDelete() *NodeDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_NodeDelete); ok {
			return x.NodeDelete
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenReject() *TokenRejectTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenReject); ok {
			return x.TokenReject
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenAirdrop() *TokenAirdropTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenAirdrop); ok {
			return x.TokenAirdrop
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenCancelAirdrop() *TokenCancelAirdropTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenCancelAirdrop); ok {
			return x.TokenCancelAirdrop
		}
	}
	return nil
}

func (x *TransactionBody) GetTokenClaimAirdrop() *TokenClaimAirdropTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_TokenClaimAirdrop); ok {
			return x.TokenClaimAirdrop
		}
	}
	return nil
}

func (x *TransactionBody) GetStateSignatureTransaction() *StateSignatureTransaction {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_StateSignatureTransaction); ok {
			return x.StateSignatureTransaction
		}
	}
	return nil
}

func (x *TransactionBody) GetHintsPreprocessingVote() *HintsPreprocessingVoteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_HintsPreprocessingVote); ok {
			return x.HintsPreprocessingVote
		}
	}
	return nil
}

func (x *TransactionBody) GetHintsKeyPublication() *HintsKeyPublicationTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_HintsKeyPublication); ok {
			return x.HintsKeyPublication
		}
	}
	return nil
}

func (x *TransactionBody) GetHintsPartialSignature() *HintsPartialSignatureTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_HintsPartialSignature); ok {
			return x.HintsPartialSignature
		}
	}
	return nil
}

func (x *TransactionBody) GetHistoryProofSignature() *HistoryProofSignatureTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_HistoryProofSignature); ok {
			return x.HistoryProofSignature
		}
	}
	return nil
}

func (x *TransactionBody) GetHistoryProofKeyPublication() *HistoryProofKeyPublicationTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_HistoryProofKeyPublication); ok {
			return x.HistoryProofKeyPublication
		}
	}
	return nil
}

func (x *TransactionBody) GetHistoryProofVote() *HistoryProofVoteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_HistoryProofVote); ok {
			return x.HistoryProofVote
		}
	}
	return nil
}

func (x *TransactionBody) GetCrsPublication() *CrsPublicationTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_CrsPublication); ok {
			return x.CrsPublication
		}
	}
	return nil
}

func (x *TransactionBody) GetAtomicBatch() *AtomicBatchTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_AtomicBatch); ok {
			return x.AtomicBatch
		}
	}
	return nil
}

func (x *TransactionBody) GetLambdaSstore() *LambdaSStoreTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_LambdaSstore); ok {
			return x.LambdaSstore
		}
	}
	return nil
}

func (x *TransactionBody) GetHookDispatch() *HookDispatchTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_HookDispatch); ok {
			return x.HookDispatch
		}
	}
	return nil
}

func (x *TransactionBody) GetMaxCustomFees() []*CustomFeeLimit {
	if x != nil {
		return x.MaxCustomFees
	}
	return nil
}

type isTransactionBody_Data interface {
	isTransactionBody_Data()
}

type TransactionBody_ContractCall struct {
	// *
	// Call a function defined on a smart contract.
	ContractCall *ContractCallTransactionBody `protobuf:"bytes,7,opt,name=contractCall,proto3,oneof"`
}

type TransactionBody_ContractCreateInstance struct {
	// *
	// Create a smart contract.
	ContractCreateInstance *ContractCreateTransactionBody `protobuf:"bytes,8,opt,name=contractCreateInstance,proto3,oneof"`
}

type TransactionBody_ContractUpdateInstance struct {
	// *
	// Update a smart contract.
	ContractUpdateInstance *ContractUpdateTransactionBody `protobuf:"bytes,9,opt,name=contractUpdateInstance,proto3,oneof"`
}

type TransactionBody_CryptoAddLiveHash struct {
	// *
	// An obsolete, and unsupported, operation to add a "live hash" to
	// an account.
	//
	// Deprecated: Marked as deprecated in transaction.proto.
	CryptoAddLiveHash *CryptoAddLiveHashTransactionBody `protobuf:"bytes,10,opt,name=cryptoAddLiveHash,proto3,oneof"`
}

type TransactionBody_CryptoCreateAccount struct {
	// *
	// Create a new Hedera account.
	CryptoCreateAccount *CryptoCreateTransactionBody `protobuf:"bytes,11,opt,name=cryptoCreateAccount,proto3,oneof"`
}

type TransactionBody_CryptoDelete struct {
	// *
	// Delete an Hedera account.<br/>
	// This will mark the account as deleted, and transfer all remaining
	// HBAR to a receiver account.
	CryptoDelete *CryptoDeleteTransactionBody `protobuf:"bytes,12,opt,name=cryptoDelete,proto3,oneof"`
}

type TransactionBody_CryptoDeleteLiveHash struct {
	// *
	// An obsolete, and unsupported, operation to remove a "live hash" from
	// an account.
	//
	// Deprecated: Marked as deprecated in transaction.proto.
	CryptoDeleteLiveHash *CryptoDeleteLiveHashTransactionBody `protobuf:"bytes,13,opt,name=cryptoDeleteLiveHash,proto3,oneof"`
}

type TransactionBody_CryptoTransfer struct {
	// *
	// Transfer HBAR between accounts.
	CryptoTransfer *CryptoTransferTransactionBody `protobuf:"bytes,14,opt,name=cryptoTransfer,proto3,oneof"`
}

type TransactionBody_CryptoUpdateAccount struct {
	// *
	// Modify an Hedera account.
	CryptoUpdateAccount *CryptoUpdateTransactionBody `protobuf:"bytes,15,opt,name=cryptoUpdateAccount,proto3,oneof"`
}

type TransactionBody_FileAppend struct {
	// *
	// Append data to the end of a file.
	FileAppend *FileAppendTransactionBody `protobuf:"bytes,16,opt,name=fileAppend,proto3,oneof"`
}

type TransactionBody_FileCreate struct {
	// *
	// Create a new file.
	FileCreate *FileCreateTransactionBody `protobuf:"bytes,17,opt,name=fileCreate,proto3,oneof"`
}

type TransactionBody_FileDelete struct {
	// *
	// Delete a file.<br/>
	// This will remove the content of the file, and mark the file as
	// deleted.
	FileDelete *FileDeleteTransactionBody `protobuf:"bytes,18,opt,name=fileDelete,proto3,oneof"`
}

type TransactionBody_FileUpdate struct {
	// *
	// Modify a file.<br/>
	// This may modify any metadata, and/or _replace_ the content.
	FileUpdate *FileUpdateTransactionBody `protobuf:"bytes,19,opt,name=fileUpdate,proto3,oneof"`
}

type TransactionBody_SystemDelete struct {
	// *
	// Delete a file as an Hedera administrative function.<br/>
	// This is a privileged operation.
	SystemDelete *SystemDeleteTransactionBody `protobuf:"bytes,20,opt,name=systemDelete,proto3,oneof"`
}

type TransactionBody_SystemUndelete struct {
	// *
	// Restore a file deleted via `systemDelete`.<br/>
	// This is a privileged operation.
	SystemUndelete *SystemUndeleteTransactionBody `protobuf:"bytes,21,opt,name=systemUndelete,proto3,oneof"`
}

type TransactionBody_ContractDeleteInstance struct {
	// *
	// Delete a smart contract and transfer remaining balance
	// to a specified account.
	ContractDeleteInstance *ContractDeleteTransactionBody `protobuf:"bytes,22,opt,name=contractDeleteInstance,proto3,oneof"`
}

type TransactionBody_Freeze struct {
	// *
	// Freeze the network.<br/>
	// This is actually several possible operations, and the caller
	// should examine the "freeze service" for more detail.<br/>
	// This is a privileged operation.
	Freeze *FreezeTransactionBody `protobuf:"bytes,23,opt,name=freeze,proto3,oneof"`
}

type TransactionBody_ConsensusCreateTopic struct {
	// *
	// Create a topic.
	ConsensusCreateTopic *ConsensusCreateTopicTransactionBody `protobuf:"bytes,24,opt,name=consensusCreateTopic,proto3,oneof"`
}

type TransactionBody_ConsensusUpdateTopic struct {
	// *
	// Update a topic.
	ConsensusUpdateTopic *ConsensusUpdateTopicTransactionBody `protobuf:"bytes,25,opt,name=consensusUpdateTopic,proto3,oneof"`
}

type TransactionBody_ConsensusDeleteTopic struct {
	// *
	// Delete a topic.
	ConsensusDeleteTopic *ConsensusDeleteTopicTransactionBody `protobuf:"bytes,26,opt,name=consensusDeleteTopic,proto3,oneof"`
}

type TransactionBody_ConsensusSubmitMessage struct {
	// *
	// Submit a message to a topic.<br/>
	// A message may be "chunked", and submitted in parts, if the total
	// message size exceeds the limit for a single transaction.
	ConsensusSubmitMessage *ConsensusSubmitMessageTransactionBody `protobuf:"bytes,27,opt,name=consensusSubmitMessage,proto3,oneof"`
}

type TransactionBody_UncheckedSubmit struct {
	// *
	// Unsupported system transaction.
	// <p>
	// This transaction MAY be implemented in testing networks, but
	// SHALL NOT be enabled or supported in production environments.<br/>
	// Clients MUST NOT call this method, and any such transaction SHALL
	// be rejected.<br/>
	// A network MAY choose to charge punitive fees for attempting to
	// execute an `uncheckedSubmit`.
	UncheckedSubmit *UncheckedSubmitBody `protobuf:"bytes,28,opt,name=uncheckedSubmit,proto3,oneof"`
}

type TransactionBody_TokenCreation struct {
	// *
	// Create a new Hedera token.
	TokenCreation *TokenCreateTransactionBody `protobuf:"bytes,29,opt,name=tokenCreation,proto3,oneof"`
}

type TransactionBody_TokenFreeze struct {
	// *
	// Freeze an account with respect to a token.<br/>
	// A frozen account cannot transact in that token until unfrozen.
	TokenFreeze *TokenFreezeAccountTransactionBody `protobuf:"bytes,31,opt,name=tokenFreeze,proto3,oneof"`
}

type TransactionBody_TokenUnfreeze struct {
	// *
	// Unfreeze an account with respect to a token.
	TokenUnfreeze *TokenUnfreezeAccountTransactionBody `protobuf:"bytes,32,opt,name=tokenUnfreeze,proto3,oneof"`
}

type TransactionBody_TokenGrantKyc struct {
	// *
	// Grant KYC to an account with respect to a token.<br/>
	// KYC is generally a "know your customer" assertion that a
	// responsible entity has sufficient information to positively
	// identify the account holder to relevant authorities.
	TokenGrantKyc *TokenGrantKycTransactionBody `protobuf:"bytes,33,opt,name=tokenGrantKyc,proto3,oneof"`
}

type TransactionBody_TokenRevokeKyc struct {
	// *
	// Revoke KYC from an account with respect to a token.
	TokenRevokeKyc *TokenRevokeKycTransactionBody `protobuf:"bytes,34,opt,name=tokenRevokeKyc,proto3,oneof"`
}

type TransactionBody_TokenDeletion struct {
	// *
	// Delete an Hedera token.<br/>
	// The token will be marked deleted.
	TokenDeletion *TokenDeleteTransactionBody `protobuf:"bytes,35,opt,name=tokenDeletion,proto3,oneof"`
}

type TransactionBody_TokenUpdate struct {
	// *
	// Update an Hedera token.<br/>
	// Depending on what fields are to be modified, the signature
	// requirements will vary. See `TokenUpdateTransactionBody` for
	// further detail.
	TokenUpdate *TokenUpdateTransactionBody `protobuf:"bytes,36,opt,name=tokenUpdate,proto3,oneof"`
}

type TransactionBody_TokenMint struct {
	// *
	// Mint new tokens.<br/>
	// All minted tokens will be delivered to the treasury account for
	// the token type. The "mint key" for the token must sign this
	// transaction.
	TokenMint *TokenMintTransactionBody `protobuf:"bytes,37,opt,name=tokenMint,proto3,oneof"`
}

type TransactionBody_TokenBurn struct {
	// *
	// Burn tokens from the treasury account.<br/>
	// The "burn key" for the token must sign this transaction.
	TokenBurn *TokenBurnTransactionBody `protobuf:"bytes,38,opt,name=tokenBurn,proto3,oneof"`
}

type TransactionBody_TokenWipe struct {
	// *
	// Wipe tokens from an account.<br/>
	// This will remove a specified amount of fungible/common tokens or
	// a specified list of non-fungible/unique serial numbered tokens
	// of a given token type from an Hedera account. The removed tokens
	// are _burned_ as if by a `tokenBurn` transaction.<br/>
	// The "wipe key" for the token must sign this transaction.
	TokenWipe *TokenWipeAccountTransactionBody `protobuf:"bytes,39,opt,name=tokenWipe,proto3,oneof"`
}

type TransactionBody_TokenAssociate struct {
	// *
	// Associate tokens to an account.
	TokenAssociate *TokenAssociateTransactionBody `protobuf:"bytes,40,opt,name=tokenAssociate,proto3,oneof"`
}

type TransactionBody_TokenDissociate struct {
	// *
	// Dissociate tokens from an account.
	TokenDissociate *TokenDissociateTransactionBody `protobuf:"bytes,41,opt,name=tokenDissociate,proto3,oneof"`
}

type TransactionBody_ScheduleCreate struct {
	// *
	// Create a schedule.<br/>
	// A schedule is a request to execute a specific transaction, included
	// in the create body, in the future. The scheduled transaction may
	// execute as soon as all signature requirements are met with the
	// schedule create or a subsequent schedule sign transaction.
	// A schedule may, alternatively, execute on expiration if
	// long-term schedules are enabled and the schedule meets signature
	// requirements at that time.
	ScheduleCreate *ScheduleCreateTransactionBody `protobuf:"bytes,42,opt,name=scheduleCreate,proto3,oneof"`
}

type TransactionBody_ScheduleDelete struct {
	// *
	// Delete a schedule.<br/>
	// The schedule will be marked as deleted.
	ScheduleDelete *ScheduleDeleteTransactionBody `protobuf:"bytes,43,opt,name=scheduleDelete,proto3,oneof"`
}

type TransactionBody_ScheduleSign struct {
	// *
	// Sign a schedule.<br/>
	// Add one or more cryptographic keys to the list of keys that have
	// signed a schedule, and which may serve to meet the signature
	// requirements for the scheduled transaction.
	ScheduleSign *ScheduleSignTransactionBody `protobuf:"bytes,44,opt,name=scheduleSign,proto3,oneof"`
}

type TransactionBody_TokenFeeScheduleUpdate struct {
	// *
	// Update the custom fee schedule for a token.<br/>
	// This transaction must be signed by the "fee schedule key"
	// for the token.
	TokenFeeScheduleUpdate *TokenFeeScheduleUpdateTransactionBody `protobuf:"bytes,45,opt,name=token_fee_schedule_update,json=tokenFeeScheduleUpdate,proto3,oneof"`
}

type TransactionBody_TokenPause struct {
	// *
	// Pause a Token.
	// <p>
	// This transaction MUST be signed by the "pause key" for the token.
	TokenPause *TokenPauseTransactionBody `protobuf:"bytes,46,opt,name=token_pause,json=tokenPause,proto3,oneof"`
}

type TransactionBody_TokenUnpause struct {
	// *
	// Unpause a Token.
	// <p>
	// This transaction MUST be signed by the "pause key" for the token.
	TokenUnpause *TokenUnpauseTransactionBody `protobuf:"bytes,47,opt,name=token_unpause,json=tokenUnpause,proto3,oneof"`
}

type TransactionBody_CryptoApproveAllowance struct {
	// *
	// Add one or more approved allowances for spenders to transfer the
	// paying account's hbar or tokens.
	CryptoApproveAllowance *CryptoApproveAllowanceTransactionBody `protobuf:"bytes,48,opt,name=cryptoApproveAllowance,proto3,oneof"`
}

type TransactionBody_CryptoDeleteAllowance struct {
	// *
	// Delete one or more approvals for spenders to transfer the
	// paying account's hbar or tokens.
	CryptoDeleteAllowance *CryptoDeleteAllowanceTransactionBody `protobuf:"bytes,49,opt,name=cryptoDeleteAllowance,proto3,oneof"`
}

type TransactionBody_EthereumTransaction struct {
	// *
	// Perform an Ethereum encoded transaction.
	EthereumTransaction *EthereumTransactionBody `protobuf:"bytes,50,opt,name=ethereumTransaction,proto3,oneof"`
}

type TransactionBody_NodeStakeUpdate struct {
	// *
	// Update the staking information.<br/>
	// This internal transaction is performed at the end of a staking
	// period to complete staking calculations and indicate that new
	// staking period has started.
	NodeStakeUpdate *NodeStakeUpdateTransactionBody `protobuf:"bytes,51,opt,name=node_stake_update,json=nodeStakeUpdate,proto3,oneof"`
}

type TransactionBody_UtilPrng struct {
	// *
	// Provide a deterministic pseudorandom number based on network state.
	UtilPrng *UtilPrngTransactionBody `protobuf:"bytes,52,opt,name=util_prng,json=utilPrng,proto3,oneof"`
}

type TransactionBody_TokenUpdateNfts struct {
	// *
	// Update one or more non-fungible/unique tokens.<br/>
	// This will update metadata for one or more serial numbers within
	// a collection (token type).
	TokenUpdateNfts *TokenUpdateNftsTransactionBody `protobuf:"bytes,53,opt,name=token_update_nfts,json=tokenUpdateNfts,proto3,oneof"`
}

type TransactionBody_NodeCreate struct {
	// *
	// Create a new node in the network address book.<br/>
	// This is a privileged operation.
	// <p>
	// This transaction SHALL create a new consensus node record and add
	// that record to the network address book.
	NodeCreate *NodeCreateTransactionBody `protobuf:"bytes,54,opt,name=nodeCreate,proto3,oneof"`
}

type TransactionBody_NodeUpdate struct {
	// *
	// Update a node in the network address book.<br/>
	// This is a privileged operation.
	// <p>
	// This transaction SHALL update an existing consensus node record in
	// the network address book.
	NodeUpdate *NodeUpdateTransactionBody `protobuf:"bytes,55,opt,name=nodeUpdate,proto3,oneof"`
}

type TransactionBody_NodeDelete struct {
	// *
	// Delete a node from the network address book.<br/>
	// This is a privileged operation.
	// <p>
	// This transaction SHALL mark an existing consensus node record as
	// deleted and remove that node from the network address book.
	NodeDelete *NodeDeleteTransactionBody `protobuf:"bytes,56,opt,name=nodeDelete,proto3,oneof"`
}

type TransactionBody_TokenReject struct {
	// *
	// Reject and return a token to treasury.<br/>
	// This transaction will transfer one or more tokens or token
	// balances held by the requesting account to the treasury
	// for each token type.
	// <p>
	// Each transfer MUST be one of the following:
	// <ul>
	//
	//	<li>A single non-fungible/unique token.</li>
	//	<li>The full balance held for a fungible/common
	//	    token type.</li>
	//
	// </ul>
	// When complete, the requesting account SHALL NOT hold the
	// rejected tokens.<br/>
	// Custom fees and royalties defined for the tokens rejected
	// SHALL NOT be charged for this transaction.
	TokenReject *TokenRejectTransactionBody `protobuf:"bytes,57,opt,name=tokenReject,proto3,oneof"`
}

type TransactionBody_TokenAirdrop struct {
	// *
	// "Airdrop" tokens.<br/>
	// This transaction sends tokens from one or more "sender" accounts
	// to one or more "recipient" accounts.
	// <p>
	// If a recipient account cannot immediately receive the token(s) sent,
	// a "pending" airdrop SHALL be created and MUST be claimed.
	TokenAirdrop *TokenAirdropTransactionBody `protobuf:"bytes,58,opt,name=tokenAirdrop,proto3,oneof"`
}

type TransactionBody_TokenCancelAirdrop struct {
	// *
	// Cancel one or more "pending" airdrops that are not yet claimed.
	TokenCancelAirdrop *TokenCancelAirdropTransactionBody `protobuf:"bytes,59,opt,name=tokenCancelAirdrop,proto3,oneof"`
}

type TransactionBody_TokenClaimAirdrop struct {
	// *
	// Claim one or more "pending" airdrops.
	TokenClaimAirdrop *TokenClaimAirdropTransactionBody `protobuf:"bytes,60,opt,name=tokenClaimAirdrop,proto3,oneof"`
}

type TransactionBody_StateSignatureTransaction struct {
	// *
	// A transaction body for signature of a state root hash gossiped to other nodes
	StateSignatureTransaction *StateSignatureTransaction `protobuf:"bytes,65,opt,name=state_signature_transaction,json=stateSignatureTransaction,proto3,oneof"`
}

type TransactionBody_HintsPreprocessingVote struct {
	// *
	// A transaction body for voting on hinTS aggregation keys.
	HintsPreprocessingVote *HintsPreprocessingVoteTransactionBody `protobuf:"bytes,66,opt,name=hints_preprocessing_vote,json=hintsPreprocessingVote,proto3,oneof"`
}

type TransactionBody_HintsKeyPublication struct {
	// *
	// A transaction body for publishing a node's hintTS key.
	HintsKeyPublication *HintsKeyPublicationTransactionBody `protobuf:"bytes,67,opt,name=hints_key_publication,json=hintsKeyPublication,proto3,oneof"`
}

type TransactionBody_HintsPartialSignature struct {
	// *
	// A transaction body for broadcasting a node's hintTS partial signature on a message.
	HintsPartialSignature *HintsPartialSignatureTransactionBody `protobuf:"bytes,68,opt,name=hints_partial_signature,json=hintsPartialSignature,proto3,oneof"`
}

type TransactionBody_HistoryProofSignature struct {
	// *
	// A transaction body for contributed a signature with a node's proof key to a history proof.
	HistoryProofSignature *HistoryProofSignatureTransactionBody `protobuf:"bytes,69,opt,name=history_proof_signature,json=historyProofSignature,proto3,oneof"`
}

type TransactionBody_HistoryProofKeyPublication struct {
	// *
	// A transaction body for publishing a node's metadata proof key.
	HistoryProofKeyPublication *HistoryProofKeyPublicationTransactionBody `protobuf:"bytes,70,opt,name=history_proof_key_publication,json=historyProofKeyPublication,proto3,oneof"`
}

type TransactionBody_HistoryProofVote struct {
	// *
	// A transaction body for voting on a metadata proof descending from the ledger id.
	HistoryProofVote *HistoryProofVoteTransactionBody `protobuf:"bytes,71,opt,name=history_proof_vote,json=historyProofVote,proto3,oneof"`
}

type TransactionBody_CrsPublication struct {
	// *
	// A transaction body for broadcasting a node's crs publication
	CrsPublication *CrsPublicationTransactionBody `protobuf:"bytes,72,opt,name=crs_publication,json=crsPublication,proto3,oneof"`
}

type TransactionBody_AtomicBatch struct {
	// *
	// A transaction body for handling a set of transactions atomically.
	AtomicBatch *AtomicBatchTransactionBody `protobuf:"bytes,74,opt,name=atomic_batch,json=atomicBatch,proto3,oneof"`
}

type TransactionBody_LambdaSstore struct {
	// *
	// A transaction body for updating the storage of a EVM lambda hook.
	LambdaSstore *LambdaSStoreTransactionBody `protobuf:"bytes,75,opt,name=lambda_sstore,json=lambdaSstore,proto3,oneof"`
}

type TransactionBody_HookDispatch struct {
	// *
	// An internal-only transaction body for dispatching a hook CRUD operation.
	HookDispatch *HookDispatchTransactionBody `protobuf:"bytes,76,opt,name=hook_dispatch,json=hookDispatch,proto3,oneof"`
}

func (*TransactionBody_ContractCall) isTransactionBody_Data() {}

func (*TransactionBody_ContractCreateInstance) isTransactionBody_Data() {}

func (*TransactionBody_ContractUpdateInstance) isTransactionBody_Data() {}

func (*TransactionBody_CryptoAddLiveHash) isTransactionBody_Data() {}

func (*TransactionBody_CryptoCreateAccount) isTransactionBody_Data() {}

func (*TransactionBody_CryptoDelete) isTransactionBody_Data() {}

func (*TransactionBody_CryptoDeleteLiveHash) isTransactionBody_Data() {}

func (*TransactionBody_CryptoTransfer) isTransactionBody_Data() {}

func (*TransactionBody_CryptoUpdateAccount) isTransactionBody_Data() {}

func (*TransactionBody_FileAppend) isTransactionBody_Data() {}

func (*TransactionBody_FileCreate) isTransactionBody_Data() {}

func (*TransactionBody_FileDelete) isTransactionBody_Data() {}

func (*TransactionBody_FileUpdate) isTransactionBody_Data() {}

func (*TransactionBody_SystemDelete) isTransactionBody_Data() {}

func (*TransactionBody_SystemUndelete) isTransactionBody_Data() {}

func (*TransactionBody_ContractDeleteInstance) isTransactionBody_Data() {}

func (*TransactionBody_Freeze) isTransactionBody_Data() {}

func (*TransactionBody_ConsensusCreateTopic) isTransactionBody_Data() {}

func (*TransactionBody_ConsensusUpdateTopic) isTransactionBody_Data() {}

func (*TransactionBody_ConsensusDeleteTopic) isTransactionBody_Data() {}

func (*TransactionBody_ConsensusSubmitMessage) isTransactionBody_Data() {}

func (*TransactionBody_UncheckedSubmit) isTransactionBody_Data() {}

func (*TransactionBody_TokenCreation) isTransactionBody_Data() {}

func (*TransactionBody_TokenFreeze) isTransactionBody_Data() {}

func (*TransactionBody_TokenUnfreeze) isTransactionBody_Data() {}

func (*TransactionBody_TokenGrantKyc) isTransactionBody_Data() {}

func (*TransactionBody_TokenRevokeKyc) isTransactionBody_Data() {}

func (*TransactionBody_TokenDeletion) isTransactionBody_Data() {}

func (*TransactionBody_TokenUpdate) isTransactionBody_Data() {}

func (*TransactionBody_TokenMint) isTransactionBody_Data() {}

func (*TransactionBody_TokenBurn) isTransactionBody_Data() {}

func (*TransactionBody_TokenWipe) isTransactionBody_Data() {}

func (*TransactionBody_TokenAssociate) isTransactionBody_Data() {}

func (*TransactionBody_TokenDissociate) isTransactionBody_Data() {}

func (*TransactionBody_ScheduleCreate) isTransactionBody_Data() {}

func (*TransactionBody_ScheduleDelete) isTransactionBody_Data() {}

func (*TransactionBody_ScheduleSign) isTransactionBody_Data() {}

func (*TransactionBody_TokenFeeScheduleUpdate) isTransactionBody_Data() {}

func (*TransactionBody_TokenPause) isTransactionBody_Data() {}

func (*TransactionBody_TokenUnpause) isTransactionBody_Data() {}

func (*TransactionBody_CryptoApproveAllowance) isTransactionBody_Data() {}

func (*TransactionBody_CryptoDeleteAllowance) isTransactionBody_Data() {}

func (*TransactionBody_EthereumTransaction) isTransactionBody_Data() {}

func (*TransactionBody_NodeStakeUpdate) isTransactionBody_Data() {}

func (*TransactionBody_UtilPrng) isTransactionBody_Data() {}

func (*TransactionBody_TokenUpdateNfts) isTransactionBody_Data() {}

func (*TransactionBody_NodeCreate) isTransactionBody_Data() {}

func (*TransactionBody_NodeUpdate) isTransactionBody_Data() {}

func (*TransactionBody_NodeDelete) isTransactionBody_Data() {}

func (*TransactionBody_TokenReject) isTransactionBody_Data() {}

func (*TransactionBody_TokenAirdrop) isTransactionBody_Data() {}

func (*TransactionBody_TokenCancelAirdrop) isTransactionBody_Data() {}

func (*TransactionBody_TokenClaimAirdrop) isTransactionBody_Data() {}

func (*TransactionBody_StateSignatureTransaction) isTransactionBody_Data() {}

func (*TransactionBody_HintsPreprocessingVote) isTransactionBody_Data() {}

func (*TransactionBody_HintsKeyPublication) isTransactionBody_Data() {}

func (*TransactionBody_HintsPartialSignature) isTransactionBody_Data() {}

func (*TransactionBody_HistoryProofSignature) isTransactionBody_Data() {}

func (*TransactionBody_HistoryProofKeyPublication) isTransactionBody_Data() {}

func (*TransactionBody_HistoryProofVote) isTransactionBody_Data() {}

func (*TransactionBody_CrsPublication) isTransactionBody_Data() {}

func (*TransactionBody_AtomicBatch) isTransactionBody_Data() {}

func (*TransactionBody_LambdaSstore) isTransactionBody_Data() {}

func (*TransactionBody_HookDispatch) isTransactionBody_Data() {}

// *
// A transaction body for handling a set of transactions atomically.
type AtomicBatchTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A list of signed bytes that represent the batch transactions.
	Transactions  [][]byte `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AtomicBatchTransactionBody) Reset() {
	*x = AtomicBatchTransactionBody{}
	mi := &file_transaction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AtomicBatchTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicBatchTransactionBody) ProtoMessage() {}

func (x *AtomicBatchTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomicBatchTransactionBody.ProtoReflect.Descriptor instead.
func (*AtomicBatchTransactionBody) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *AtomicBatchTransactionBody) GetTransactions() [][]byte {
	if x != nil {
		return x.Transactions
	}
	return nil
}

var File_transaction_proto protoreflect.FileDescriptor

const file_transaction_proto_rawDesc = "" +
	"\n" +
	"\x11transaction.proto\x12\x05proto\x1a\x11basic_types.proto\x1a\x13system_delete.proto\x1a\x15system_undelete.proto\x1a\ffreeze.proto\x1a\x13contract_call.proto\x1a\x15contract_create.proto\x1a\x15contract_update.proto\x1a\x1acrypto_add_live_hash.proto\x1a\x13crypto_create.proto\x1a\x13crypto_delete.proto\x1a\x1dcrypto_delete_live_hash.proto\x1a\x15crypto_transfer.proto\x1a\x13crypto_update.proto\x1a\x1ecrypto_approve_allowance.proto\x1a\x1dcrypto_delete_allowance.proto\x1a\x1aethereum_transaction.proto\x1a\x11file_append.proto\x1a\x11file_create.proto\x1a\x11file_delete.proto\x1a\x11file_update.proto\x1a\x0eduration.proto\x1a\x15contract_delete.proto\x1a\x1cconsensus_create_topic.proto\x1a\x1cconsensus_update_topic.proto\x1a\x1cconsensus_delete_topic.proto\x1a\x1econsensus_submit_message.proto\x1a\x16unchecked_submit.proto\x1a\x12token_create.proto\x1a\x1atoken_freeze_account.proto\x1a\x1ctoken_unfreeze_account.proto\x1a\x15token_grant_kyc.proto\x1a\x16token_revoke_kyc.proto\x1a\x12token_delete.proto\x1a\x12token_update.proto\x1a\x10token_mint.proto\x1a\x10token_burn.proto\x1a\x18token_wipe_account.proto\x1a\x15token_associate.proto\x1a\x16token_dissociate.proto\x1a\x1ftoken_fee_schedule_update.proto\x1a\x11token_pause.proto\x1a\x13token_unpause.proto\x1a\x17token_update_nfts.proto\x1a\x12token_reject.proto\x1a\x13token_airdrop.proto\x1a\x1atoken_cancel_airdrop.proto\x1a\x19token_claim_airdrop.proto\x1a\x15schedule_create.proto\x1a\x15schedule_delete.proto\x1a\x13schedule_sign.proto\x1a\x17node_stake_update.proto\x1a\x0futil_prng.proto\x1a\x11node_create.proto\x1a\x11node_update.proto\x1a\x11node_delete.proto\x1a\x11custom_fees.proto\x1a!state_signature_transaction.proto\x1a\x1bhints_key_publication.proto\x1a\x1ehints_preprocessing_vote.proto\x1a\x1dhints_partial_signature.proto\x1a\x15crs_publication.proto\x1a\x1dhistory_proof_signature.proto\x1a#history_proof_key_publication.proto\x1a\x18history_proof_vote.proto\x1a\x13lambda_sstore.proto\x1a\x13hook_dispatch.proto\"\xf6\x01\n" +
	"\vTransaction\x12.\n" +
	"\x04body\x18\x01 \x01(\v2\x16.proto.TransactionBodyB\x02\x18\x01R\x04body\x12,\n" +
	"\x04sigs\x18\x02 \x01(\v2\x14.proto.SignatureListB\x02\x18\x01R\x04sigs\x12/\n" +
	"\x06sigMap\x18\x03 \x01(\v2\x13.proto.SignatureMapB\x02\x18\x01R\x06sigMap\x12 \n" +
	"\tbodyBytes\x18\x04 \x01(\fB\x02\x18\x01R\tbodyBytes\x126\n" +
	"\x16signedTransactionBytes\x18\x05 \x01(\fR\x16signedTransactionBytes\"\xcb0\n" +
	"\x0fTransactionBody\x12:\n" +
	"\rtransactionID\x18\x01 \x01(\v2\x14.proto.TransactionIDR\rtransactionID\x126\n" +
	"\rnodeAccountID\x18\x02 \x01(\v2\x10.proto.AccountIDR\rnodeAccountID\x12&\n" +
	"\x0etransactionFee\x18\x03 \x01(\x04R\x0etransactionFee\x12K\n" +
	"\x18transactionValidDuration\x18\x04 \x01(\v2\x0f.proto.DurationR\x18transactionValidDuration\x12*\n" +
	"\x0egenerateRecord\x18\x05 \x01(\bB\x02\x18\x01R\x0egenerateRecord\x12\x12\n" +
	"\x04memo\x18\x06 \x01(\tR\x04memo\x12'\n" +
	"\tbatch_key\x18I \x01(\v2\n" +
	".proto.KeyR\bbatchKey\x12H\n" +
	"\fcontractCall\x18\a \x01(\v2\".proto.ContractCallTransactionBodyH\x00R\fcontractCall\x12^\n" +
	"\x16contractCreateInstance\x18\b \x01(\v2$.proto.ContractCreateTransactionBodyH\x00R\x16contractCreateInstance\x12^\n" +
	"\x16contractUpdateInstance\x18\t \x01(\v2$.proto.ContractUpdateTransactionBodyH\x00R\x16contractUpdateInstance\x12[\n" +
	"\x11cryptoAddLiveHash\x18\n" +
	" \x01(\v2'.proto.CryptoAddLiveHashTransactionBodyB\x02\x18\x01H\x00R\x11cryptoAddLiveHash\x12V\n" +
	"\x13cryptoCreateAccount\x18\v \x01(\v2\".proto.CryptoCreateTransactionBodyH\x00R\x13cryptoCreateAccount\x12H\n" +
	"\fcryptoDelete\x18\f \x01(\v2\".proto.CryptoDeleteTransactionBodyH\x00R\fcryptoDelete\x12d\n" +
	"\x14cryptoDeleteLiveHash\x18\r \x01(\v2*.proto.CryptoDeleteLiveHashTransactionBodyB\x02\x18\x01H\x00R\x14cryptoDeleteLiveHash\x12N\n" +
	"\x0ecryptoTransfer\x18\x0e \x01(\v2$.proto.CryptoTransferTransactionBodyH\x00R\x0ecryptoTransfer\x12V\n" +
	"\x13cryptoUpdateAccount\x18\x0f \x01(\v2\".proto.CryptoUpdateTransactionBodyH\x00R\x13cryptoUpdateAccount\x12B\n" +
	"\n" +
	"fileAppend\x18\x10 \x01(\v2 .proto.FileAppendTransactionBodyH\x00R\n" +
	"fileAppend\x12B\n" +
	"\n" +
	"fileCreate\x18\x11 \x01(\v2 .proto.FileCreateTransactionBodyH\x00R\n" +
	"fileCreate\x12B\n" +
	"\n" +
	"fileDelete\x18\x12 \x01(\v2 .proto.FileDeleteTransactionBodyH\x00R\n" +
	"fileDelete\x12B\n" +
	"\n" +
	"fileUpdate\x18\x13 \x01(\v2 .proto.FileUpdateTransactionBodyH\x00R\n" +
	"fileUpdate\x12H\n" +
	"\fsystemDelete\x18\x14 \x01(\v2\".proto.SystemDeleteTransactionBodyH\x00R\fsystemDelete\x12N\n" +
	"\x0esystemUndelete\x18\x15 \x01(\v2$.proto.SystemUndeleteTransactionBodyH\x00R\x0esystemUndelete\x12^\n" +
	"\x16contractDeleteInstance\x18\x16 \x01(\v2$.proto.ContractDeleteTransactionBodyH\x00R\x16contractDeleteInstance\x126\n" +
	"\x06freeze\x18\x17 \x01(\v2\x1c.proto.FreezeTransactionBodyH\x00R\x06freeze\x12`\n" +
	"\x14consensusCreateTopic\x18\x18 \x01(\v2*.proto.ConsensusCreateTopicTransactionBodyH\x00R\x14consensusCreateTopic\x12`\n" +
	"\x14consensusUpdateTopic\x18\x19 \x01(\v2*.proto.ConsensusUpdateTopicTransactionBodyH\x00R\x14consensusUpdateTopic\x12`\n" +
	"\x14consensusDeleteTopic\x18\x1a \x01(\v2*.proto.ConsensusDeleteTopicTransactionBodyH\x00R\x14consensusDeleteTopic\x12f\n" +
	"\x16consensusSubmitMessage\x18\x1b \x01(\v2,.proto.ConsensusSubmitMessageTransactionBodyH\x00R\x16consensusSubmitMessage\x12F\n" +
	"\x0funcheckedSubmit\x18\x1c \x01(\v2\x1a.proto.UncheckedSubmitBodyH\x00R\x0funcheckedSubmit\x12I\n" +
	"\rtokenCreation\x18\x1d \x01(\v2!.proto.TokenCreateTransactionBodyH\x00R\rtokenCreation\x12L\n" +
	"\vtokenFreeze\x18\x1f \x01(\v2(.proto.TokenFreezeAccountTransactionBodyH\x00R\vtokenFreeze\x12R\n" +
	"\rtokenUnfreeze\x18  \x01(\v2*.proto.TokenUnfreezeAccountTransactionBodyH\x00R\rtokenUnfreeze\x12K\n" +
	"\rtokenGrantKyc\x18! \x01(\v2#.proto.TokenGrantKycTransactionBodyH\x00R\rtokenGrantKyc\x12N\n" +
	"\x0etokenRevokeKyc\x18\" \x01(\v2$.proto.TokenRevokeKycTransactionBodyH\x00R\x0etokenRevokeKyc\x12I\n" +
	"\rtokenDeletion\x18# \x01(\v2!.proto.TokenDeleteTransactionBodyH\x00R\rtokenDeletion\x12E\n" +
	"\vtokenUpdate\x18$ \x01(\v2!.proto.TokenUpdateTransactionBodyH\x00R\vtokenUpdate\x12?\n" +
	"\ttokenMint\x18% \x01(\v2\x1f.proto.TokenMintTransactionBodyH\x00R\ttokenMint\x12?\n" +
	"\ttokenBurn\x18& \x01(\v2\x1f.proto.TokenBurnTransactionBodyH\x00R\ttokenBurn\x12F\n" +
	"\ttokenWipe\x18' \x01(\v2&.proto.TokenWipeAccountTransactionBodyH\x00R\ttokenWipe\x12N\n" +
	"\x0etokenAssociate\x18( \x01(\v2$.proto.TokenAssociateTransactionBodyH\x00R\x0etokenAssociate\x12Q\n" +
	"\x0ftokenDissociate\x18) \x01(\v2%.proto.TokenDissociateTransactionBodyH\x00R\x0ftokenDissociate\x12N\n" +
	"\x0escheduleCreate\x18* \x01(\v2$.proto.ScheduleCreateTransactionBodyH\x00R\x0escheduleCreate\x12N\n" +
	"\x0escheduleDelete\x18+ \x01(\v2$.proto.ScheduleDeleteTransactionBodyH\x00R\x0escheduleDelete\x12H\n" +
	"\fscheduleSign\x18, \x01(\v2\".proto.ScheduleSignTransactionBodyH\x00R\fscheduleSign\x12i\n" +
	"\x19token_fee_schedule_update\x18- \x01(\v2,.proto.TokenFeeScheduleUpdateTransactionBodyH\x00R\x16tokenFeeScheduleUpdate\x12C\n" +
	"\vtoken_pause\x18. \x01(\v2 .proto.TokenPauseTransactionBodyH\x00R\n" +
	"tokenPause\x12I\n" +
	"\rtoken_unpause\x18/ \x01(\v2\".proto.TokenUnpauseTransactionBodyH\x00R\ftokenUnpause\x12f\n" +
	"\x16cryptoApproveAllowance\x180 \x01(\v2,.proto.CryptoApproveAllowanceTransactionBodyH\x00R\x16cryptoApproveAllowance\x12c\n" +
	"\x15cryptoDeleteAllowance\x181 \x01(\v2+.proto.CryptoDeleteAllowanceTransactionBodyH\x00R\x15cryptoDeleteAllowance\x12R\n" +
	"\x13ethereumTransaction\x182 \x01(\v2\x1e.proto.EthereumTransactionBodyH\x00R\x13ethereumTransaction\x12S\n" +
	"\x11node_stake_update\x183 \x01(\v2%.proto.NodeStakeUpdateTransactionBodyH\x00R\x0fnodeStakeUpdate\x12=\n" +
	"\tutil_prng\x184 \x01(\v2\x1e.proto.UtilPrngTransactionBodyH\x00R\butilPrng\x12S\n" +
	"\x11token_update_nfts\x185 \x01(\v2%.proto.TokenUpdateNftsTransactionBodyH\x00R\x0ftokenUpdateNfts\x12]\n" +
	"\n" +
	"nodeCreate\x186 \x01(\v2;.com.hedera.hapi.node.addressbook.NodeCreateTransactionBodyH\x00R\n" +
	"nodeCreate\x12]\n" +
	"\n" +
	"nodeUpdate\x187 \x01(\v2;.com.hedera.hapi.node.addressbook.NodeUpdateTransactionBodyH\x00R\n" +
	"nodeUpdate\x12]\n" +
	"\n" +
	"nodeDelete\x188 \x01(\v2;.com.hedera.hapi.node.addressbook.NodeDeleteTransactionBodyH\x00R\n" +
	"nodeDelete\x12E\n" +
	"\vtokenReject\x189 \x01(\v2!.proto.TokenRejectTransactionBodyH\x00R\vtokenReject\x12H\n" +
	"\ftokenAirdrop\x18: \x01(\v2\".proto.TokenAirdropTransactionBodyH\x00R\ftokenAirdrop\x12Z\n" +
	"\x12tokenCancelAirdrop\x18; \x01(\v2(.proto.TokenCancelAirdropTransactionBodyH\x00R\x12tokenCancelAirdrop\x12W\n" +
	"\x11tokenClaimAirdrop\x18< \x01(\v2'.proto.TokenClaimAirdropTransactionBodyH\x00R\x11tokenClaimAirdrop\x12{\n" +
	"\x1bstate_signature_transaction\x18A \x01(\v29.com.hedera.hapi.platform.event.StateSignatureTransactionH\x00R\x19stateSignatureTransaction\x12\x8b\x01\n" +
	"\x18hints_preprocessing_vote\x18B \x01(\v2O.com.hedera.hapi.services.auxiliary.hints.HintsPreprocessingVoteTransactionBodyH\x00R\x16hintsPreprocessingVote\x12\x82\x01\n" +
	"\x15hints_key_publication\x18C \x01(\v2L.com.hedera.hapi.services.auxiliary.hints.HintsKeyPublicationTransactionBodyH\x00R\x13hintsKeyPublication\x12\x88\x01\n" +
	"\x17hints_partial_signature\x18D \x01(\v2N.com.hedera.hapi.services.auxiliary.hints.HintsPartialSignatureTransactionBodyH\x00R\x15hintsPartialSignature\x12\x8a\x01\n" +
	"\x17history_proof_signature\x18E \x01(\v2P.com.hedera.hapi.services.auxiliary.history.HistoryProofSignatureTransactionBodyH\x00R\x15historyProofSignature\x12\x9a\x01\n" +
	"\x1dhistory_proof_key_publication\x18F \x01(\v2U.com.hedera.hapi.services.auxiliary.history.HistoryProofKeyPublicationTransactionBodyH\x00R\x1ahistoryProofKeyPublication\x12{\n" +
	"\x12history_proof_vote\x18G \x01(\v2K.com.hedera.hapi.services.auxiliary.history.HistoryProofVoteTransactionBodyH\x00R\x10historyProofVote\x12r\n" +
	"\x0fcrs_publication\x18H \x01(\v2G.com.hedera.hapi.services.auxiliary.hints.CrsPublicationTransactionBodyH\x00R\x0ecrsPublication\x12F\n" +
	"\fatomic_batch\x18J \x01(\v2!.proto.AtomicBatchTransactionBodyH\x00R\vatomicBatch\x12^\n" +
	"\rlambda_sstore\x18K \x01(\v27.com.hedera.hapi.node.hooks.LambdaSStoreTransactionBodyH\x00R\flambdaSstore\x12^\n" +
	"\rhook_dispatch\x18L \x01(\v27.com.hedera.hapi.node.hooks.HookDispatchTransactionBodyH\x00R\fhookDispatch\x12>\n" +
	"\x0fmax_custom_fees\x18\xe9\a \x03(\v2\x15.proto.CustomFeeLimitR\rmaxCustomFeesB\x06\n" +
	"\x04dataJ\x04\b\x1e\x10\x1fJ\x04\b=\x10>J\x04\b>\x10?J\x04\b?\x10@J\x04\b@\x10AR\n" +
	"tssMessageR\atssVoteR\x11tssShareSignatureR\x10tssEncryptionKey\"@\n" +
	"\x1aAtomicBatchTransactionBody\x12\"\n" +
	"\ftransactions\x18\x01 \x03(\fR\ftransactionsB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_transaction_proto_rawDescOnce sync.Once
	file_transaction_proto_rawDescData []byte
)

func file_transaction_proto_rawDescGZIP() []byte {
	file_transaction_proto_rawDescOnce.Do(func() {
		file_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_transaction_proto_rawDesc), len(file_transaction_proto_rawDesc)))
	})
	return file_transaction_proto_rawDescData
}

var file_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_transaction_proto_goTypes = []any{
	(*Transaction)(nil),                               // 0: proto.Transaction
	(*TransactionBody)(nil),                           // 1: proto.TransactionBody
	(*AtomicBatchTransactionBody)(nil),                // 2: proto.AtomicBatchTransactionBody
	(*SignatureList)(nil),                             // 3: proto.SignatureList
	(*SignatureMap)(nil),                              // 4: proto.SignatureMap
	(*TransactionID)(nil),                             // 5: proto.TransactionID
	(*AccountID)(nil),                                 // 6: proto.AccountID
	(*Duration)(nil),                                  // 7: proto.Duration
	(*Key)(nil),                                       // 8: proto.Key
	(*ContractCallTransactionBody)(nil),               // 9: proto.ContractCallTransactionBody
	(*ContractCreateTransactionBody)(nil),             // 10: proto.ContractCreateTransactionBody
	(*ContractUpdateTransactionBody)(nil),             // 11: proto.ContractUpdateTransactionBody
	(*CryptoAddLiveHashTransactionBody)(nil),          // 12: proto.CryptoAddLiveHashTransactionBody
	(*CryptoCreateTransactionBody)(nil),               // 13: proto.CryptoCreateTransactionBody
	(*CryptoDeleteTransactionBody)(nil),               // 14: proto.CryptoDeleteTransactionBody
	(*CryptoDeleteLiveHashTransactionBody)(nil),       // 15: proto.CryptoDeleteLiveHashTransactionBody
	(*CryptoTransferTransactionBody)(nil),             // 16: proto.CryptoTransferTransactionBody
	(*CryptoUpdateTransactionBody)(nil),               // 17: proto.CryptoUpdateTransactionBody
	(*FileAppendTransactionBody)(nil),                 // 18: proto.FileAppendTransactionBody
	(*FileCreateTransactionBody)(nil),                 // 19: proto.FileCreateTransactionBody
	(*FileDeleteTransactionBody)(nil),                 // 20: proto.FileDeleteTransactionBody
	(*FileUpdateTransactionBody)(nil),                 // 21: proto.FileUpdateTransactionBody
	(*SystemDeleteTransactionBody)(nil),               // 22: proto.SystemDeleteTransactionBody
	(*SystemUndeleteTransactionBody)(nil),             // 23: proto.SystemUndeleteTransactionBody
	(*ContractDeleteTransactionBody)(nil),             // 24: proto.ContractDeleteTransactionBody
	(*FreezeTransactionBody)(nil),                     // 25: proto.FreezeTransactionBody
	(*ConsensusCreateTopicTransactionBody)(nil),       // 26: proto.ConsensusCreateTopicTransactionBody
	(*ConsensusUpdateTopicTransactionBody)(nil),       // 27: proto.ConsensusUpdateTopicTransactionBody
	(*ConsensusDeleteTopicTransactionBody)(nil),       // 28: proto.ConsensusDeleteTopicTransactionBody
	(*ConsensusSubmitMessageTransactionBody)(nil),     // 29: proto.ConsensusSubmitMessageTransactionBody
	(*UncheckedSubmitBody)(nil),                       // 30: proto.UncheckedSubmitBody
	(*TokenCreateTransactionBody)(nil),                // 31: proto.TokenCreateTransactionBody
	(*TokenFreezeAccountTransactionBody)(nil),         // 32: proto.TokenFreezeAccountTransactionBody
	(*TokenUnfreezeAccountTransactionBody)(nil),       // 33: proto.TokenUnfreezeAccountTransactionBody
	(*TokenGrantKycTransactionBody)(nil),              // 34: proto.TokenGrantKycTransactionBody
	(*TokenRevokeKycTransactionBody)(nil),             // 35: proto.TokenRevokeKycTransactionBody
	(*TokenDeleteTransactionBody)(nil),                // 36: proto.TokenDeleteTransactionBody
	(*TokenUpdateTransactionBody)(nil),                // 37: proto.TokenUpdateTransactionBody
	(*TokenMintTransactionBody)(nil),                  // 38: proto.TokenMintTransactionBody
	(*TokenBurnTransactionBody)(nil),                  // 39: proto.TokenBurnTransactionBody
	(*TokenWipeAccountTransactionBody)(nil),           // 40: proto.TokenWipeAccountTransactionBody
	(*TokenAssociateTransactionBody)(nil),             // 41: proto.TokenAssociateTransactionBody
	(*TokenDissociateTransactionBody)(nil),            // 42: proto.TokenDissociateTransactionBody
	(*ScheduleCreateTransactionBody)(nil),             // 43: proto.ScheduleCreateTransactionBody
	(*ScheduleDeleteTransactionBody)(nil),             // 44: proto.ScheduleDeleteTransactionBody
	(*ScheduleSignTransactionBody)(nil),               // 45: proto.ScheduleSignTransactionBody
	(*TokenFeeScheduleUpdateTransactionBody)(nil),     // 46: proto.TokenFeeScheduleUpdateTransactionBody
	(*TokenPauseTransactionBody)(nil),                 // 47: proto.TokenPauseTransactionBody
	(*TokenUnpauseTransactionBody)(nil),               // 48: proto.TokenUnpauseTransactionBody
	(*CryptoApproveAllowanceTransactionBody)(nil),     // 49: proto.CryptoApproveAllowanceTransactionBody
	(*CryptoDeleteAllowanceTransactionBody)(nil),      // 50: proto.CryptoDeleteAllowanceTransactionBody
	(*EthereumTransactionBody)(nil),                   // 51: proto.EthereumTransactionBody
	(*NodeStakeUpdateTransactionBody)(nil),            // 52: proto.NodeStakeUpdateTransactionBody
	(*UtilPrngTransactionBody)(nil),                   // 53: proto.UtilPrngTransactionBody
	(*TokenUpdateNftsTransactionBody)(nil),            // 54: proto.TokenUpdateNftsTransactionBody
	(*NodeCreateTransactionBody)(nil),                 // 55: com.hedera.hapi.node.addressbook.NodeCreateTransactionBody
	(*NodeUpdateTransactionBody)(nil),                 // 56: com.hedera.hapi.node.addressbook.NodeUpdateTransactionBody
	(*NodeDeleteTransactionBody)(nil),                 // 57: com.hedera.hapi.node.addressbook.NodeDeleteTransactionBody
	(*TokenRejectTransactionBody)(nil),                // 58: proto.TokenRejectTransactionBody
	(*TokenAirdropTransactionBody)(nil),               // 59: proto.TokenAirdropTransactionBody
	(*TokenCancelAirdropTransactionBody)(nil),         // 60: proto.TokenCancelAirdropTransactionBody
	(*TokenClaimAirdropTransactionBody)(nil),          // 61: proto.TokenClaimAirdropTransactionBody
	(*StateSignatureTransaction)(nil),                 // 62: com.hedera.hapi.platform.event.StateSignatureTransaction
	(*HintsPreprocessingVoteTransactionBody)(nil),     // 63: com.hedera.hapi.services.auxiliary.hints.HintsPreprocessingVoteTransactionBody
	(*HintsKeyPublicationTransactionBody)(nil),        // 64: com.hedera.hapi.services.auxiliary.hints.HintsKeyPublicationTransactionBody
	(*HintsPartialSignatureTransactionBody)(nil),      // 65: com.hedera.hapi.services.auxiliary.hints.HintsPartialSignatureTransactionBody
	(*HistoryProofSignatureTransactionBody)(nil),      // 66: com.hedera.hapi.services.auxiliary.history.HistoryProofSignatureTransactionBody
	(*HistoryProofKeyPublicationTransactionBody)(nil), // 67: com.hedera.hapi.services.auxiliary.history.HistoryProofKeyPublicationTransactionBody
	(*HistoryProofVoteTransactionBody)(nil),           // 68: com.hedera.hapi.services.auxiliary.history.HistoryProofVoteTransactionBody
	(*CrsPublicationTransactionBody)(nil),             // 69: com.hedera.hapi.services.auxiliary.hints.CrsPublicationTransactionBody
	(*LambdaSStoreTransactionBody)(nil),               // 70: com.hedera.hapi.node.hooks.LambdaSStoreTransactionBody
	(*HookDispatchTransactionBody)(nil),               // 71: com.hedera.hapi.node.hooks.HookDispatchTransactionBody
	(*CustomFeeLimit)(nil),                            // 72: proto.CustomFeeLimit
}
var file_transaction_proto_depIdxs = []int32{
	1,  // 0: proto.Transaction.body:type_name -> proto.TransactionBody
	3,  // 1: proto.Transaction.sigs:type_name -> proto.SignatureList
	4,  // 2: proto.Transaction.sigMap:type_name -> proto.SignatureMap
	5,  // 3: proto.TransactionBody.transactionID:type_name -> proto.TransactionID
	6,  // 4: proto.TransactionBody.nodeAccountID:type_name -> proto.AccountID
	7,  // 5: proto.TransactionBody.transactionValidDuration:type_name -> proto.Duration
	8,  // 6: proto.TransactionBody.batch_key:type_name -> proto.Key
	9,  // 7: proto.TransactionBody.contractCall:type_name -> proto.ContractCallTransactionBody
	10, // 8: proto.TransactionBody.contractCreateInstance:type_name -> proto.ContractCreateTransactionBody
	11, // 9: proto.TransactionBody.contractUpdateInstance:type_name -> proto.ContractUpdateTransactionBody
	12, // 10: proto.TransactionBody.cryptoAddLiveHash:type_name -> proto.CryptoAddLiveHashTransactionBody
	13, // 11: proto.TransactionBody.cryptoCreateAccount:type_name -> proto.CryptoCreateTransactionBody
	14, // 12: proto.TransactionBody.cryptoDelete:type_name -> proto.CryptoDeleteTransactionBody
	15, // 13: proto.TransactionBody.cryptoDeleteLiveHash:type_name -> proto.CryptoDeleteLiveHashTransactionBody
	16, // 14: proto.TransactionBody.cryptoTransfer:type_name -> proto.CryptoTransferTransactionBody
	17, // 15: proto.TransactionBody.cryptoUpdateAccount:type_name -> proto.CryptoUpdateTransactionBody
	18, // 16: proto.TransactionBody.fileAppend:type_name -> proto.FileAppendTransactionBody
	19, // 17: proto.TransactionBody.fileCreate:type_name -> proto.FileCreateTransactionBody
	20, // 18: proto.TransactionBody.fileDelete:type_name -> proto.FileDeleteTransactionBody
	21, // 19: proto.TransactionBody.fileUpdate:type_name -> proto.FileUpdateTransactionBody
	22, // 20: proto.TransactionBody.systemDelete:type_name -> proto.SystemDeleteTransactionBody
	23, // 21: proto.TransactionBody.systemUndelete:type_name -> proto.SystemUndeleteTransactionBody
	24, // 22: proto.TransactionBody.contractDeleteInstance:type_name -> proto.ContractDeleteTransactionBody
	25, // 23: proto.TransactionBody.freeze:type_name -> proto.FreezeTransactionBody
	26, // 24: proto.TransactionBody.consensusCreateTopic:type_name -> proto.ConsensusCreateTopicTransactionBody
	27, // 25: proto.TransactionBody.consensusUpdateTopic:type_name -> proto.ConsensusUpdateTopicTransactionBody
	28, // 26: proto.TransactionBody.consensusDeleteTopic:type_name -> proto.ConsensusDeleteTopicTransactionBody
	29, // 27: proto.TransactionBody.consensusSubmitMessage:type_name -> proto.ConsensusSubmitMessageTransactionBody
	30, // 28: proto.TransactionBody.uncheckedSubmit:type_name -> proto.UncheckedSubmitBody
	31, // 29: proto.TransactionBody.tokenCreation:type_name -> proto.TokenCreateTransactionBody
	32, // 30: proto.TransactionBody.tokenFreeze:type_name -> proto.TokenFreezeAccountTransactionBody
	33, // 31: proto.TransactionBody.tokenUnfreeze:type_name -> proto.TokenUnfreezeAccountTransactionBody
	34, // 32: proto.TransactionBody.tokenGrantKyc:type_name -> proto.TokenGrantKycTransactionBody
	35, // 33: proto.TransactionBody.tokenRevokeKyc:type_name -> proto.TokenRevokeKycTransactionBody
	36, // 34: proto.TransactionBody.tokenDeletion:type_name -> proto.TokenDeleteTransactionBody
	37, // 35: proto.TransactionBody.tokenUpdate:type_name -> proto.TokenUpdateTransactionBody
	38, // 36: proto.TransactionBody.tokenMint:type_name -> proto.TokenMintTransactionBody
	39, // 37: proto.TransactionBody.tokenBurn:type_name -> proto.TokenBurnTransactionBody
	40, // 38: proto.TransactionBody.tokenWipe:type_name -> proto.TokenWipeAccountTransactionBody
	41, // 39: proto.TransactionBody.tokenAssociate:type_name -> proto.TokenAssociateTransactionBody
	42, // 40: proto.TransactionBody.tokenDissociate:type_name -> proto.TokenDissociateTransactionBody
	43, // 41: proto.TransactionBody.scheduleCreate:type_name -> proto.ScheduleCreateTransactionBody
	44, // 42: proto.TransactionBody.scheduleDelete:type_name -> proto.ScheduleDeleteTransactionBody
	45, // 43: proto.TransactionBody.scheduleSign:type_name -> proto.ScheduleSignTransactionBody
	46, // 44: proto.TransactionBody.token_fee_schedule_update:type_name -> proto.TokenFeeScheduleUpdateTransactionBody
	47, // 45: proto.TransactionBody.token_pause:type_name -> proto.TokenPauseTransactionBody
	48, // 46: proto.TransactionBody.token_unpause:type_name -> proto.TokenUnpauseTransactionBody
	49, // 47: proto.TransactionBody.cryptoApproveAllowance:type_name -> proto.CryptoApproveAllowanceTransactionBody
	50, // 48: proto.TransactionBody.cryptoDeleteAllowance:type_name -> proto.CryptoDeleteAllowanceTransactionBody
	51, // 49: proto.TransactionBody.ethereumTransaction:type_name -> proto.EthereumTransactionBody
	52, // 50: proto.TransactionBody.node_stake_update:type_name -> proto.NodeStakeUpdateTransactionBody
	53, // 51: proto.TransactionBody.util_prng:type_name -> proto.UtilPrngTransactionBody
	54, // 52: proto.TransactionBody.token_update_nfts:type_name -> proto.TokenUpdateNftsTransactionBody
	55, // 53: proto.TransactionBody.nodeCreate:type_name -> com.hedera.hapi.node.addressbook.NodeCreateTransactionBody
	56, // 54: proto.TransactionBody.nodeUpdate:type_name -> com.hedera.hapi.node.addressbook.NodeUpdateTransactionBody
	57, // 55: proto.TransactionBody.nodeDelete:type_name -> com.hedera.hapi.node.addressbook.NodeDeleteTransactionBody
	58, // 56: proto.TransactionBody.tokenReject:type_name -> proto.TokenRejectTransactionBody
	59, // 57: proto.TransactionBody.tokenAirdrop:type_name -> proto.TokenAirdropTransactionBody
	60, // 58: proto.TransactionBody.tokenCancelAirdrop:type_name -> proto.TokenCancelAirdropTransactionBody
	61, // 59: proto.TransactionBody.tokenClaimAirdrop:type_name -> proto.TokenClaimAirdropTransactionBody
	62, // 60: proto.TransactionBody.state_signature_transaction:type_name -> com.hedera.hapi.platform.event.StateSignatureTransaction
	63, // 61: proto.TransactionBody.hints_preprocessing_vote:type_name -> com.hedera.hapi.services.auxiliary.hints.HintsPreprocessingVoteTransactionBody
	64, // 62: proto.TransactionBody.hints_key_publication:type_name -> com.hedera.hapi.services.auxiliary.hints.HintsKeyPublicationTransactionBody
	65, // 63: proto.TransactionBody.hints_partial_signature:type_name -> com.hedera.hapi.services.auxiliary.hints.HintsPartialSignatureTransactionBody
	66, // 64: proto.TransactionBody.history_proof_signature:type_name -> com.hedera.hapi.services.auxiliary.history.HistoryProofSignatureTransactionBody
	67, // 65: proto.TransactionBody.history_proof_key_publication:type_name -> com.hedera.hapi.services.auxiliary.history.HistoryProofKeyPublicationTransactionBody
	68, // 66: proto.TransactionBody.history_proof_vote:type_name -> com.hedera.hapi.services.auxiliary.history.HistoryProofVoteTransactionBody
	69, // 67: proto.TransactionBody.crs_publication:type_name -> com.hedera.hapi.services.auxiliary.hints.CrsPublicationTransactionBody
	2,  // 68: proto.TransactionBody.atomic_batch:type_name -> proto.AtomicBatchTransactionBody
	70, // 69: proto.TransactionBody.lambda_sstore:type_name -> com.hedera.hapi.node.hooks.LambdaSStoreTransactionBody
	71, // 70: proto.TransactionBody.hook_dispatch:type_name -> com.hedera.hapi.node.hooks.HookDispatchTransactionBody
	72, // 71: proto.TransactionBody.max_custom_fees:type_name -> proto.CustomFeeLimit
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_transaction_proto_init() }
func file_transaction_proto_init() {
	if File_transaction_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_system_delete_proto_init()
	file_system_undelete_proto_init()
	file_freeze_proto_init()
	file_contract_call_proto_init()
	file_contract_create_proto_init()
	file_contract_update_proto_init()
	file_crypto_add_live_hash_proto_init()
	file_crypto_create_proto_init()
	file_crypto_delete_proto_init()
	file_crypto_delete_live_hash_proto_init()
	file_crypto_transfer_proto_init()
	file_crypto_update_proto_init()
	file_crypto_approve_allowance_proto_init()
	file_crypto_delete_allowance_proto_init()
	file_ethereum_transaction_proto_init()
	file_file_append_proto_init()
	file_file_create_proto_init()
	file_file_delete_proto_init()
	file_file_update_proto_init()
	file_duration_proto_init()
	file_contract_delete_proto_init()
	file_consensus_create_topic_proto_init()
	file_consensus_update_topic_proto_init()
	file_consensus_delete_topic_proto_init()
	file_consensus_submit_message_proto_init()
	file_unchecked_submit_proto_init()
	file_token_create_proto_init()
	file_token_freeze_account_proto_init()
	file_token_unfreeze_account_proto_init()
	file_token_grant_kyc_proto_init()
	file_token_revoke_kyc_proto_init()
	file_token_delete_proto_init()
	file_token_update_proto_init()
	file_token_mint_proto_init()
	file_token_burn_proto_init()
	file_token_wipe_account_proto_init()
	file_token_associate_proto_init()
	file_token_dissociate_proto_init()
	file_token_fee_schedule_update_proto_init()
	file_token_pause_proto_init()
	file_token_unpause_proto_init()
	file_token_update_nfts_proto_init()
	file_token_reject_proto_init()
	file_token_airdrop_proto_init()
	file_token_cancel_airdrop_proto_init()
	file_token_claim_airdrop_proto_init()
	file_schedule_create_proto_init()
	file_schedule_delete_proto_init()
	file_schedule_sign_proto_init()
	file_node_stake_update_proto_init()
	file_util_prng_proto_init()
	file_node_create_proto_init()
	file_node_update_proto_init()
	file_node_delete_proto_init()
	file_custom_fees_proto_init()
	file_state_signature_transaction_proto_init()
	file_hints_key_publication_proto_init()
	file_hints_preprocessing_vote_proto_init()
	file_hints_partial_signature_proto_init()
	file_crs_publication_proto_init()
	file_history_proof_signature_proto_init()
	file_history_proof_key_publication_proto_init()
	file_history_proof_vote_proto_init()
	file_lambda_sstore_proto_init()
	file_hook_dispatch_proto_init()
	file_transaction_proto_msgTypes[1].OneofWrappers = []any{
		(*TransactionBody_ContractCall)(nil),
		(*TransactionBody_ContractCreateInstance)(nil),
		(*TransactionBody_ContractUpdateInstance)(nil),
		(*TransactionBody_CryptoAddLiveHash)(nil),
		(*TransactionBody_CryptoCreateAccount)(nil),
		(*TransactionBody_CryptoDelete)(nil),
		(*TransactionBody_CryptoDeleteLiveHash)(nil),
		(*TransactionBody_CryptoTransfer)(nil),
		(*TransactionBody_CryptoUpdateAccount)(nil),
		(*TransactionBody_FileAppend)(nil),
		(*TransactionBody_FileCreate)(nil),
		(*TransactionBody_FileDelete)(nil),
		(*TransactionBody_FileUpdate)(nil),
		(*TransactionBody_SystemDelete)(nil),
		(*TransactionBody_SystemUndelete)(nil),
		(*TransactionBody_ContractDeleteInstance)(nil),
		(*TransactionBody_Freeze)(nil),
		(*TransactionBody_ConsensusCreateTopic)(nil),
		(*TransactionBody_ConsensusUpdateTopic)(nil),
		(*TransactionBody_ConsensusDeleteTopic)(nil),
		(*TransactionBody_ConsensusSubmitMessage)(nil),
		(*TransactionBody_UncheckedSubmit)(nil),
		(*TransactionBody_TokenCreation)(nil),
		(*TransactionBody_TokenFreeze)(nil),
		(*TransactionBody_TokenUnfreeze)(nil),
		(*TransactionBody_TokenGrantKyc)(nil),
		(*TransactionBody_TokenRevokeKyc)(nil),
		(*TransactionBody_TokenDeletion)(nil),
		(*TransactionBody_TokenUpdate)(nil),
		(*TransactionBody_TokenMint)(nil),
		(*TransactionBody_TokenBurn)(nil),
		(*TransactionBody_TokenWipe)(nil),
		(*TransactionBody_TokenAssociate)(nil),
		(*TransactionBody_TokenDissociate)(nil),
		(*TransactionBody_ScheduleCreate)(nil),
		(*TransactionBody_ScheduleDelete)(nil),
		(*TransactionBody_ScheduleSign)(nil),
		(*TransactionBody_TokenFeeScheduleUpdate)(nil),
		(*TransactionBody_TokenPause)(nil),
		(*TransactionBody_TokenUnpause)(nil),
		(*TransactionBody_CryptoApproveAllowance)(nil),
		(*TransactionBody_CryptoDeleteAllowance)(nil),
		(*TransactionBody_EthereumTransaction)(nil),
		(*TransactionBody_NodeStakeUpdate)(nil),
		(*TransactionBody_UtilPrng)(nil),
		(*TransactionBody_TokenUpdateNfts)(nil),
		(*TransactionBody_NodeCreate)(nil),
		(*TransactionBody_NodeUpdate)(nil),
		(*TransactionBody_NodeDelete)(nil),
		(*TransactionBody_TokenReject)(nil),
		(*TransactionBody_TokenAirdrop)(nil),
		(*TransactionBody_TokenCancelAirdrop)(nil),
		(*TransactionBody_TokenClaimAirdrop)(nil),
		(*TransactionBody_StateSignatureTransaction)(nil),
		(*TransactionBody_HintsPreprocessingVote)(nil),
		(*TransactionBody_HintsKeyPublication)(nil),
		(*TransactionBody_HintsPartialSignature)(nil),
		(*TransactionBody_HistoryProofSignature)(nil),
		(*TransactionBody_HistoryProofKeyPublication)(nil),
		(*TransactionBody_HistoryProofVote)(nil),
		(*TransactionBody_CrsPublication)(nil),
		(*TransactionBody_AtomicBatch)(nil),
		(*TransactionBody_LambdaSstore)(nil),
		(*TransactionBody_HookDispatch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_transaction_proto_rawDesc), len(file_transaction_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transaction_proto_goTypes,
		DependencyIndexes: file_transaction_proto_depIdxs,
		MessageInfos:      file_transaction_proto_msgTypes,
	}.Build()
	File_transaction_proto = out.File
	file_transaction_proto_goTypes = nil
	file_transaction_proto_depIdxs = nil
}
