//*
// # Topic Information
// Query response describing a topic of the Hedera Consensus Service (HCS).
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: consensus_topic_info.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A query response describing the current state of a topic for the Hedera
// Consensus Service (HCS).
type ConsensusTopicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A short description of this topic.
	// <p>
	// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
	// (default 100) bytes when encoded as UTF-8.
	Memo string `protobuf:"bytes,1,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// The latest running hash of the topic.
	// <p>
	// This 48-byte field is the output of a SHA-384 digest with input
	// data determined by the current version of the running hash algorithm
	// used by the network.<br/>
	// All new transactions SHALL use algorithm version `3`.<br/>
	// The bytes of each uint64 or uint32 encoded for the hash input
	// MUST be in Big-Endian format.
	// <p>
	// <hr/>
	// If the algorithm version is '3', then the input data to the
	// SHA-384 digest are, in order:
	// <ol>
	//
	//	<li>The previous running hash of the topic (48 bytes)</li>
	//	<li>The `topicRunningHashVersion` (8 bytes)</li>
	//	<li>The payer account's shard (8 bytes)</li>
	//	<li>The payer account's realm (8 bytes)</li>
	//	<li>The payer account's number (8 bytes)</li>
	//	<li>The topic's shard (8 bytes)</li>
	//	<li>The topic's realm (8 bytes)</li>
	//	<li>The topic's number (8 bytes)</li>
	//	<li>The number of seconds since the epoch when the
	//	    `ConsensusSubmitMessage` reached consensus (8 bytes)</li>
	//	<li>The number of nanoseconds within the second when the
	//	    `ConsensusSubmitMessage` reached consensus (4 bytes)</li>
	//	<li>The `topicSequenceNumber` (8 bytes)</li>
	//	<li>The output of a SHA-384 digest of the message bytes from the
	//	    `ConsensusSubmitMessage` (48 bytes)</li>
	//
	// </ol>
	RunningHash []byte `protobuf:"bytes,2,opt,name=runningHash,proto3" json:"runningHash,omitempty"`
	// *
	// A current sequence number (starting at 1 for the first message)
	// for messages on this topic.
	SequenceNumber uint64 `protobuf:"varint,3,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	// *
	// An expiration time for this topic, in seconds since the epoch.
	// <p>
	// For this purpose, `epoch` SHALL be the UNIX epoch
	// with 0 at `1970-01-01T00:00:00.000Z`.
	ExpirationTime *Timestamp `protobuf:"bytes,4,opt,name=expirationTime,proto3" json:"expirationTime,omitempty"`
	// *
	// A key that MUST sign any transaction to update or delete this topic.
	// <p>
	// If this value is not set (null) then the topic CANNOT be deleted,
	// modified, or updated.
	AdminKey *Key `protobuf:"bytes,5,opt,name=adminKey,proto3" json:"adminKey,omitempty"`
	// *
	// A key that MUST sign any transaction to submit a message to this topic.
	// <p>
	// If this value is not set (null) then any account MAY submit messages to
	// this topic.
	SubmitKey *Key `protobuf:"bytes,6,opt,name=submitKey,proto3" json:"submitKey,omitempty"`
	// *
	// A duration, in seconds, to extend the `expirationTime` value when
	// this topic is automatically renewed.
	// <p>
	// If the `autoRenewAccount` value for this topic is set to a valid account
	// with sufficient HBAR balance to pay renewal fees when this topic
	// expires, the system SHALL automatically renew this topic, extending the
	// `expirationTime` value by the number of seconds described here.<br/>
	// If, however, the `autoRenewAccount` lacks sufficient HBAR balance
	// to pay renewal fees when this topic expires, this topic SHALL be
	// deleted after the time period specified in the `AUTORENEW_GRACE_PERIOD`
	// configuration value.
	AutoRenewPeriod *Duration `protobuf:"bytes,7,opt,name=autoRenewPeriod,proto3" json:"autoRenewPeriod,omitempty"`
	// *
	// An account that is designated to pay automatic renewal fees.
	// <p>
	// If this value is a valid account ID when this topic expires,
	// this account SHALL be charged the renewal fees for this topic,
	// if it holds sufficient HBAR balance. If the account does not hold
	// sufficient HBAR balance to pay renewal fees when necessary, then
	// this topic SHALL be deleted.<br/>
	// If this value is not set (null), or is not a valid account ID, when
	// this topic expires, then this topic SHALL be deleted after the time
	// period specified in the `AUTORENEW_GRACE_PERIOD` configuration value.
	AutoRenewAccount *AccountID `protobuf:"bytes,8,opt,name=autoRenewAccount,proto3" json:"autoRenewAccount,omitempty"`
	// *
	// A ledger ID of the network that generated this response.
	// <p>
	// This value SHALL identify the distributed ledger that responded to
	// this query.
	LedgerId []byte `protobuf:"bytes,9,opt,name=ledger_id,json=ledgerId,proto3" json:"ledger_id,omitempty"`
	// *
	// Access control for update/delete of custom fees.
	// <p>
	// If unset, custom fees CANNOT be set for this topic.<br/>
	// If not set when the topic is created, this field CANNOT be set via
	// update.<br/>
	// If set when the topic is created, this field MAY be changed via update.
	FeeScheduleKey *Key `protobuf:"bytes,10,opt,name=fee_schedule_key,json=feeScheduleKey,proto3" json:"fee_schedule_key,omitempty"`
	// *
	// A set of keys.<br/>
	// Keys in this list are permitted to submit messages to this topic without
	// paying custom fees associated with this topic.
	// <p>
	// If a topic submit message is signed by _any_ key included in this set,
	// custom fees SHALL NOT be charged for that transaction.<br/>
	// `fee_exempt_key_list` MAY contain keys for accounts that are inactive,
	// deleted, or non-existent.<br/>
	// If not set, there SHALL NOT be any fee-exempt keys.  In particular, the
	// following keys SHALL NOT be implicitly or automatically added to this
	// list: `adminKey`, `submitKey`, `fee_schedule_key`.
	// A `fee_exempt_key_list` MUST NOT contain more than
	// `MAX_ENTRIES_FOR_FEE_EXEMPT_KEY_LIST` keys.
	// A `fee_exempt_key_list` MUST NOT contain any duplicate keys.
	FeeExemptKeyList []*Key `protobuf:"bytes,11,rep,name=fee_exempt_key_list,json=feeExemptKeyList,proto3" json:"fee_exempt_key_list,omitempty"`
	// *
	// A set of custom fee definitions.<br/>
	// These are fees to be assessed for each submit to this topic.
	// <p>
	// Each fee defined in this set SHALL be evaluated for
	// each message submitted to this topic, and the resultant
	// total assessed fees SHALL be charged.<br/>
	// Custom fees defined here SHALL be assessed in addition to the base
	// network and node fees.
	CustomFees []*FixedCustomFee `protobuf:"bytes,12,rep,name=custom_fees,json=customFees,proto3" json:"custom_fees,omitempty"`
}

func (x *ConsensusTopicInfo) Reset() {
	*x = ConsensusTopicInfo{}
	mi := &file_consensus_topic_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusTopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusTopicInfo) ProtoMessage() {}

func (x *ConsensusTopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_topic_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusTopicInfo.ProtoReflect.Descriptor instead.
func (*ConsensusTopicInfo) Descriptor() ([]byte, []int) {
	return file_consensus_topic_info_proto_rawDescGZIP(), []int{0}
}

func (x *ConsensusTopicInfo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ConsensusTopicInfo) GetRunningHash() []byte {
	if x != nil {
		return x.RunningHash
	}
	return nil
}

func (x *ConsensusTopicInfo) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ConsensusTopicInfo) GetExpirationTime() *Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

func (x *ConsensusTopicInfo) GetAdminKey() *Key {
	if x != nil {
		return x.AdminKey
	}
	return nil
}

func (x *ConsensusTopicInfo) GetSubmitKey() *Key {
	if x != nil {
		return x.SubmitKey
	}
	return nil
}

func (x *ConsensusTopicInfo) GetAutoRenewPeriod() *Duration {
	if x != nil {
		return x.AutoRenewPeriod
	}
	return nil
}

func (x *ConsensusTopicInfo) GetAutoRenewAccount() *AccountID {
	if x != nil {
		return x.AutoRenewAccount
	}
	return nil
}

func (x *ConsensusTopicInfo) GetLedgerId() []byte {
	if x != nil {
		return x.LedgerId
	}
	return nil
}

func (x *ConsensusTopicInfo) GetFeeScheduleKey() *Key {
	if x != nil {
		return x.FeeScheduleKey
	}
	return nil
}

func (x *ConsensusTopicInfo) GetFeeExemptKeyList() []*Key {
	if x != nil {
		return x.FeeExemptKeyList
	}
	return nil
}

func (x *ConsensusTopicInfo) GetCustomFees() []*FixedCustomFee {
	if x != nil {
		return x.CustomFees
	}
	return nil
}

var File_consensus_topic_info_proto protoreflect.FileDescriptor

var file_consensus_topic_info_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x04, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0f, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x5f, 0x65,
	0x78, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x10, 0x66, 0x65, 0x65, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x65, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x73, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f,
	0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61,
	0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consensus_topic_info_proto_rawDescOnce sync.Once
	file_consensus_topic_info_proto_rawDescData = file_consensus_topic_info_proto_rawDesc
)

func file_consensus_topic_info_proto_rawDescGZIP() []byte {
	file_consensus_topic_info_proto_rawDescOnce.Do(func() {
		file_consensus_topic_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_consensus_topic_info_proto_rawDescData)
	})
	return file_consensus_topic_info_proto_rawDescData
}

var file_consensus_topic_info_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_consensus_topic_info_proto_goTypes = []any{
	(*ConsensusTopicInfo)(nil), // 0: proto.ConsensusTopicInfo
	(*Timestamp)(nil),          // 1: proto.Timestamp
	(*Key)(nil),                // 2: proto.Key
	(*Duration)(nil),           // 3: proto.Duration
	(*AccountID)(nil),          // 4: proto.AccountID
	(*FixedCustomFee)(nil),     // 5: proto.FixedCustomFee
}
var file_consensus_topic_info_proto_depIdxs = []int32{
	1, // 0: proto.ConsensusTopicInfo.expirationTime:type_name -> proto.Timestamp
	2, // 1: proto.ConsensusTopicInfo.adminKey:type_name -> proto.Key
	2, // 2: proto.ConsensusTopicInfo.submitKey:type_name -> proto.Key
	3, // 3: proto.ConsensusTopicInfo.autoRenewPeriod:type_name -> proto.Duration
	4, // 4: proto.ConsensusTopicInfo.autoRenewAccount:type_name -> proto.AccountID
	2, // 5: proto.ConsensusTopicInfo.fee_schedule_key:type_name -> proto.Key
	2, // 6: proto.ConsensusTopicInfo.fee_exempt_key_list:type_name -> proto.Key
	5, // 7: proto.ConsensusTopicInfo.custom_fees:type_name -> proto.FixedCustomFee
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_consensus_topic_info_proto_init() }
func file_consensus_topic_info_proto_init() {
	if File_consensus_topic_info_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_custom_fees_proto_init()
	file_duration_proto_init()
	file_timestamp_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consensus_topic_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_consensus_topic_info_proto_goTypes,
		DependencyIndexes: file_consensus_topic_info_proto_depIdxs,
		MessageInfos:      file_consensus_topic_info_proto_msgTypes,
	}.Build()
	File_consensus_topic_info_proto = out.File
	file_consensus_topic_info_proto_rawDesc = nil
	file_consensus_topic_info_proto_goTypes = nil
	file_consensus_topic_info_proto_depIdxs = nil
}
