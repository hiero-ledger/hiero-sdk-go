//*
// # Account.
// This is a single account within the Hedera network. An Account is the
// primary entity representing ownership of assets tracked on the ledger.
// Account Allowances are also described here, and these represent permission
// granted to an account to transfer assets owned by a different account which
// granted the "allowance". Allowances specify the assets and amounts which may
// be transferred.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: account.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A single Account in the Hedera distributed ledger.
//
// Each Account SHALL have a unique three-part identifier, a Key, and one
// or more token balances.<br/>
// Each Account SHALL have an alias, which has multiple forms, and MAY be set automatically.<br/>
// Several additional items SHALL be associated with the Account to enable
// full functionality.<br/>
// Assets SHALL be represented as linked-lists with only the "head" item
// referenced directly in the Account, and the remaining items SHALL be
// accessible via the token relation or unique tokens maps.<br/>
// Accounts, as most items in the network, SHALL have an expiration time,
// recorded as seconds since the epoch, and MUST be "renewed" for a small fee
// at expiration. This helps to reduce the amount of inactive accounts retained
// in state.<br/>
// Another account MAY be designated to pay any renewal fees and automatically
// renew an account for (by default) 30-90 days at a time as a means to
// optionally ensure important accounts remain active.<br/>
// Accounts MAY participate in securing the network by "staking" the account
// balances to a particular network node, and receive a portion of network
// fees as a reward. An account MAY optionally decline these rewards but still
// stake its balances.<br/>
// An account MAY optionally require that inbound transfer transactions be
// signed by that account as receiver
// (in addition to the sender's signature).<br/>
// As with all network entities, Account ID SHALL be represented as
// shard.realm.X.<br/>
// Alias and contractId SHALL be additional identifiers used to connect accounts
// to transactions before the account is fully enabled,
// or in EVM contracts.<br/>
//
// ---
//
// #### Alias
// There is considerable complexity with `alias` (aka `evm_address`) for
// Accounts. Much of this comes from the existence of a "hidden" alias for
// almost all accounts, and the reuse of the alias field for both EVM reference
// and "automatic" account creation.
//
// For the purposes of this specification, we will use the following terms for
// clarity.
//   - `key_alias` is the account public key as a protobuf serialized message
//     and used for auto-creation and subsequent lookup. This is only valid if
//     the account key is a
//     single `primitive` key, either ED25519 or ECDSA_SECP256K1.
//   - `evm_address` exists for every account and is one of
//   - `contract_address`, which is the 20 byte EVM contract address per
//     EIP-1014
//   - `evm_key_address`, which is the keccak-256 hash of a ECDSA_SECP256K1
//     `primitive` key.
//   - This is for accounts lazy-created from EVM public keys, when the
//     corresponding ECDSA_SECP256K1 public key is presented in a
//     transaction signed by the private key for that public key, the
//     account is created that key assigned, and the protobuf-serialized
//     form is set as the account alias.
//   - `long_zero`, is a synthetic 20 byte address inferred for "normally"
//     created accounts. It is constructed from the "standard" AccountID as
//     follows.
//   - 4 byte big-endian shard number
//   - 8 byte big-endian realm number
//   - 8 byte big-endian entity number
//
// The `alias` field in the `Account` message SHALL contain one of four values
// for any given account.
//   - The `key_alias`, if the account was created by transferring HBAR to the
//     account referenced by `key_alias`.
//   - The `evm_key_address` if the account was created from an EVM public key
//   - The `contract_address` if the account belongs to an EVM contract
//   - Not-Set/null/Bytes.EMPTY (collectively `null`) if the account was
//     created normally
//
// If the `alias` field of an `Account` is any form of `null`, then the account
// MAY be referenced by `alias` in an `AccountID` by using the `long_zero`
// address for the account. This "hidden default" alias SHALL NOT be stored,
// but is synthesized by the node software as needed, and may be synthesized by
// an EVM contract or client software as well.
//
// An AccountID in a transaction MAY reference an `Account` with
// `shard`.`realm`.`alias`.<br/>
// If the account `alias` field is set for an Account, that value SHALL be the
// account alias.<br/>
// If the account `alias` field is not set for an Account, the `long_zero`
// alias SHALL be the account alias.
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The unique ID of this account.
	// <p>
	// An account ID, when assigned to this field, SHALL be of
	// the form `shard.realm.number`.<br/>
	// Transactions MAY reference the account by alias, but the account itself
	// MUST always have a purely numeric identifier. This numeric ID is the
	// value used to reference the account in query responses, transaction
	// receipts, transaction records, and the block stream.
	AccountId *AccountID `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// *
	// An account EVM alias.
	// <p>
	// This is a value used in some contexts to reference an account when the
	// numeric account identifier is not available.<br/>
	// This field, when set to a non-default value, is immutable and
	// SHALL NOT be changed.
	Alias []byte `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	// *
	// The key to be used to sign transactions from this account, if any.
	// <p>
	// This key SHALL NOT be set for hollow accounts until the account
	// is finalized.<br/>
	// This key SHALL be set on all other accounts, except for certain
	// immutable accounts (0.0.800 and 0.0.801) necessary for network function
	// and otherwise secured by the governing council.
	Key *Key `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// *
	// The current expiration time of this account, in seconds since the epoch.
	// <p>
	// For this purpose, `epoch` SHALL be the UNIX epoch
	// with 0 at `1970-01-01T00:00:00.000Z`.<br/>
	// This account SHALL be due standard renewal fees when the network
	// consensus time exceeds this time.<br/>
	// If rent and expiration are enabled for the network, and automatic
	// renewal is enabled for this account, renewal fees SHALL be charged
	// after this time, and, if charged, the expiration time SHALL be
	// extended for another renewal period.<br/>
	// This account MAY be expired and removed from state at any point
	// after this time if not renewed.<br/>
	// An account holder MAY extend this time by submitting an account
	// update transaction to modify expiration time, subject to the current
	// maximum expiration time for the network.
	ExpirationSecond int64 `protobuf:"varint,4,opt,name=expiration_second,json=expirationSecond,proto3" json:"expiration_second,omitempty"`
	// *
	// The HBAR balance of this account, in tinybar (10<sup>-8</sup> HBAR).
	// <p>
	// This value is a signed integer for efficiency, but MUST always
	// be a whole number.
	TinybarBalance int64 `protobuf:"varint,5,opt,name=tinybar_balance,json=tinybarBalance,proto3" json:"tinybar_balance,omitempty"`
	// *
	// A short description of this account.
	// <p>
	// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
	// (default 100) bytes when encoded as UTF-8.
	Memo string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// A boolean indicating that this account is deleted.
	Deleted bool `protobuf:"varint,7,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// *
	// The amount of HBAR staked to this account by others.
	StakedToMe int64 `protobuf:"varint,8,opt,name=staked_to_me,json=stakedToMe,proto3" json:"staked_to_me,omitempty"`
	// *
	// If this account stakes to another account, this value SHALL be set to
	// the time when the current period for staking and reward
	// calculations began.
	StakePeriodStart int64 `protobuf:"varint,9,opt,name=stake_period_start,json=stakePeriodStart,proto3" json:"stake_period_start,omitempty"`
	// *
	// ID of the account or node to which this account is staking, if any.
	// <p>
	// if not set this field MAY be interpreted as staked_account_id
	// with value `0.0.0`.
	//
	// Types that are assignable to StakedId:
	//
	//	*Account_StakedAccountId
	//	*Account_StakedNodeId
	StakedId isAccount_StakedId `protobuf_oneof:"staked_id"`
	// *
	// A boolean indicating that this account has chosen to decline rewards for
	// staking its balances.
	// <p>
	// This account MAY still stake its balances, but SHALL NOT receive reward
	// payments for doing so.
	DeclineReward bool `protobuf:"varint,12,opt,name=decline_reward,json=declineReward,proto3" json:"decline_reward,omitempty"`
	// *
	// A boolean indicating that the account requires a receiver signature for
	// inbound token transfer transactions.
	// <p>
	// If this value is `true` then a transaction to transfer tokens to this
	// account SHALL NOT succeed unless this account has signed the transfer
	// transaction.
	ReceiverSigRequired bool `protobuf:"varint,13,opt,name=receiver_sig_required,json=receiverSigRequired,proto3" json:"receiver_sig_required,omitempty"`
	// *
	// A token ID at the head of the linked list for this account from the
	// token relations map.<br/>
	// The token relations are connected by including the "next" and "previous"
	// TokenID in each TokenRelation message. The "head" item in that list is
	// found by looking up the TokenRelation with this Account's account_id and
	// this head_token_id. Each subsequent item in the list is found via
	// similar lookup with both an AccountID and a TokenID.
	HeadTokenId *TokenID `protobuf:"bytes,14,opt,name=head_token_id,json=headTokenId,proto3" json:"head_token_id,omitempty"`
	// *
	// A NftID at the head of the linked list for this account from
	// the unique tokens map.<br/>
	// The unique token relations are connected by including the "next" and
	// "previous" NftID in each Nft message. The "head" item in that list is
	// found by looking up the Nft with ID matching this head_nft_id. Each
	// subsequent item in the list is found via similar lookup with the next
	// or previous NftID.
	HeadNftId *NftID `protobuf:"bytes,15,opt,name=head_nft_id,json=headNftId,proto3" json:"head_nft_id,omitempty"`
	// *
	// A serial number in the NftID at the head of the linked list for this
	// account from unique tokens map.
	// <p>
	// This MUST match the `serial_number` field of `head_nft_id`.
	HeadNftSerialNumber int64 `protobuf:"varint,16,opt,name=head_nft_serial_number,json=headNftSerialNumber,proto3" json:"head_nft_serial_number,omitempty"`
	// *
	// A number of non-fungible tokens (NTFs) owned by the account.
	NumberOwnedNfts int64 `protobuf:"varint,17,opt,name=number_owned_nfts,json=numberOwnedNfts,proto3" json:"number_owned_nfts,omitempty"`
	// *
	// A maximum for the number of tokens that can be automatically
	// associated with this account.
	// <p>
	// If this is less than or equal to `used_auto_associations` (or 0), then
	// this account MUST manually associate with a token before transacting in
	// that token.<br/>
	// This value may also be `-1` to indicate no limit.<br/>
	// This value MUST NOT be less than `-1`.
	MaxAutoAssociations int32 `protobuf:"varint,18,opt,name=max_auto_associations,json=maxAutoAssociations,proto3" json:"max_auto_associations,omitempty"`
	// *
	// A count of used auto-association slots.
	// <p>
	// If this is greater than, or equal to, the current value of
	// `max_auto_associations`, then this account MUST manually associate with
	// a new token before transacting in that token.
	UsedAutoAssociations int32 `protobuf:"varint,19,opt,name=used_auto_associations,json=usedAutoAssociations,proto3" json:"used_auto_associations,omitempty"`
	// *
	// A count of tokens associated with this account.
	// <p>
	// This value determines a portion of the renewal fee for this account.
	NumberAssociations int32 `protobuf:"varint,20,opt,name=number_associations,json=numberAssociations,proto3" json:"number_associations,omitempty"`
	// *
	// A boolean indicating that this account is owned by a smart contract.
	SmartContract bool `protobuf:"varint,21,opt,name=smart_contract,json=smartContract,proto3" json:"smart_contract,omitempty"`
	// *
	// A count of tokens with a positive balance associated with this account.
	// <p>
	// If the account has a positive balance in any token,
	// it SHALL NOT be deleted.
	NumberPositiveBalances int32 `protobuf:"varint,22,opt,name=number_positive_balances,json=numberPositiveBalances,proto3" json:"number_positive_balances,omitempty"`
	// *
	// A nonce of this account for Ethereum interoperability.
	EthereumNonce int64 `protobuf:"varint,23,opt,name=ethereum_nonce,json=ethereumNonce,proto3" json:"ethereum_nonce,omitempty"`
	// *
	// An amount of HBAR staked by this account at the start of
	// the last reward period.
	StakeAtStartOfLastRewardedPeriod int64 `protobuf:"varint,24,opt,name=stake_at_start_of_last_rewarded_period,json=stakeAtStartOfLastRewardedPeriod,proto3" json:"stake_at_start_of_last_rewarded_period,omitempty"`
	// *
	// An account identifier for automatic renewal.<br/>
	// This is the identifier of another account, in the same shard and
	// realm as this account, that has signed a transaction allowing the
	// network to use its balance, if needed, to automatically extend this
	// account's expiration time during automatic renewal processing.
	// <p>
	// If this is set, and this account lack sufficient HBAR balance to pay
	// renewal fees when due, then the network SHALL deduct the necessary fees
	// from the designated auto renew account, if that account has sufficient
	// balance.
	AutoRenewAccountId *AccountID `protobuf:"bytes,25,opt,name=auto_renew_account_id,json=autoRenewAccountId,proto3" json:"auto_renew_account_id,omitempty"`
	// *
	// A count of the number of seconds to extend this account's expiration.
	// <p>
	// The network SHALL extend the account's expiration by this number of
	// seconds, if funds are available, upon automatic renewal.<br/>
	// This SHALL NOT apply if the account is already deleted
	// upon expiration.<br/>
	// If this is not provided in an allowed range on account creation, the
	// transaction SHALL fail with INVALID_AUTO_RENEWAL_PERIOD. The default
	// values for the minimum period and maximum period are currently 30 days
	// and 90 days, respectively.
	AutoRenewSeconds int64 `protobuf:"varint,26,opt,name=auto_renew_seconds,json=autoRenewSeconds,proto3" json:"auto_renew_seconds,omitempty"`
	// *
	// A count of smart contract key-value pairs.<br/>
	// If this account is a smart-contract, this is the number of key-value
	// pairs stored on the contract.
	// <p>
	// If this account is not a smart contract, this field
	// SHALL NOT be used.<br/>
	// This value SHALL determine a portion of the storage rental
	// fees for the contract.
	ContractKvPairsNumber int32 `protobuf:"varint,27,opt,name=contract_kv_pairs_number,json=contractKvPairsNumber,proto3" json:"contract_kv_pairs_number,omitempty"`
	// *
	// A list of crypto (HBAR) allowances approved by this account.
	// <p>
	// If this is not empty, each allowance SHALL permit a specified "spender"
	// account to spend this account's HBAR balance, up to a designated
	// limit.<br/>
	// This field SHALL permit spending only HBAR balance, not other tokens the
	// account may hold. Allowances for other tokens SHALL be listed in the
	// `token_allowances` field or the `approve_for_all_nft_allowances` field.
	CryptoAllowances []*AccountCryptoAllowance `protobuf:"bytes,28,rep,name=crypto_allowances,json=cryptoAllowances,proto3" json:"crypto_allowances,omitempty"`
	// *
	// A list of non-fungible token (NFT) allowances approved by this account.
	// <p>
	// If this is not empty, each allowance permits a specified "spender"
	// account to transfer _all_ of this account's non-fungible tokens from a
	// particular collection.<br/>
	// Allowances for a specific serial number MUST be directly associated with
	// that specific non-fungible token, rather than the holding account.
	ApproveForAllNftAllowances []*AccountApprovalForAllAllowance `protobuf:"bytes,29,rep,name=approve_for_all_nft_allowances,json=approveForAllNftAllowances,proto3" json:"approve_for_all_nft_allowances,omitempty"`
	// *
	// A list of fungible token allowances approved by this account.
	// <p>
	// If this is not empty, each allowance permits a specified "spender" to
	// spend this account's fungible tokens, of the designated type, up to a
	// designated limit.
	TokenAllowances []*AccountFungibleTokenAllowance `protobuf:"bytes,30,rep,name=token_allowances,json=tokenAllowances,proto3" json:"token_allowances,omitempty"`
	// *
	// A count of tokens for which this account is the treasury account.
	// <p>
	// Each native token is initially created with all tokens held by its
	// treasury, and the owner of that account (which may be a smart contract)
	// determines how those tokens are distributed.
	NumberTreasuryTitles uint32 `protobuf:"varint,31,opt,name=number_treasury_titles,json=numberTreasuryTitles,proto3" json:"number_treasury_titles,omitempty"`
	// *
	// A flag indicating that the account is expired and pending removal.
	// <p>
	// When the network checks for entity expiration, it SHALL set this flag if
	// the account expiration time has past and the account has no HBAR
	// sufficient to pay current renewal fees.<br/>
	// If the account has an auto-renew account set with an HBAR balance that
	// could pay for an auto-renewal, then this flag SHALL NOT be set. This
	// ensures the account is not encumbered during the time between expiration
	// and when the auto-renewal processing renews the account.
	ExpiredAndPendingRemoval bool `protobuf:"varint,32,opt,name=expired_and_pending_removal,json=expiredAndPendingRemoval,proto3" json:"expired_and_pending_removal,omitempty"`
	// *
	// A contract storage key.<br/>
	// This is the first key in the doubly-linked list of this
	// contract's storage mappings.
	// <p>
	// This value SHALL be empty if the account is not a contract or the
	// contract has no storage mappings.
	FirstContractStorageKey []byte `protobuf:"bytes,33,opt,name=first_contract_storage_key,json=firstContractStorageKey,proto3" json:"first_contract_storage_key,omitempty"`
	// *
	// A pending airdrop ID.<br/>
	// This is the head of the linked list for this account from the
	// account airdrops map.<br/>
	// <p>
	// The account airdrops SHALL be connected by including the "next" and
	// "previous" `PendingAirdropID` in each `AccountAirdrop` message.<br/>
	// This value SHALL NOT be empty if this account is "sender" for any
	// pending airdrop, and SHALL be empty otherwise.
	HeadPendingAirdropId *PendingAirdropId `protobuf:"bytes,34,opt,name=head_pending_airdrop_id,json=headPendingAirdropId,proto3" json:"head_pending_airdrop_id,omitempty"`
	// *
	// A number of pending airdrops.
	// <p>
	// This count SHALL be used to calculate rent _without_ walking the linked
	// list of pending airdrops associated to this account via the
	// `head_pending_airdrop_id` field.<br/>
	// This value MUST be updated for every airdrop, clam, or cancel transaction
	// that designates this account as a receiver.<br/>
	// This number MUST always match the count of entries in the "list"
	// identified by `head_pending_airdrop_id`.
	NumberPendingAirdrops uint64 `protobuf:"varint,35,opt,name=number_pending_airdrops,json=numberPendingAirdrops,proto3" json:"number_pending_airdrops,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_account_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0}
}

func (x *Account) GetAccountId() *AccountID {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *Account) GetAlias() []byte {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *Account) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Account) GetExpirationSecond() int64 {
	if x != nil {
		return x.ExpirationSecond
	}
	return 0
}

func (x *Account) GetTinybarBalance() int64 {
	if x != nil {
		return x.TinybarBalance
	}
	return 0
}

func (x *Account) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Account) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Account) GetStakedToMe() int64 {
	if x != nil {
		return x.StakedToMe
	}
	return 0
}

func (x *Account) GetStakePeriodStart() int64 {
	if x != nil {
		return x.StakePeriodStart
	}
	return 0
}

func (m *Account) GetStakedId() isAccount_StakedId {
	if m != nil {
		return m.StakedId
	}
	return nil
}

func (x *Account) GetStakedAccountId() *AccountID {
	if x, ok := x.GetStakedId().(*Account_StakedAccountId); ok {
		return x.StakedAccountId
	}
	return nil
}

func (x *Account) GetStakedNodeId() int64 {
	if x, ok := x.GetStakedId().(*Account_StakedNodeId); ok {
		return x.StakedNodeId
	}
	return 0
}

func (x *Account) GetDeclineReward() bool {
	if x != nil {
		return x.DeclineReward
	}
	return false
}

func (x *Account) GetReceiverSigRequired() bool {
	if x != nil {
		return x.ReceiverSigRequired
	}
	return false
}

func (x *Account) GetHeadTokenId() *TokenID {
	if x != nil {
		return x.HeadTokenId
	}
	return nil
}

func (x *Account) GetHeadNftId() *NftID {
	if x != nil {
		return x.HeadNftId
	}
	return nil
}

func (x *Account) GetHeadNftSerialNumber() int64 {
	if x != nil {
		return x.HeadNftSerialNumber
	}
	return 0
}

func (x *Account) GetNumberOwnedNfts() int64 {
	if x != nil {
		return x.NumberOwnedNfts
	}
	return 0
}

func (x *Account) GetMaxAutoAssociations() int32 {
	if x != nil {
		return x.MaxAutoAssociations
	}
	return 0
}

func (x *Account) GetUsedAutoAssociations() int32 {
	if x != nil {
		return x.UsedAutoAssociations
	}
	return 0
}

func (x *Account) GetNumberAssociations() int32 {
	if x != nil {
		return x.NumberAssociations
	}
	return 0
}

func (x *Account) GetSmartContract() bool {
	if x != nil {
		return x.SmartContract
	}
	return false
}

func (x *Account) GetNumberPositiveBalances() int32 {
	if x != nil {
		return x.NumberPositiveBalances
	}
	return 0
}

func (x *Account) GetEthereumNonce() int64 {
	if x != nil {
		return x.EthereumNonce
	}
	return 0
}

func (x *Account) GetStakeAtStartOfLastRewardedPeriod() int64 {
	if x != nil {
		return x.StakeAtStartOfLastRewardedPeriod
	}
	return 0
}

func (x *Account) GetAutoRenewAccountId() *AccountID {
	if x != nil {
		return x.AutoRenewAccountId
	}
	return nil
}

func (x *Account) GetAutoRenewSeconds() int64 {
	if x != nil {
		return x.AutoRenewSeconds
	}
	return 0
}

func (x *Account) GetContractKvPairsNumber() int32 {
	if x != nil {
		return x.ContractKvPairsNumber
	}
	return 0
}

func (x *Account) GetCryptoAllowances() []*AccountCryptoAllowance {
	if x != nil {
		return x.CryptoAllowances
	}
	return nil
}

func (x *Account) GetApproveForAllNftAllowances() []*AccountApprovalForAllAllowance {
	if x != nil {
		return x.ApproveForAllNftAllowances
	}
	return nil
}

func (x *Account) GetTokenAllowances() []*AccountFungibleTokenAllowance {
	if x != nil {
		return x.TokenAllowances
	}
	return nil
}

func (x *Account) GetNumberTreasuryTitles() uint32 {
	if x != nil {
		return x.NumberTreasuryTitles
	}
	return 0
}

func (x *Account) GetExpiredAndPendingRemoval() bool {
	if x != nil {
		return x.ExpiredAndPendingRemoval
	}
	return false
}

func (x *Account) GetFirstContractStorageKey() []byte {
	if x != nil {
		return x.FirstContractStorageKey
	}
	return nil
}

func (x *Account) GetHeadPendingAirdropId() *PendingAirdropId {
	if x != nil {
		return x.HeadPendingAirdropId
	}
	return nil
}

func (x *Account) GetNumberPendingAirdrops() uint64 {
	if x != nil {
		return x.NumberPendingAirdrops
	}
	return 0
}

type isAccount_StakedId interface {
	isAccount_StakedId()
}

type Account_StakedAccountId struct {
	// *
	// An identifier for the account to which this account is
	// staking its balances as a proxy.
	// <p>
	// If this account is not currently staking its balances, then this
	// field, if set, SHALL be the sentinel value of `0.0.0`.
	StakedAccountId *AccountID `protobuf:"bytes,10,opt,name=staked_account_id,json=stakedAccountId,proto3,oneof"`
}

type Account_StakedNodeId struct {
	// *
	// An identifier for the node this account is staked to.
	// <p>
	// If this account is not currently staking its balances, then this
	// field, if set, SHALL be the sentinel value of `-1`.
	// Wallet software SHOULD surface staking issues to users and provide a
	// simple mechanism to update staking to a new node ID in the event the
	// prior staked node ID ceases to be valid.
	// <p>
	// <blockquote>Note: node IDs do fluctuate as node operators change.
	// The Account owner MUST submit a new transaction to change this value
	// if the current node ID changes or ceases to operate as a node. An
	// account with an invalid `staked_node_id` SHALL NOT participate in
	// staking until the `staked_node_id` is updated to a valid node ID.
	// </blockquote>
	StakedNodeId int64 `protobuf:"varint,11,opt,name=staked_node_id,json=stakedNodeId,proto3,oneof"`
}

func (*Account_StakedAccountId) isAccount_StakedId() {}

func (*Account_StakedNodeId) isAccount_StakedId() {}

// *
// Permission granted by one account (the "funding" account) to another account
// (the "spender" account) that allows the spender to transfer all serial
// numbers of a specific non-fungible token (NFT) collection owned by the
// funding account.<br/>
// This is a broad permission, as it does not matter how many NFTs of the
// specified collection the funding account owns, the spender MAY dispose of
// any or all of them with this allowance.<br/>
// Each token type (typically a collection of NFTs) SHALL require a separate
// allowance.<br/>
// Allowances for a specific serial number MUST be directly associated with
// that specific non-fungible token, rather than the holding account.
//
// An allowance SHALL NOT transfer any tokens directly, it only permits
// transactions signed only by the spender account to transfer any non-fungible
// tokens of the specified type owned by the funding account.
type AccountApprovalForAllAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The identifier for the token associated with this allowance.
	// <p>
	// This token MUST be a non-fungible/unique token.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// *
	// The identifier for the spending account associated with this allowance.
	// <p>
	// This account SHALL be permitted to sign transactions to spend tokens of
	// the associated token type from the funding/allowing account.
	SpenderId *AccountID `protobuf:"bytes,2,opt,name=spender_id,json=spenderId,proto3" json:"spender_id,omitempty"`
}

func (x *AccountApprovalForAllAllowance) Reset() {
	*x = AccountApprovalForAllAllowance{}
	mi := &file_account_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountApprovalForAllAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountApprovalForAllAllowance) ProtoMessage() {}

func (x *AccountApprovalForAllAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountApprovalForAllAllowance.ProtoReflect.Descriptor instead.
func (*AccountApprovalForAllAllowance) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{1}
}

func (x *AccountApprovalForAllAllowance) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *AccountApprovalForAllAllowance) GetSpenderId() *AccountID {
	if x != nil {
		return x.SpenderId
	}
	return nil
}

// *
// Permission granted by one account (the "funding" account) to another account
// (the "spender" account) that allows the spender to spend a specified amount
// of a specific non-HBAR fungible token from the balance owned by the funding
// account.
//
// An allowance SHALL NOT transfer any tokens directly, it only permits
// transactions signed only by the spender account to transfer tokens of the
// specified type, up to the amount specified, from the funding account.
//
// Once the specified amount is spent, the allowance SHALL be consumed and a
// new allowance SHALL be required before that spending account may spend
// additional tokens from the funding account.
type AccountFungibleTokenAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The identifier for the token associated with this allowance.
	// <p>
	// This token MUST be a fungible/common token.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// *
	// The identifier for the spending account associated with this allowance.
	// <p>
	// This account SHALL be permitted to sign transactions to spend tokens of
	// the associated token type from the funding/allowing account.<br/>
	// This permission SHALL be limited to no more than the specified `amount`.
	SpenderId *AccountID `protobuf:"bytes,2,opt,name=spender_id,json=spenderId,proto3" json:"spender_id,omitempty"`
	// The maximum amount that the spender account may transfer within the
	// scope of this allowance.
	// <p>
	// This allowance SHALL be consumed if any combination of transfers
	// authorized via this allowance meet this value in total.<br/>
	// This value MUST be specified in the smallest units of the relevant token
	// (i.e. 10<sup>-decimals</sup> whole tokens).
	Amount int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AccountFungibleTokenAllowance) Reset() {
	*x = AccountFungibleTokenAllowance{}
	mi := &file_account_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountFungibleTokenAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountFungibleTokenAllowance) ProtoMessage() {}

func (x *AccountFungibleTokenAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountFungibleTokenAllowance.ProtoReflect.Descriptor instead.
func (*AccountFungibleTokenAllowance) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{2}
}

func (x *AccountFungibleTokenAllowance) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *AccountFungibleTokenAllowance) GetSpenderId() *AccountID {
	if x != nil {
		return x.SpenderId
	}
	return nil
}

func (x *AccountFungibleTokenAllowance) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// *
// Permission granted by one account (the "funding" account) to another account
// (the "spender" account) that allows the spender to spend a specified amount
// of HBAR owned by the funding account.
//
// An allowance SHALL NOT transfer any HBAR directly, it only permits
// transactions signed only by the spender account to transfer HBAR, up to the
// amount specified, from the funding account.
//
// Once the specified amount is spent, the allowance SHALL be consumed and a
// new allowance SHALL be required before that spending account may spend
// additional HBAR from the funding account.
type AccountCryptoAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The identifier for the spending account associated with this allowance.
	// <p>
	// This account SHALL be permitted to sign transactions to spend HBAR from
	// the funding/allowing account.<br/>
	// This permission SHALL be limited to no more than the specified `amount`.
	SpenderId *AccountID `protobuf:"bytes,1,opt,name=spender_id,json=spenderId,proto3" json:"spender_id,omitempty"`
	// The maximum amount that the spender account may transfer within the
	// scope of this allowance.
	// <p>
	// This allowance SHALL be consumed if any combination of transfers
	// authorized via this allowance meet this value in total.<br/>
	// This value MUST be specified in tinybar (i.e. 10<sup>-8</sup> HBAR).
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AccountCryptoAllowance) Reset() {
	*x = AccountCryptoAllowance{}
	mi := &file_account_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountCryptoAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCryptoAllowance) ProtoMessage() {}

func (x *AccountCryptoAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCryptoAllowance.ProtoReflect.Descriptor instead.
func (*AccountCryptoAllowance) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{3}
}

func (x *AccountCryptoAllowance) GetSpenderId() *AccountID {
	if x != nil {
		return x.SpenderId
	}
	return nil
}

func (x *AccountCryptoAllowance) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_account_proto protoreflect.FileDescriptor

var file_account_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x0e, 0x0a, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6e, 0x79, 0x62,
	0x61, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x74, 0x69, 0x6e, 0x79, 0x62, 0x61, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x4d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3e,
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x32, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x66,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x66, 0x74, 0x49, 0x44, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x4e, 0x66,
	0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x68, 0x65, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x64,
	0x4e, 0x66, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x75, 0x73, 0x65, 0x64, 0x41, 0x75,
	0x74, 0x6f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x26, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x20, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x43, 0x0a, 0x15, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6b, 0x76, 0x5f, 0x70, 0x61, 0x69, 0x72,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x76, 0x50, 0x61, 0x69, 0x72, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x69, 0x0a, 0x1e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x1a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x4e,
	0x66, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x61, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x41, 0x6e, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x4e, 0x0a, 0x17, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x52, 0x14, 0x68, 0x65, 0x61, 0x64, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41,
	0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x1d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75,
	0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x26, 0x0a, 0x22, 0x63,
	0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76,
	0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_account_proto_rawDescOnce sync.Once
	file_account_proto_rawDescData = file_account_proto_rawDesc
)

func file_account_proto_rawDescGZIP() []byte {
	file_account_proto_rawDescOnce.Do(func() {
		file_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_proto_rawDescData)
	})
	return file_account_proto_rawDescData
}

var file_account_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_account_proto_goTypes = []any{
	(*Account)(nil),                        // 0: proto.Account
	(*AccountApprovalForAllAllowance)(nil), // 1: proto.AccountApprovalForAllAllowance
	(*AccountFungibleTokenAllowance)(nil),  // 2: proto.AccountFungibleTokenAllowance
	(*AccountCryptoAllowance)(nil),         // 3: proto.AccountCryptoAllowance
	(*AccountID)(nil),                      // 4: proto.AccountID
	(*Key)(nil),                            // 5: proto.Key
	(*TokenID)(nil),                        // 6: proto.TokenID
	(*NftID)(nil),                          // 7: proto.NftID
	(*PendingAirdropId)(nil),               // 8: proto.PendingAirdropId
}
var file_account_proto_depIdxs = []int32{
	4,  // 0: proto.Account.account_id:type_name -> proto.AccountID
	5,  // 1: proto.Account.key:type_name -> proto.Key
	4,  // 2: proto.Account.staked_account_id:type_name -> proto.AccountID
	6,  // 3: proto.Account.head_token_id:type_name -> proto.TokenID
	7,  // 4: proto.Account.head_nft_id:type_name -> proto.NftID
	4,  // 5: proto.Account.auto_renew_account_id:type_name -> proto.AccountID
	3,  // 6: proto.Account.crypto_allowances:type_name -> proto.AccountCryptoAllowance
	1,  // 7: proto.Account.approve_for_all_nft_allowances:type_name -> proto.AccountApprovalForAllAllowance
	2,  // 8: proto.Account.token_allowances:type_name -> proto.AccountFungibleTokenAllowance
	8,  // 9: proto.Account.head_pending_airdrop_id:type_name -> proto.PendingAirdropId
	6,  // 10: proto.AccountApprovalForAllAllowance.token_id:type_name -> proto.TokenID
	4,  // 11: proto.AccountApprovalForAllAllowance.spender_id:type_name -> proto.AccountID
	6,  // 12: proto.AccountFungibleTokenAllowance.token_id:type_name -> proto.TokenID
	4,  // 13: proto.AccountFungibleTokenAllowance.spender_id:type_name -> proto.AccountID
	4,  // 14: proto.AccountCryptoAllowance.spender_id:type_name -> proto.AccountID
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_account_proto_init() }
func file_account_proto_init() {
	if File_account_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_account_proto_msgTypes[0].OneofWrappers = []any{
		(*Account_StakedAccountId)(nil),
		(*Account_StakedNodeId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_account_proto_goTypes,
		DependencyIndexes: file_account_proto_depIdxs,
		MessageInfos:      file_account_proto_msgTypes,
	}.Build()
	File_account_proto = out.File
	file_account_proto_rawDesc = nil
	file_account_proto_goTypes = nil
	file_account_proto_depIdxs = nil
}
