//*
// # Node Stake Updates
// A system-initiated (i.e. internal) transaction to update stake information
// for nodes at the end of a staking period.
//
// Note that staking rewards are not paid immediately. The rewards are
// calculated, and the amount to be paid is reserved in the reward account,
// at the end of each staking period. The actual recipient accounts are then
// paid rewards when that account participates in any transaction that
// changes staking information or the account balance. This reduces the
// resources for calculating the staking rewards, quite dramatically,
// and provides an incentive for account owners to engage with the network,
// in at least a minor fashion, occasionally (typically annually).<br/>
// The unexpected change in balances, however, can be surprising to the
// account holder.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: node_stake_update.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A system initiated transaction to update staking information.
//
// This transaction SHALL be issued at the end of each staking period to update
// node stakes and reward limits.<br/>
// This transaction SHALL be a child of the first transaction to reach
// consensus following the end of the previous staking period.<br/>
// This transaction MUST NOT be sent by a client and SHALL be rejected if
// received by any node.<br/>
// This transaction SHALL be present in the record stream or block stream.
//
// ### Block Stream Effects
// None
type NodeStakeUpdateTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A timestamp indicating the end of the staking period.
	// <p>
	// This value SHALL be one nanosecond prior to midnight prior to the
	// consensus time of the parent transaction.
	EndOfStakingPeriod *Timestamp `protobuf:"bytes,1,opt,name=end_of_staking_period,json=endOfStakingPeriod,proto3" json:"end_of_staking_period,omitempty"`
	// *
	// A list of `NodeStake` entries for each node at the beginning of the new
	// staking period.
	// <p>
	// This list SHALL have one entry for each node participating in network
	// consensus.
	NodeStake []*NodeStake `protobuf:"bytes,2,rep,name=node_stake,json=nodeStake,proto3" json:"node_stake,omitempty"`
	// *
	// A maximum reward rate for this staking period.
	// <p>
	// This SHALL be a ratio of tinybar to HBAR.<br/>
	// An account SHALL NOT receive a reward greater than the product of this
	// ratio and the total number of HBAR staked by that account.
	MaxStakingRewardRatePerHbar int64 `protobuf:"varint,3,opt,name=max_staking_reward_rate_per_hbar,json=maxStakingRewardRatePerHbar,proto3" json:"max_staking_reward_rate_per_hbar,omitempty"`
	// *
	// A fraction of network and service fees paid to
	// the "node" reward account.<br/>
	// The node staking rewards are paid from the designated reward account
	// `0.0.801`, which receives a fraction of network and service fees for
	// each transaction. This field is the value of that fraction for the
	// last staking period.
	NodeRewardFeeFraction *Fraction `protobuf:"bytes,4,opt,name=node_reward_fee_fraction,json=nodeRewardFeeFraction,proto3" json:"node_reward_fee_fraction,omitempty"`
	// *
	// A limit to the number of staking periods held for inactive accounts.<br/>
	// This is the maximum number of trailing staking periods for which an
	// account can collect staking rewards.<br/>
	// #### Example
	// If this value is 365 with a calendar day period, then each account must
	// collect rewards at least once per calendar year to receive the full
	// amount of staking rewards earned.
	// <p>
	// Staking rewards SHALL be stored in network state for no more than
	// `staking_periods_stored` staking periods.<br/>
	// Each account MUST participate in at least one transaction that affects
	// its balance, staking, or staking metadata within this time limit
	// to receive all available staking rewards.
	StakingPeriodsStored int64 `protobuf:"varint,5,opt,name=staking_periods_stored,json=stakingPeriodsStored,proto3" json:"staking_periods_stored,omitempty"`
	// *
	// A number of minutes representing a staking period.<br/>
	// <blockquote>Note<blockquote>
	// For the special case of `1440` minutes, periods are treated as
	// calendar days aligned to midnight UTC, rather than repeating `1440`
	// minute periods left-aligned at the epoch.</blockquote></blockquote>
	StakingPeriod int64 `protobuf:"varint,6,opt,name=staking_period,json=stakingPeriod,proto3" json:"staking_period,omitempty"`
	// *
	// A fraction of network and service fees paid to
	// the "general" reward account.<br/>
	// The general staking rewards are paid from the designated reward account
	// `0.0.800`, which receives a fraction of network and service fees for
	// each transaction. This field is the value of that fraction for the
	// last staking period.
	StakingRewardFeeFraction *Fraction `protobuf:"bytes,7,opt,name=staking_reward_fee_fraction,json=stakingRewardFeeFraction,proto3" json:"staking_reward_fee_fraction,omitempty"`
	// *
	// A minimum balance required to pay general staking rewards.
	// <p>
	// If the balance of the staking reward account `0.0.800` is below this
	// threshold, staking rewards SHALL NOT be paid in full.
	StakingStartThreshold int64 `protobuf:"varint,8,opt,name=staking_start_threshold,json=stakingStartThreshold,proto3" json:"staking_start_threshold,omitempty"`
	// *
	// HIP-786 replaced this field with `max_total_reward`.<br/>
	// This was a maximum total number of tinybars to be distributed as staking
	// rewards in the staking period that just ended.
	//
	// Deprecated: Marked as deprecated in node_stake_update.proto.
	StakingRewardRate int64 `protobuf:"varint,9,opt,name=staking_reward_rate,json=stakingRewardRate,proto3" json:"staking_reward_rate,omitempty"`
	// *
	// An amount reserved in the staking reward account.<br/>
	// This is an amount "reserved" in the balance of account `0.0.800` that
	// is already owed for pending rewards that were previously earned but
	// have not yet been collected.<br/>
	// This value is further detailed in HIP-786.
	ReservedStakingRewards int64 `protobuf:"varint,10,opt,name=reserved_staking_rewards,json=reservedStakingRewards,proto3" json:"reserved_staking_rewards,omitempty"`
	// *
	// An available, unreserved, amount in the staking reward account.<br/>
	// This is the balance of the staking reward account `0.0.800` at the close
	// of the staking period that just ended, after reduction for all "reserved"
	// funds necessary to pay previously earned rewards.<br/>
	// This value is further detailed in HIP-786.
	// <p>
	// This value SHALL be used to calculate the reward ratio according to
	// the formula detailed in HIP-782.
	UnreservedStakingRewardBalance int64 `protobuf:"varint,11,opt,name=unreserved_staking_reward_balance,json=unreservedStakingRewardBalance,proto3" json:"unreserved_staking_reward_balance,omitempty"`
	// *
	// A minimum balance required for maximum staking rewards.<br/>
	// This value is further detailed in HIP-786.
	// The formula to calculate staking rewards is detailed in HIP-782.
	// <p>
	// The value of `unreserved_staking_reward_balance` MUST match or exceed the
	// value of this field to support the maximum staking reward ratio.<br/>
	RewardBalanceThreshold int64 `protobuf:"varint,12,opt,name=reward_balance_threshold,json=rewardBalanceThreshold,proto3" json:"reward_balance_threshold,omitempty"`
	// *
	// A maximum network-wide stake that can earn full rewards.<br/>
	// If the network-wide stake, in tinybar, exceeds this value, then staking
	// rewards must be reduced to maintain "smooth" reward adjustments as
	// defined in HIP-782.<br/>
	// This value is further detailed in HIP-786.
	// <p>
	// If the total network-wide stake exceeds this value, the effective
	// staking reward ratio MUST be reduced to maintain solvency of the
	// staking reward account.
	MaxStakeRewarded int64 `protobuf:"varint,13,opt,name=max_stake_rewarded,json=maxStakeRewarded,proto3" json:"max_stake_rewarded,omitempty"`
	// *
	// A limit amount that could be paid as staking rewards.<br/>
	// In the limit case, the network could pay at most this amount, in tinybar
	// as staking rewards for the staking period that just ended, if all other
	// conditions were met to perfection.<br/>
	// <p>
	// This value SHALL reflect the result of a maximum reward calculation that
	// takes into account the balance thresholds and maximum stake thresholds
	// as defined in HIP-782 and HIP-786.<br/>
	// This value is a convenience. The actual defined calculation SHALL be
	// authoritative in the unlikely event this value differs.
	MaxTotalReward int64 `protobuf:"varint,14,opt,name=max_total_reward,json=maxTotalReward,proto3" json:"max_total_reward,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NodeStakeUpdateTransactionBody) Reset() {
	*x = NodeStakeUpdateTransactionBody{}
	mi := &file_node_stake_update_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeStakeUpdateTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStakeUpdateTransactionBody) ProtoMessage() {}

func (x *NodeStakeUpdateTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_node_stake_update_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStakeUpdateTransactionBody.ProtoReflect.Descriptor instead.
func (*NodeStakeUpdateTransactionBody) Descriptor() ([]byte, []int) {
	return file_node_stake_update_proto_rawDescGZIP(), []int{0}
}

func (x *NodeStakeUpdateTransactionBody) GetEndOfStakingPeriod() *Timestamp {
	if x != nil {
		return x.EndOfStakingPeriod
	}
	return nil
}

func (x *NodeStakeUpdateTransactionBody) GetNodeStake() []*NodeStake {
	if x != nil {
		return x.NodeStake
	}
	return nil
}

func (x *NodeStakeUpdateTransactionBody) GetMaxStakingRewardRatePerHbar() int64 {
	if x != nil {
		return x.MaxStakingRewardRatePerHbar
	}
	return 0
}

func (x *NodeStakeUpdateTransactionBody) GetNodeRewardFeeFraction() *Fraction {
	if x != nil {
		return x.NodeRewardFeeFraction
	}
	return nil
}

func (x *NodeStakeUpdateTransactionBody) GetStakingPeriodsStored() int64 {
	if x != nil {
		return x.StakingPeriodsStored
	}
	return 0
}

func (x *NodeStakeUpdateTransactionBody) GetStakingPeriod() int64 {
	if x != nil {
		return x.StakingPeriod
	}
	return 0
}

func (x *NodeStakeUpdateTransactionBody) GetStakingRewardFeeFraction() *Fraction {
	if x != nil {
		return x.StakingRewardFeeFraction
	}
	return nil
}

func (x *NodeStakeUpdateTransactionBody) GetStakingStartThreshold() int64 {
	if x != nil {
		return x.StakingStartThreshold
	}
	return 0
}

// Deprecated: Marked as deprecated in node_stake_update.proto.
func (x *NodeStakeUpdateTransactionBody) GetStakingRewardRate() int64 {
	if x != nil {
		return x.StakingRewardRate
	}
	return 0
}

func (x *NodeStakeUpdateTransactionBody) GetReservedStakingRewards() int64 {
	if x != nil {
		return x.ReservedStakingRewards
	}
	return 0
}

func (x *NodeStakeUpdateTransactionBody) GetUnreservedStakingRewardBalance() int64 {
	if x != nil {
		return x.UnreservedStakingRewardBalance
	}
	return 0
}

func (x *NodeStakeUpdateTransactionBody) GetRewardBalanceThreshold() int64 {
	if x != nil {
		return x.RewardBalanceThreshold
	}
	return 0
}

func (x *NodeStakeUpdateTransactionBody) GetMaxStakeRewarded() int64 {
	if x != nil {
		return x.MaxStakeRewarded
	}
	return 0
}

func (x *NodeStakeUpdateTransactionBody) GetMaxTotalReward() int64 {
	if x != nil {
		return x.MaxTotalReward
	}
	return 0
}

// *
// Staking information for one node at the end of a staking period.
//
// This SHALL be one entry in a list reported at the end of each
// full staking period.
type NodeStake struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A limit to the amount of stake considered for consensus weight.
	// <p>
	// The amount of stake (whether accepting rewards or not) assigned to a
	// node that exceeds this limit SHALL NOT be considered for
	// consensus weight calculation.<br/>
	// If stake to _reward_ for a node exceeds this threshold, then all
	// accounts staking to that node SHALL receive a lower reward rate in
	// proportion to the excess stake.
	MaxStake int64 `protobuf:"varint,1,opt,name=max_stake,json=maxStake,proto3" json:"max_stake,omitempty"`
	// *
	// A minimum amount of HBAR staked to a node to receive rewards.
	// <p>
	// If the amount of stake (whether accepting rewards or not) assigned to
	// a node at the start of a staking period is less than this threshold,
	// then no rewards SHALL be paid to that node or to any accounts
	// staking to that node.
	MinStake int64 `protobuf:"varint,2,opt,name=min_stake,json=minStake,proto3" json:"min_stake,omitempty"`
	// *
	// A node identifier.<br/>
	// This value uniquely identifies this node within the
	// network address book.
	NodeId int64 `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// *
	// The rate of rewards, in tinybar per HBAR, for the staking reward
	// period that just ended.
	RewardRate int64 `protobuf:"varint,4,opt,name=reward_rate,json=rewardRate,proto3" json:"reward_rate,omitempty"`
	// *
	// A consensus weight assigned to this node for the next staking period.
	Stake int64 `protobuf:"varint,5,opt,name=stake,proto3" json:"stake,omitempty"`
	// *
	// The total amount staked to this node, while declining rewards.
	// <p>
	// This SHALL be the total staked amount, in tinybar, that is staked to
	// this node with the value of the `decline_reward` set.<br/>
	// This value MUST be calculated at the beginning of the staking period.
	StakeNotRewarded int64 `protobuf:"varint,6,opt,name=stake_not_rewarded,json=stakeNotRewarded,proto3" json:"stake_not_rewarded,omitempty"`
	// *
	// The total amount staked to this node, while accepting rewards.
	// <p>
	// This SHALL be the total staked amount, in tinybar, that is staked to
	// this node with the value of the `decline_reward` not set.<br/>
	// This value MUST be calculated at the beginning of the staking period.
	StakeRewarded int64 `protobuf:"varint,7,opt,name=stake_rewarded,json=stakeRewarded,proto3" json:"stake_rewarded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeStake) Reset() {
	*x = NodeStake{}
	mi := &file_node_stake_update_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStake) ProtoMessage() {}

func (x *NodeStake) ProtoReflect() protoreflect.Message {
	mi := &file_node_stake_update_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStake.ProtoReflect.Descriptor instead.
func (*NodeStake) Descriptor() ([]byte, []int) {
	return file_node_stake_update_proto_rawDescGZIP(), []int{1}
}

func (x *NodeStake) GetMaxStake() int64 {
	if x != nil {
		return x.MaxStake
	}
	return 0
}

func (x *NodeStake) GetMinStake() int64 {
	if x != nil {
		return x.MinStake
	}
	return 0
}

func (x *NodeStake) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NodeStake) GetRewardRate() int64 {
	if x != nil {
		return x.RewardRate
	}
	return 0
}

func (x *NodeStake) GetStake() int64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *NodeStake) GetStakeNotRewarded() int64 {
	if x != nil {
		return x.StakeNotRewarded
	}
	return 0
}

func (x *NodeStake) GetStakeRewarded() int64 {
	if x != nil {
		return x.StakeRewarded
	}
	return 0
}

var File_node_stake_update_proto protoreflect.FileDescriptor

const file_node_stake_update_proto_rawDesc = "" +
	"\n" +
	"\x17node_stake_update.proto\x12\x05proto\x1a\x11basic_types.proto\x1a\x0ftimestamp.proto\"\xd7\x06\n" +
	"\x1eNodeStakeUpdateTransactionBody\x12C\n" +
	"\x15end_of_staking_period\x18\x01 \x01(\v2\x10.proto.TimestampR\x12endOfStakingPeriod\x12/\n" +
	"\n" +
	"node_stake\x18\x02 \x03(\v2\x10.proto.NodeStakeR\tnodeStake\x12E\n" +
	" max_staking_reward_rate_per_hbar\x18\x03 \x01(\x03R\x1bmaxStakingRewardRatePerHbar\x12H\n" +
	"\x18node_reward_fee_fraction\x18\x04 \x01(\v2\x0f.proto.FractionR\x15nodeRewardFeeFraction\x124\n" +
	"\x16staking_periods_stored\x18\x05 \x01(\x03R\x14stakingPeriodsStored\x12%\n" +
	"\x0estaking_period\x18\x06 \x01(\x03R\rstakingPeriod\x12N\n" +
	"\x1bstaking_reward_fee_fraction\x18\a \x01(\v2\x0f.proto.FractionR\x18stakingRewardFeeFraction\x126\n" +
	"\x17staking_start_threshold\x18\b \x01(\x03R\x15stakingStartThreshold\x122\n" +
	"\x13staking_reward_rate\x18\t \x01(\x03B\x02\x18\x01R\x11stakingRewardRate\x128\n" +
	"\x18reserved_staking_rewards\x18\n" +
	" \x01(\x03R\x16reservedStakingRewards\x12I\n" +
	"!unreserved_staking_reward_balance\x18\v \x01(\x03R\x1eunreservedStakingRewardBalance\x128\n" +
	"\x18reward_balance_threshold\x18\f \x01(\x03R\x16rewardBalanceThreshold\x12,\n" +
	"\x12max_stake_rewarded\x18\r \x01(\x03R\x10maxStakeRewarded\x12(\n" +
	"\x10max_total_reward\x18\x0e \x01(\x03R\x0emaxTotalReward\"\xea\x01\n" +
	"\tNodeStake\x12\x1b\n" +
	"\tmax_stake\x18\x01 \x01(\x03R\bmaxStake\x12\x1b\n" +
	"\tmin_stake\x18\x02 \x01(\x03R\bminStake\x12\x17\n" +
	"\anode_id\x18\x03 \x01(\x03R\x06nodeId\x12\x1f\n" +
	"\vreward_rate\x18\x04 \x01(\x03R\n" +
	"rewardRate\x12\x14\n" +
	"\x05stake\x18\x05 \x01(\x03R\x05stake\x12,\n" +
	"\x12stake_not_rewarded\x18\x06 \x01(\x03R\x10stakeNotRewarded\x12%\n" +
	"\x0estake_rewarded\x18\a \x01(\x03R\rstakeRewardedB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_node_stake_update_proto_rawDescOnce sync.Once
	file_node_stake_update_proto_rawDescData []byte
)

func file_node_stake_update_proto_rawDescGZIP() []byte {
	file_node_stake_update_proto_rawDescOnce.Do(func() {
		file_node_stake_update_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_node_stake_update_proto_rawDesc), len(file_node_stake_update_proto_rawDesc)))
	})
	return file_node_stake_update_proto_rawDescData
}

var file_node_stake_update_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_node_stake_update_proto_goTypes = []any{
	(*NodeStakeUpdateTransactionBody)(nil), // 0: proto.NodeStakeUpdateTransactionBody
	(*NodeStake)(nil),                      // 1: proto.NodeStake
	(*Timestamp)(nil),                      // 2: proto.Timestamp
	(*Fraction)(nil),                       // 3: proto.Fraction
}
var file_node_stake_update_proto_depIdxs = []int32{
	2, // 0: proto.NodeStakeUpdateTransactionBody.end_of_staking_period:type_name -> proto.Timestamp
	1, // 1: proto.NodeStakeUpdateTransactionBody.node_stake:type_name -> proto.NodeStake
	3, // 2: proto.NodeStakeUpdateTransactionBody.node_reward_fee_fraction:type_name -> proto.Fraction
	3, // 3: proto.NodeStakeUpdateTransactionBody.staking_reward_fee_fraction:type_name -> proto.Fraction
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_node_stake_update_proto_init() }
func file_node_stake_update_proto_init() {
	if File_node_stake_update_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_timestamp_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_node_stake_update_proto_rawDesc), len(file_node_stake_update_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_node_stake_update_proto_goTypes,
		DependencyIndexes: file_node_stake_update_proto_depIdxs,
		MessageInfos:      file_node_stake_update_proto_msgTypes,
	}.Build()
	File_node_stake_update_proto = out.File
	file_node_stake_update_proto_goTypes = nil
	file_node_stake_update_proto_depIdxs = nil
}
