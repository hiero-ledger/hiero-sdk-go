// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: consensus_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsensusServiceClient is the client API for ConsensusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsensusServiceClient interface {
	// *
	// Create an HCS topic.
	// <p>
	// On success, the resulting TransactionReceipt SHALL contain the newly
	// created TopicId.<br/>
	// If the `adminKey` is set on the topic, this transaction MUST be signed
	// by that key.<br/>
	// If the `adminKey` is _not_ set on the topic, this transaction MUST NOT
	// set an `autoRenewAccount`. The new topic will be immutable and must be
	// renewed manually.<br/>
	// If the `autoRenewAccount` is set on the topic, this transaction MUST be
	// signed by that account.<br/>
	// <p>
	// The request body MUST be a
	// [ConsensusCreateTopicTransactionBody](#proto.ConsensusCreateTopicTransactionBody)
	CreateTopic(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Update an HCS topic.
	// <p>
	// If the `adminKey` is not set on the topic, this transaction MUST extend
	// the `expirationTime` and MUST NOT modify any other field.<br/>
	// If the `adminKey` is set on the topic, this transaction MUST be signed
	// by that key.<br/>
	// If this transaction sets a new `adminKey`, this transaction MUST be
	// signed by <strong>_both_</strong> keys, the pre-update `adminKey` and
	// the post-update `adminKey`.<br/>
	// If this transaction sets a new, non-null, `autoRenewAccount`, the newly
	// set account MUST sign this transaction.<br/>
	// <p>
	// The request body MUST be a
	// [ConsensusUpdateTopicTransactionBody](#proto.ConsensusUpdateTopicTransactionBody)
	UpdateTopic(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Delete an HCS topic.
	// <p>
	// If this transaction succeeds, all subsequent transactions referencing
	// the deleted topic SHALL fail.<br/>
	// The `adminKey` MUST be set on the topic and this transaction MUST be
	// signed by that key.<br/>
	// If the `adminKey` is not set on the topic, this transaction SHALL fail
	// with a response code of `UNAUTHORIZED`. A topic without an `adminKey`
	// cannot be deleted, but MAY expire.<br/>
	// <p>
	// The request body MUST be a
	// [ConsensusDeleteTopicTransactionBody](#proto.ConsensusDeleteTopicTransactionBody)
	DeleteTopic(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Submit a message to an HCS topic.
	// <p>
	// Valid and authorized messages on valid topics will be ordered by the
	// consensus service, published in the block stream, and available to all
	// subscribers on this topic via the mirror nodes.<br/>
	// If this transaction succeeds the resulting TransactionReceipt SHALL
	// contain the latest topicSequenceNumber and topicRunningHash for the
	// topic.<br/>
	// If the topic has a `submitKey` then that key MUST sign this
	// transaction.<br/>
	// <p>
	// The request body MUST be a
	// [ConsensusSubmitMessageTransactionBody](#proto.ConsensusSubmitMessageTransactionBody)
	SubmitMessage(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Retrieve the latest state of a topic. This method is unrestricted and
	// allowed on any topic by any payer account.
	// <p>
	// The request body MUST be a
	// [ConsensusGetTopicInfoQuery](#proto.ConsensusGetTopicInfoQuery)<br/>
	// The response body SHALL be a
	// [ConsensusGetTopicInfoResponse](#proto.ConsensusGetTopicInfoResponse)
	GetTopicInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
}

type consensusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusServiceClient(cc grpc.ClientConnInterface) ConsensusServiceClient {
	return &consensusServiceClient{cc}
}

func (c *consensusServiceClient) CreateTopic(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.ConsensusService/createTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) UpdateTopic(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.ConsensusService/updateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) DeleteTopic(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.ConsensusService/deleteTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) SubmitMessage(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.ConsensusService/submitMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) GetTopicInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.ConsensusService/getTopicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsensusServiceServer is the server API for ConsensusService service.
// All implementations must embed UnimplementedConsensusServiceServer
// for forward compatibility
type ConsensusServiceServer interface {
	// *
	// Create an HCS topic.
	// <p>
	// On success, the resulting TransactionReceipt SHALL contain the newly
	// created TopicId.<br/>
	// If the `adminKey` is set on the topic, this transaction MUST be signed
	// by that key.<br/>
	// If the `adminKey` is _not_ set on the topic, this transaction MUST NOT
	// set an `autoRenewAccount`. The new topic will be immutable and must be
	// renewed manually.<br/>
	// If the `autoRenewAccount` is set on the topic, this transaction MUST be
	// signed by that account.<br/>
	// <p>
	// The request body MUST be a
	// [ConsensusCreateTopicTransactionBody](#proto.ConsensusCreateTopicTransactionBody)
	CreateTopic(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Update an HCS topic.
	// <p>
	// If the `adminKey` is not set on the topic, this transaction MUST extend
	// the `expirationTime` and MUST NOT modify any other field.<br/>
	// If the `adminKey` is set on the topic, this transaction MUST be signed
	// by that key.<br/>
	// If this transaction sets a new `adminKey`, this transaction MUST be
	// signed by <strong>_both_</strong> keys, the pre-update `adminKey` and
	// the post-update `adminKey`.<br/>
	// If this transaction sets a new, non-null, `autoRenewAccount`, the newly
	// set account MUST sign this transaction.<br/>
	// <p>
	// The request body MUST be a
	// [ConsensusUpdateTopicTransactionBody](#proto.ConsensusUpdateTopicTransactionBody)
	UpdateTopic(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Delete an HCS topic.
	// <p>
	// If this transaction succeeds, all subsequent transactions referencing
	// the deleted topic SHALL fail.<br/>
	// The `adminKey` MUST be set on the topic and this transaction MUST be
	// signed by that key.<br/>
	// If the `adminKey` is not set on the topic, this transaction SHALL fail
	// with a response code of `UNAUTHORIZED`. A topic without an `adminKey`
	// cannot be deleted, but MAY expire.<br/>
	// <p>
	// The request body MUST be a
	// [ConsensusDeleteTopicTransactionBody](#proto.ConsensusDeleteTopicTransactionBody)
	DeleteTopic(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Submit a message to an HCS topic.
	// <p>
	// Valid and authorized messages on valid topics will be ordered by the
	// consensus service, published in the block stream, and available to all
	// subscribers on this topic via the mirror nodes.<br/>
	// If this transaction succeeds the resulting TransactionReceipt SHALL
	// contain the latest topicSequenceNumber and topicRunningHash for the
	// topic.<br/>
	// If the topic has a `submitKey` then that key MUST sign this
	// transaction.<br/>
	// <p>
	// The request body MUST be a
	// [ConsensusSubmitMessageTransactionBody](#proto.ConsensusSubmitMessageTransactionBody)
	SubmitMessage(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Retrieve the latest state of a topic. This method is unrestricted and
	// allowed on any topic by any payer account.
	// <p>
	// The request body MUST be a
	// [ConsensusGetTopicInfoQuery](#proto.ConsensusGetTopicInfoQuery)<br/>
	// The response body SHALL be a
	// [ConsensusGetTopicInfoResponse](#proto.ConsensusGetTopicInfoResponse)
	GetTopicInfo(context.Context, *Query) (*Response, error)
	mustEmbedUnimplementedConsensusServiceServer()
}

// UnimplementedConsensusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsensusServiceServer struct {
}

func (UnimplementedConsensusServiceServer) CreateTopic(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedConsensusServiceServer) UpdateTopic(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopic not implemented")
}
func (UnimplementedConsensusServiceServer) DeleteTopic(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (UnimplementedConsensusServiceServer) SubmitMessage(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMessage not implemented")
}
func (UnimplementedConsensusServiceServer) GetTopicInfo(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicInfo not implemented")
}
func (UnimplementedConsensusServiceServer) mustEmbedUnimplementedConsensusServiceServer() {}

// UnsafeConsensusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusServiceServer will
// result in compilation errors.
type UnsafeConsensusServiceServer interface {
	mustEmbedUnimplementedConsensusServiceServer()
}

func RegisterConsensusServiceServer(s grpc.ServiceRegistrar, srv ConsensusServiceServer) {
	s.RegisterService(&ConsensusService_ServiceDesc, srv)
}

func _ConsensusService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConsensusService/createTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).CreateTopic(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_UpdateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).UpdateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConsensusService/updateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).UpdateTopic(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConsensusService/deleteTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).DeleteTopic(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_SubmitMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).SubmitMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConsensusService/submitMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).SubmitMessage(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_GetTopicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).GetTopicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConsensusService/getTopicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).GetTopicInfo(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsensusService_ServiceDesc is the grpc.ServiceDesc for ConsensusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsensusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ConsensusService",
	HandlerType: (*ConsensusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createTopic",
			Handler:    _ConsensusService_CreateTopic_Handler,
		},
		{
			MethodName: "updateTopic",
			Handler:    _ConsensusService_UpdateTopic_Handler,
		},
		{
			MethodName: "deleteTopic",
			Handler:    _ConsensusService_DeleteTopic_Handler,
		},
		{
			MethodName: "submitMessage",
			Handler:    _ConsensusService_SubmitMessage_Handler,
		},
		{
			MethodName: "getTopicInfo",
			Handler:    _ConsensusService_GetTopicInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consensus_service.proto",
}
