//*
// # Get NFT Info Query
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: token_get_nft_info.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Applicable only to tokens of type NON_FUNGIBLE_UNIQUE. Gets info on a NFT for a given TokenID (of
// type NON_FUNGIBLE_UNIQUE) and serial number
type TokenGetNftInfoQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Standard information sent with every query operation.<br/>
	// This includes the signed payment and what kind of response is requested
	// (cost, state proof, both, or neither).
	Header *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// A non-fungible/unique token (NFT) identifier.
	// <p>
	// This SHALL identify the NFT to query.<br/>
	// The identified NFT MUST exist, and MUST NOT be deleted.
	NftID         *NftID `protobuf:"bytes,2,opt,name=nftID,proto3" json:"nftID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenGetNftInfoQuery) Reset() {
	*x = TokenGetNftInfoQuery{}
	mi := &file_token_get_nft_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenGetNftInfoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenGetNftInfoQuery) ProtoMessage() {}

func (x *TokenGetNftInfoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_token_get_nft_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenGetNftInfoQuery.ProtoReflect.Descriptor instead.
func (*TokenGetNftInfoQuery) Descriptor() ([]byte, []int) {
	return file_token_get_nft_info_proto_rawDescGZIP(), []int{0}
}

func (x *TokenGetNftInfoQuery) GetHeader() *QueryHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TokenGetNftInfoQuery) GetNftID() *NftID {
	if x != nil {
		return x.NftID
	}
	return nil
}

// *
// Information for one non-fungible/unique token (NFT).
type TokenNftInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A non-fungible/unique token (NFT) identifier.
	// <p>
	// This SHALL match the NFT requested.<br/>
	NftID *NftID `protobuf:"bytes,1,opt,name=nftID,proto3" json:"nftID,omitempty"`
	// *
	// The current owner of the NFT
	AccountID *AccountID `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	// *
	// The effective consensus timestamp at which the NFT was minted
	CreationTime *Timestamp `protobuf:"bytes,3,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	// *
	// Represents the unique metadata of the NFT
	Metadata []byte `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// *
	// The ledger ID of the network that generated this response.
	// <p>
	// This value SHALL identify the distributed ledger that responded to
	// this query.
	LedgerId []byte `protobuf:"bytes,5,opt,name=ledger_id,json=ledgerId,proto3" json:"ledger_id,omitempty"`
	// *
	// If an allowance is granted for the NFT, its corresponding spender account
	SpenderId     *AccountID `protobuf:"bytes,6,opt,name=spender_id,json=spenderId,proto3" json:"spender_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenNftInfo) Reset() {
	*x = TokenNftInfo{}
	mi := &file_token_get_nft_info_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenNftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenNftInfo) ProtoMessage() {}

func (x *TokenNftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_token_get_nft_info_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenNftInfo.ProtoReflect.Descriptor instead.
func (*TokenNftInfo) Descriptor() ([]byte, []int) {
	return file_token_get_nft_info_proto_rawDescGZIP(), []int{1}
}

func (x *TokenNftInfo) GetNftID() *NftID {
	if x != nil {
		return x.NftID
	}
	return nil
}

func (x *TokenNftInfo) GetAccountID() *AccountID {
	if x != nil {
		return x.AccountID
	}
	return nil
}

func (x *TokenNftInfo) GetCreationTime() *Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *TokenNftInfo) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TokenNftInfo) GetLedgerId() []byte {
	if x != nil {
		return x.LedgerId
	}
	return nil
}

func (x *TokenNftInfo) GetSpenderId() *AccountID {
	if x != nil {
		return x.SpenderId
	}
	return nil
}

// *
// UNDOCUMENTED
type TokenGetNftInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The standard response information for queries.<br/>
	// This includes the values requested in the `QueryHeader`
	// (cost, state proof, both, or neither).
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// The information about this NFT
	Nft           *TokenNftInfo `protobuf:"bytes,2,opt,name=nft,proto3" json:"nft,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenGetNftInfoResponse) Reset() {
	*x = TokenGetNftInfoResponse{}
	mi := &file_token_get_nft_info_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenGetNftInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenGetNftInfoResponse) ProtoMessage() {}

func (x *TokenGetNftInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_token_get_nft_info_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenGetNftInfoResponse.ProtoReflect.Descriptor instead.
func (*TokenGetNftInfoResponse) Descriptor() ([]byte, []int) {
	return file_token_get_nft_info_proto_rawDescGZIP(), []int{2}
}

func (x *TokenGetNftInfoResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TokenGetNftInfoResponse) GetNft() *TokenNftInfo {
	if x != nil {
		return x.Nft
	}
	return nil
}

var File_token_get_nft_info_proto protoreflect.FileDescriptor

const file_token_get_nft_info_proto_rawDesc = "" +
	"\n" +
	"\x18token_get_nft_info.proto\x12\x05proto\x1a\x11basic_types.proto\x1a\x12query_header.proto\x1a\x15response_header.proto\x1a\x0ftimestamp.proto\"f\n" +
	"\x14TokenGetNftInfoQuery\x12*\n" +
	"\x06header\x18\x01 \x01(\v2\x12.proto.QueryHeaderR\x06header\x12\"\n" +
	"\x05nftID\x18\x02 \x01(\v2\f.proto.NftIDR\x05nftID\"\x82\x02\n" +
	"\fTokenNftInfo\x12\"\n" +
	"\x05nftID\x18\x01 \x01(\v2\f.proto.NftIDR\x05nftID\x12.\n" +
	"\taccountID\x18\x02 \x01(\v2\x10.proto.AccountIDR\taccountID\x124\n" +
	"\fcreationTime\x18\x03 \x01(\v2\x10.proto.TimestampR\fcreationTime\x12\x1a\n" +
	"\bmetadata\x18\x04 \x01(\fR\bmetadata\x12\x1b\n" +
	"\tledger_id\x18\x05 \x01(\fR\bledgerId\x12/\n" +
	"\n" +
	"spender_id\x18\x06 \x01(\v2\x10.proto.AccountIDR\tspenderId\"o\n" +
	"\x17TokenGetNftInfoResponse\x12-\n" +
	"\x06header\x18\x01 \x01(\v2\x15.proto.ResponseHeaderR\x06header\x12%\n" +
	"\x03nft\x18\x02 \x01(\v2\x13.proto.TokenNftInfoR\x03nftB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_token_get_nft_info_proto_rawDescOnce sync.Once
	file_token_get_nft_info_proto_rawDescData []byte
)

func file_token_get_nft_info_proto_rawDescGZIP() []byte {
	file_token_get_nft_info_proto_rawDescOnce.Do(func() {
		file_token_get_nft_info_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_token_get_nft_info_proto_rawDesc), len(file_token_get_nft_info_proto_rawDesc)))
	})
	return file_token_get_nft_info_proto_rawDescData
}

var file_token_get_nft_info_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_token_get_nft_info_proto_goTypes = []any{
	(*TokenGetNftInfoQuery)(nil),    // 0: proto.TokenGetNftInfoQuery
	(*TokenNftInfo)(nil),            // 1: proto.TokenNftInfo
	(*TokenGetNftInfoResponse)(nil), // 2: proto.TokenGetNftInfoResponse
	(*QueryHeader)(nil),             // 3: proto.QueryHeader
	(*NftID)(nil),                   // 4: proto.NftID
	(*AccountID)(nil),               // 5: proto.AccountID
	(*Timestamp)(nil),               // 6: proto.Timestamp
	(*ResponseHeader)(nil),          // 7: proto.ResponseHeader
}
var file_token_get_nft_info_proto_depIdxs = []int32{
	3, // 0: proto.TokenGetNftInfoQuery.header:type_name -> proto.QueryHeader
	4, // 1: proto.TokenGetNftInfoQuery.nftID:type_name -> proto.NftID
	4, // 2: proto.TokenNftInfo.nftID:type_name -> proto.NftID
	5, // 3: proto.TokenNftInfo.accountID:type_name -> proto.AccountID
	6, // 4: proto.TokenNftInfo.creationTime:type_name -> proto.Timestamp
	5, // 5: proto.TokenNftInfo.spender_id:type_name -> proto.AccountID
	7, // 6: proto.TokenGetNftInfoResponse.header:type_name -> proto.ResponseHeader
	1, // 7: proto.TokenGetNftInfoResponse.nft:type_name -> proto.TokenNftInfo
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_token_get_nft_info_proto_init() }
func file_token_get_nft_info_proto_init() {
	if File_token_get_nft_info_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_query_header_proto_init()
	file_response_header_proto_init()
	file_timestamp_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_token_get_nft_info_proto_rawDesc), len(file_token_get_nft_info_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_token_get_nft_info_proto_goTypes,
		DependencyIndexes: file_token_get_nft_info_proto_depIdxs,
		MessageInfos:      file_token_get_nft_info_proto_msgTypes,
	}.Build()
	File_token_get_nft_info_proto = out.File
	file_token_get_nft_info_proto_goTypes = nil
	file_token_get_nft_info_proto_depIdxs = nil
}
