//*
// # Exchange Rates
// Exchange rates that define ratios between HBAR and USD.
//
// Fees are denominated in USD, but paid in HBAR, so accurate exchange
// rates are important and the exchange rates kept in state are updated
// frequently.<br/>
// Exchange rates are also reported in every receipt for fee transparency.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: exchange_rate.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// An exchange rate as a ratio of USD cents per HBAR.
//
// This ratio SHALL be used to convert tinycent (`10<sup>-8</sup>` USD cent)
// to tinybar for fees and other purposes.<br/>
// When applying an `ExchangeRate`, implementations SHOULD ensure input values
// are `tinycent` and/or `tinybar` before applying the exchange ratio.<br/>
// Exchange results MAY be converted to USD or HBAR via division if whole
// unit values are required.
//
// The ratio described here SHALL be assigned such that a value in `tinybar`
// may be obtained with the following equation.
// ```
//
//	amountInTinybar = (amountInTinycent * hbarEquiv) / centEquiv
//
// ```
type ExchangeRate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Denominator for a ratio of USD cents per HBAR.
	HbarEquiv int32 `protobuf:"varint,1,opt,name=hbarEquiv,proto3" json:"hbarEquiv,omitempty"`
	// *
	// Numerator for a ratio of USD cents per HBAR.
	CentEquiv int32 `protobuf:"varint,2,opt,name=centEquiv,proto3" json:"centEquiv,omitempty"`
	// *
	// Expiration time stamp for this exchange rate.
	ExpirationTime *TimestampSeconds `protobuf:"bytes,3,opt,name=expirationTime,proto3" json:"expirationTime,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExchangeRate) Reset() {
	*x = ExchangeRate{}
	mi := &file_exchange_rate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRate) ProtoMessage() {}

func (x *ExchangeRate) ProtoReflect() protoreflect.Message {
	mi := &file_exchange_rate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRate.ProtoReflect.Descriptor instead.
func (*ExchangeRate) Descriptor() ([]byte, []int) {
	return file_exchange_rate_proto_rawDescGZIP(), []int{0}
}

func (x *ExchangeRate) GetHbarEquiv() int32 {
	if x != nil {
		return x.HbarEquiv
	}
	return 0
}

func (x *ExchangeRate) GetCentEquiv() int32 {
	if x != nil {
		return x.CentEquiv
	}
	return 0
}

func (x *ExchangeRate) GetExpirationTime() *TimestampSeconds {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

// *
// A set of two exchange rates.<br/>
// The exchange rate for the network is stored and reported as a set of
// two rates; current and next. This structure supports the network cleanly
// switching between exchange rates when necessary. This also provides clear
// notice to clients when the exchange rate will change and the exchange
// rate that will be applied for the next time period.
//
// The difference in rate between `currentRate` and `nextRate` MUST NOT exceed
// the configured maximum percentage change. This limit SHALL be a
// network configuration value.
type ExchangeRateSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A current exchange rate.
	// <p>
	// When present in a receipt, this SHALL be the exchange rate used to
	// compute the fees for that transaction.
	CurrentRate *ExchangeRate `protobuf:"bytes,1,opt,name=currentRate,proto3" json:"currentRate,omitempty"`
	// *
	// A future exchange rate.
	// <p>
	// This exchange rate SHALL be applied after the current exchange
	// rate expires.
	NextRate      *ExchangeRate `protobuf:"bytes,2,opt,name=nextRate,proto3" json:"nextRate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExchangeRateSet) Reset() {
	*x = ExchangeRateSet{}
	mi := &file_exchange_rate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeRateSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateSet) ProtoMessage() {}

func (x *ExchangeRateSet) ProtoReflect() protoreflect.Message {
	mi := &file_exchange_rate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRateSet.ProtoReflect.Descriptor instead.
func (*ExchangeRateSet) Descriptor() ([]byte, []int) {
	return file_exchange_rate_proto_rawDescGZIP(), []int{1}
}

func (x *ExchangeRateSet) GetCurrentRate() *ExchangeRate {
	if x != nil {
		return x.CurrentRate
	}
	return nil
}

func (x *ExchangeRateSet) GetNextRate() *ExchangeRate {
	if x != nil {
		return x.NextRate
	}
	return nil
}

var File_exchange_rate_proto protoreflect.FileDescriptor

const file_exchange_rate_proto_rawDesc = "" +
	"\n" +
	"\x13exchange_rate.proto\x12\x05proto\x1a\x0ftimestamp.proto\"\x8b\x01\n" +
	"\fExchangeRate\x12\x1c\n" +
	"\thbarEquiv\x18\x01 \x01(\x05R\thbarEquiv\x12\x1c\n" +
	"\tcentEquiv\x18\x02 \x01(\x05R\tcentEquiv\x12?\n" +
	"\x0eexpirationTime\x18\x03 \x01(\v2\x17.proto.TimestampSecondsR\x0eexpirationTime\"y\n" +
	"\x0fExchangeRateSet\x125\n" +
	"\vcurrentRate\x18\x01 \x01(\v2\x13.proto.ExchangeRateR\vcurrentRate\x12/\n" +
	"\bnextRate\x18\x02 \x01(\v2\x13.proto.ExchangeRateR\bnextRateB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_exchange_rate_proto_rawDescOnce sync.Once
	file_exchange_rate_proto_rawDescData []byte
)

func file_exchange_rate_proto_rawDescGZIP() []byte {
	file_exchange_rate_proto_rawDescOnce.Do(func() {
		file_exchange_rate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_exchange_rate_proto_rawDesc), len(file_exchange_rate_proto_rawDesc)))
	})
	return file_exchange_rate_proto_rawDescData
}

var file_exchange_rate_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_exchange_rate_proto_goTypes = []any{
	(*ExchangeRate)(nil),     // 0: proto.ExchangeRate
	(*ExchangeRateSet)(nil),  // 1: proto.ExchangeRateSet
	(*TimestampSeconds)(nil), // 2: proto.TimestampSeconds
}
var file_exchange_rate_proto_depIdxs = []int32{
	2, // 0: proto.ExchangeRate.expirationTime:type_name -> proto.TimestampSeconds
	0, // 1: proto.ExchangeRateSet.currentRate:type_name -> proto.ExchangeRate
	0, // 2: proto.ExchangeRateSet.nextRate:type_name -> proto.ExchangeRate
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_exchange_rate_proto_init() }
func file_exchange_rate_proto_init() {
	if File_exchange_rate_proto != nil {
		return
	}
	file_timestamp_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_exchange_rate_proto_rawDesc), len(file_exchange_rate_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_exchange_rate_proto_goTypes,
		DependencyIndexes: file_exchange_rate_proto_depIdxs,
		MessageInfos:      file_exchange_rate_proto_msgTypes,
	}.Build()
	File_exchange_rate_proto = out.File
	file_exchange_rate_proto_goTypes = nil
	file_exchange_rate_proto_depIdxs = nil
}
