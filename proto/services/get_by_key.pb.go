//*
// # Get By Key
// An obsolete query to obtain a list of entities that refer to
// a given Key object.<br/>
// Returned entities may be accounts, files, smart contracts, and/or
// live hash entries.
//
// > Important
// >> This query is obsolete and not supported.<br/>
// >> Any query of this type that is submitted SHALL fail with a `PRE_CHECK`
// >> result of `NOT_SUPPORTED`.
//
// > Implementation Note
// >> This query is not defined for any service, and while it is implemented
// >> in the "Network Admin" service, it may be unnecessary to do so.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: get_by_key.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Query all accounts, claims, files, and smart contract instances whose
// associated keys include the given Key.
//
// > This query is no longer supported.
//
// Deprecated: Marked as deprecated in get_by_key.proto.
type GetByKeyQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Standard information sent with every query operation.<br/>
	// This includes the signed payment and what kind of response is requested
	// (cost, state proof, both, or neither).
	Header *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// The key to search for. It MUST NOT contain a contractID nor
	// a ThresholdKey.
	Key           *Key `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetByKeyQuery) Reset() {
	*x = GetByKeyQuery{}
	mi := &file_get_by_key_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetByKeyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByKeyQuery) ProtoMessage() {}

func (x *GetByKeyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_get_by_key_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByKeyQuery.ProtoReflect.Descriptor instead.
func (*GetByKeyQuery) Descriptor() ([]byte, []int) {
	return file_get_by_key_proto_rawDescGZIP(), []int{0}
}

func (x *GetByKeyQuery) GetHeader() *QueryHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetByKeyQuery) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

// *
// The ID for a single entity (account, livehash, file, or smart contract)
//
// > The query that defines this message is no longer supported.
//
// Deprecated: Marked as deprecated in get_by_key.proto.
type EntityID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Entity:
	//
	//	*EntityID_AccountID
	//	*EntityID_LiveHash
	//	*EntityID_FileID
	//	*EntityID_ContractID
	Entity        isEntityID_Entity `protobuf_oneof:"entity"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityID) Reset() {
	*x = EntityID{}
	mi := &file_get_by_key_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityID) ProtoMessage() {}

func (x *EntityID) ProtoReflect() protoreflect.Message {
	mi := &file_get_by_key_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityID.ProtoReflect.Descriptor instead.
func (*EntityID) Descriptor() ([]byte, []int) {
	return file_get_by_key_proto_rawDescGZIP(), []int{1}
}

func (x *EntityID) GetEntity() isEntityID_Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *EntityID) GetAccountID() *AccountID {
	if x != nil {
		if x, ok := x.Entity.(*EntityID_AccountID); ok {
			return x.AccountID
		}
	}
	return nil
}

func (x *EntityID) GetLiveHash() *LiveHash {
	if x != nil {
		if x, ok := x.Entity.(*EntityID_LiveHash); ok {
			return x.LiveHash
		}
	}
	return nil
}

func (x *EntityID) GetFileID() *FileID {
	if x != nil {
		if x, ok := x.Entity.(*EntityID_FileID); ok {
			return x.FileID
		}
	}
	return nil
}

func (x *EntityID) GetContractID() *ContractID {
	if x != nil {
		if x, ok := x.Entity.(*EntityID_ContractID); ok {
			return x.ContractID
		}
	}
	return nil
}

type isEntityID_Entity interface {
	isEntityID_Entity()
}

type EntityID_AccountID struct {
	// *
	// The Account ID for the cryptocurrency account
	AccountID *AccountID `protobuf:"bytes,1,opt,name=accountID,proto3,oneof"`
}

type EntityID_LiveHash struct {
	// *
	// A uniquely identifying livehash of an account
	LiveHash *LiveHash `protobuf:"bytes,2,opt,name=liveHash,proto3,oneof"`
}

type EntityID_FileID struct {
	// *
	// The file ID of the file
	FileID *FileID `protobuf:"bytes,3,opt,name=fileID,proto3,oneof"`
}

type EntityID_ContractID struct {
	// *
	// The smart contract ID that identifies instance
	ContractID *ContractID `protobuf:"bytes,4,opt,name=contractID,proto3,oneof"`
}

func (*EntityID_AccountID) isEntityID_Entity() {}

func (*EntityID_LiveHash) isEntityID_Entity() {}

func (*EntityID_FileID) isEntityID_Entity() {}

func (*EntityID_ContractID) isEntityID_Entity() {}

// *
// Response when the client sends the node GetByKeyQuery
//
// > This query is no longer supported.
//
// Deprecated: Marked as deprecated in get_by_key.proto.
type GetByKeyResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The standard response information for queries.<br/>
	// This includes the values requested in the `QueryHeader`
	// (cost, state proof, both, or neither).
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// The list of entities that include this public key in their
	// associated Key list
	Entities      []*EntityID `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetByKeyResponse) Reset() {
	*x = GetByKeyResponse{}
	mi := &file_get_by_key_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetByKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByKeyResponse) ProtoMessage() {}

func (x *GetByKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_get_by_key_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByKeyResponse.ProtoReflect.Descriptor instead.
func (*GetByKeyResponse) Descriptor() ([]byte, []int) {
	return file_get_by_key_proto_rawDescGZIP(), []int{2}
}

func (x *GetByKeyResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetByKeyResponse) GetEntities() []*EntityID {
	if x != nil {
		return x.Entities
	}
	return nil
}

var File_get_by_key_proto protoreflect.FileDescriptor

const file_get_by_key_proto_rawDesc = "" +
	"\n" +
	"\x10get_by_key.proto\x12\x05proto\x1a\x11basic_types.proto\x1a\x12query_header.proto\x1a\x15response_header.proto\x1a\x1acrypto_add_live_hash.proto\"]\n" +
	"\rGetByKeyQuery\x12*\n" +
	"\x06header\x18\x01 \x01(\v2\x12.proto.QueryHeaderR\x06header\x12\x1c\n" +
	"\x03key\x18\x02 \x01(\v2\n" +
	".proto.KeyR\x03key:\x02\x18\x01\"\xd7\x01\n" +
	"\bEntityID\x120\n" +
	"\taccountID\x18\x01 \x01(\v2\x10.proto.AccountIDH\x00R\taccountID\x12-\n" +
	"\bliveHash\x18\x02 \x01(\v2\x0f.proto.LiveHashH\x00R\bliveHash\x12'\n" +
	"\x06fileID\x18\x03 \x01(\v2\r.proto.FileIDH\x00R\x06fileID\x123\n" +
	"\n" +
	"contractID\x18\x04 \x01(\v2\x11.proto.ContractIDH\x00R\n" +
	"contractID:\x02\x18\x01B\b\n" +
	"\x06entity\"r\n" +
	"\x10GetByKeyResponse\x12-\n" +
	"\x06header\x18\x01 \x01(\v2\x15.proto.ResponseHeaderR\x06header\x12+\n" +
	"\bentities\x18\x02 \x03(\v2\x0f.proto.EntityIDR\bentities:\x02\x18\x01B&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_get_by_key_proto_rawDescOnce sync.Once
	file_get_by_key_proto_rawDescData []byte
)

func file_get_by_key_proto_rawDescGZIP() []byte {
	file_get_by_key_proto_rawDescOnce.Do(func() {
		file_get_by_key_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_get_by_key_proto_rawDesc), len(file_get_by_key_proto_rawDesc)))
	})
	return file_get_by_key_proto_rawDescData
}

var file_get_by_key_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_get_by_key_proto_goTypes = []any{
	(*GetByKeyQuery)(nil),    // 0: proto.GetByKeyQuery
	(*EntityID)(nil),         // 1: proto.EntityID
	(*GetByKeyResponse)(nil), // 2: proto.GetByKeyResponse
	(*QueryHeader)(nil),      // 3: proto.QueryHeader
	(*Key)(nil),              // 4: proto.Key
	(*AccountID)(nil),        // 5: proto.AccountID
	(*LiveHash)(nil),         // 6: proto.LiveHash
	(*FileID)(nil),           // 7: proto.FileID
	(*ContractID)(nil),       // 8: proto.ContractID
	(*ResponseHeader)(nil),   // 9: proto.ResponseHeader
}
var file_get_by_key_proto_depIdxs = []int32{
	3, // 0: proto.GetByKeyQuery.header:type_name -> proto.QueryHeader
	4, // 1: proto.GetByKeyQuery.key:type_name -> proto.Key
	5, // 2: proto.EntityID.accountID:type_name -> proto.AccountID
	6, // 3: proto.EntityID.liveHash:type_name -> proto.LiveHash
	7, // 4: proto.EntityID.fileID:type_name -> proto.FileID
	8, // 5: proto.EntityID.contractID:type_name -> proto.ContractID
	9, // 6: proto.GetByKeyResponse.header:type_name -> proto.ResponseHeader
	1, // 7: proto.GetByKeyResponse.entities:type_name -> proto.EntityID
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_get_by_key_proto_init() }
func file_get_by_key_proto_init() {
	if File_get_by_key_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_query_header_proto_init()
	file_response_header_proto_init()
	file_crypto_add_live_hash_proto_init()
	file_get_by_key_proto_msgTypes[1].OneofWrappers = []any{
		(*EntityID_AccountID)(nil),
		(*EntityID_LiveHash)(nil),
		(*EntityID_FileID)(nil),
		(*EntityID_ContractID)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_get_by_key_proto_rawDesc), len(file_get_by_key_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_get_by_key_proto_goTypes,
		DependencyIndexes: file_get_by_key_proto_depIdxs,
		MessageInfos:      file_get_by_key_proto_msgTypes,
	}.Build()
	File_get_by_key_proto = out.File
	file_get_by_key_proto_goTypes = nil
	file_get_by_key_proto_depIdxs = nil
}
