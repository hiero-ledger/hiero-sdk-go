//*
// # Crypto Delete Allowance
// Delete one or more NFT allowances that permit transfer of tokens from
// an "owner" account by a different, "spender", account.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: crypto_delete_allowance.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Delete one or more allowances.<br/>
// Given one or more, previously approved, allowances for non-fungible/unique
// tokens to be transferred by a spending account from an owning account;
// this transaction removes a specified set of those allowances.
//
// The owner account for each listed allowance MUST sign this transaction.<br/>
// Allowances for HBAR cannot be removed with this transaction. The owner
// account MUST submit a new `cryptoApproveAllowance` transaction with the
// amount set to `0` to "remove" that allowance.<br/>
// Allowances for fungible/common tokens cannot be removed with this
// transaction. The owner account MUST submit a new `cryptoApproveAllowance`
// transaction with the amount set to `0` to "remove" that allowance.<br/>
//
// ### Block Stream Effects
// None
type CryptoDeleteAllowanceTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// List of non-fungible/unique token allowances to remove.
	// <p>
	// This list MUST NOT be empty.
	NftAllowances []*NftRemoveAllowance `protobuf:"bytes,2,rep,name=nftAllowances,proto3" json:"nftAllowances,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CryptoDeleteAllowanceTransactionBody) Reset() {
	*x = CryptoDeleteAllowanceTransactionBody{}
	mi := &file_crypto_delete_allowance_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptoDeleteAllowanceTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoDeleteAllowanceTransactionBody) ProtoMessage() {}

func (x *CryptoDeleteAllowanceTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_delete_allowance_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoDeleteAllowanceTransactionBody.ProtoReflect.Descriptor instead.
func (*CryptoDeleteAllowanceTransactionBody) Descriptor() ([]byte, []int) {
	return file_crypto_delete_allowance_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoDeleteAllowanceTransactionBody) GetNftAllowances() []*NftRemoveAllowance {
	if x != nil {
		return x.NftAllowances
	}
	return nil
}

// *
// A single allowance for one non-fungible/unique token.
// This is specific to removal, and the allowance is identified for that
// specific purpose.
//
// All fields in this message are REQUIRED.
// The `serial_numbers` list MUST NOT be empty.
// The combination of field values in this message MUST match existing
// allowances for one or more individual non-fungible/unique tokens.
//
// ### Removing an allowance that is `approve_for_all`
// To remove an allowance that has set the `approve_for_all` flag, the
// `owner` account must first _approve_ a **new** allowance for a specific
// serial number using a `cryptoApproveAllowance`, and then, if desired,
// that newly approved allowance to a specific serial number may be
// deleted in a separate `cryptoDeleteAllowance` transaction.
type NftRemoveAllowance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A token identifier.
	// <p>
	// This MUST be a valid token identifier for a non-fungible/unique
	// token type.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// *
	// An `owner` account identifier.
	// <p>
	// This account MUST sign the transaction containing this message.
	Owner *AccountID `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// *
	// The list of serial numbers to remove allowances from.
	// <p>
	// This list MUST NOT be empty.
	SerialNumbers []int64 `protobuf:"varint,3,rep,packed,name=serial_numbers,json=serialNumbers,proto3" json:"serial_numbers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NftRemoveAllowance) Reset() {
	*x = NftRemoveAllowance{}
	mi := &file_crypto_delete_allowance_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NftRemoveAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftRemoveAllowance) ProtoMessage() {}

func (x *NftRemoveAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_delete_allowance_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftRemoveAllowance.ProtoReflect.Descriptor instead.
func (*NftRemoveAllowance) Descriptor() ([]byte, []int) {
	return file_crypto_delete_allowance_proto_rawDescGZIP(), []int{1}
}

func (x *NftRemoveAllowance) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *NftRemoveAllowance) GetOwner() *AccountID {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *NftRemoveAllowance) GetSerialNumbers() []int64 {
	if x != nil {
		return x.SerialNumbers
	}
	return nil
}

var File_crypto_delete_allowance_proto protoreflect.FileDescriptor

const file_crypto_delete_allowance_proto_rawDesc = "" +
	"\n" +
	"\x1dcrypto_delete_allowance.proto\x12\x05proto\x1a\x11basic_types.proto\"g\n" +
	"$CryptoDeleteAllowanceTransactionBody\x12?\n" +
	"\rnftAllowances\x18\x02 \x03(\v2\x19.proto.NftRemoveAllowanceR\rnftAllowances\"\x8e\x01\n" +
	"\x12NftRemoveAllowance\x12)\n" +
	"\btoken_id\x18\x01 \x01(\v2\x0e.proto.TokenIDR\atokenId\x12&\n" +
	"\x05owner\x18\x02 \x01(\v2\x10.proto.AccountIDR\x05owner\x12%\n" +
	"\x0eserial_numbers\x18\x03 \x03(\x03R\rserialNumbersB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_crypto_delete_allowance_proto_rawDescOnce sync.Once
	file_crypto_delete_allowance_proto_rawDescData []byte
)

func file_crypto_delete_allowance_proto_rawDescGZIP() []byte {
	file_crypto_delete_allowance_proto_rawDescOnce.Do(func() {
		file_crypto_delete_allowance_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_crypto_delete_allowance_proto_rawDesc), len(file_crypto_delete_allowance_proto_rawDesc)))
	})
	return file_crypto_delete_allowance_proto_rawDescData
}

var file_crypto_delete_allowance_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_crypto_delete_allowance_proto_goTypes = []any{
	(*CryptoDeleteAllowanceTransactionBody)(nil), // 0: proto.CryptoDeleteAllowanceTransactionBody
	(*NftRemoveAllowance)(nil),                   // 1: proto.NftRemoveAllowance
	(*TokenID)(nil),                              // 2: proto.TokenID
	(*AccountID)(nil),                            // 3: proto.AccountID
}
var file_crypto_delete_allowance_proto_depIdxs = []int32{
	1, // 0: proto.CryptoDeleteAllowanceTransactionBody.nftAllowances:type_name -> proto.NftRemoveAllowance
	2, // 1: proto.NftRemoveAllowance.token_id:type_name -> proto.TokenID
	3, // 2: proto.NftRemoveAllowance.owner:type_name -> proto.AccountID
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_crypto_delete_allowance_proto_init() }
func file_crypto_delete_allowance_proto_init() {
	if File_crypto_delete_allowance_proto != nil {
		return
	}
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_crypto_delete_allowance_proto_rawDesc), len(file_crypto_delete_allowance_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_crypto_delete_allowance_proto_goTypes,
		DependencyIndexes: file_crypto_delete_allowance_proto_depIdxs,
		MessageInfos:      file_crypto_delete_allowance_proto_msgTypes,
	}.Build()
	File_crypto_delete_allowance_proto = out.File
	file_crypto_delete_allowance_proto_goTypes = nil
	file_crypto_delete_allowance_proto_depIdxs = nil
}
