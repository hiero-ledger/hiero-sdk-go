//*
// # Get Topic
// Query a topic in the Hedera Consensus Service (HCS).
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: consensus_get_topic_info.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Retrieve the latest state of a topic.
//
// This method is unrestricted and allowed on any topic by any payer
// account.<br/>
// A query for a deleted topic MAY succeed if the topic is within the
// "autorenew grace period".<br/>
// A query for a topic removed from state SHALL NOT succeed.
type ConsensusGetTopicInfoQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Standard information sent with every query operation.<br/>
	// This includes the signed payment and what kind of response is requested
	// (cost, state proof, both, or neither).
	Header *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// A topic ID.
	// <p>
	// The network SHALL return information for this topic, if successful.
	TopicID       *TopicID `protobuf:"bytes,2,opt,name=topicID,proto3" json:"topicID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsensusGetTopicInfoQuery) Reset() {
	*x = ConsensusGetTopicInfoQuery{}
	mi := &file_consensus_get_topic_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusGetTopicInfoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusGetTopicInfoQuery) ProtoMessage() {}

func (x *ConsensusGetTopicInfoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_get_topic_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusGetTopicInfoQuery.ProtoReflect.Descriptor instead.
func (*ConsensusGetTopicInfoQuery) Descriptor() ([]byte, []int) {
	return file_consensus_get_topic_info_proto_rawDescGZIP(), []int{0}
}

func (x *ConsensusGetTopicInfoQuery) GetHeader() *QueryHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ConsensusGetTopicInfoQuery) GetTopicID() *TopicID {
	if x != nil {
		return x.TopicID
	}
	return nil
}

// *
// Query response to describe the current state of a topic in the Hedera
// Consensus Service(HCS).
type ConsensusGetTopicInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The standard response information for queries.<br/>
	// This includes the values requested in the `QueryHeader`
	// (cost, state proof, both, or neither).
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// The ID of the topic requested in the query.
	TopicID *TopicID `protobuf:"bytes,2,opt,name=topicID,proto3" json:"topicID,omitempty"`
	// *
	// Information describing the current state of the topic.
	TopicInfo     *ConsensusTopicInfo `protobuf:"bytes,5,opt,name=topicInfo,proto3" json:"topicInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsensusGetTopicInfoResponse) Reset() {
	*x = ConsensusGetTopicInfoResponse{}
	mi := &file_consensus_get_topic_info_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusGetTopicInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusGetTopicInfoResponse) ProtoMessage() {}

func (x *ConsensusGetTopicInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_get_topic_info_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusGetTopicInfoResponse.ProtoReflect.Descriptor instead.
func (*ConsensusGetTopicInfoResponse) Descriptor() ([]byte, []int) {
	return file_consensus_get_topic_info_proto_rawDescGZIP(), []int{1}
}

func (x *ConsensusGetTopicInfoResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ConsensusGetTopicInfoResponse) GetTopicID() *TopicID {
	if x != nil {
		return x.TopicID
	}
	return nil
}

func (x *ConsensusGetTopicInfoResponse) GetTopicInfo() *ConsensusTopicInfo {
	if x != nil {
		return x.TopicInfo
	}
	return nil
}

var File_consensus_get_topic_info_proto protoreflect.FileDescriptor

const file_consensus_get_topic_info_proto_rawDesc = "" +
	"\n" +
	"\x1econsensus_get_topic_info.proto\x12\x05proto\x1a\x11basic_types.proto\x1a\x12query_header.proto\x1a\x15response_header.proto\x1a\x1aconsensus_topic_info.proto\"r\n" +
	"\x1aConsensusGetTopicInfoQuery\x12*\n" +
	"\x06header\x18\x01 \x01(\v2\x12.proto.QueryHeaderR\x06header\x12(\n" +
	"\atopicID\x18\x02 \x01(\v2\x0e.proto.TopicIDR\atopicID\"\xb1\x01\n" +
	"\x1dConsensusGetTopicInfoResponse\x12-\n" +
	"\x06header\x18\x01 \x01(\v2\x15.proto.ResponseHeaderR\x06header\x12(\n" +
	"\atopicID\x18\x02 \x01(\v2\x0e.proto.TopicIDR\atopicID\x127\n" +
	"\ttopicInfo\x18\x05 \x01(\v2\x19.proto.ConsensusTopicInfoR\ttopicInfoB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_consensus_get_topic_info_proto_rawDescOnce sync.Once
	file_consensus_get_topic_info_proto_rawDescData []byte
)

func file_consensus_get_topic_info_proto_rawDescGZIP() []byte {
	file_consensus_get_topic_info_proto_rawDescOnce.Do(func() {
		file_consensus_get_topic_info_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_consensus_get_topic_info_proto_rawDesc), len(file_consensus_get_topic_info_proto_rawDesc)))
	})
	return file_consensus_get_topic_info_proto_rawDescData
}

var file_consensus_get_topic_info_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_consensus_get_topic_info_proto_goTypes = []any{
	(*ConsensusGetTopicInfoQuery)(nil),    // 0: proto.ConsensusGetTopicInfoQuery
	(*ConsensusGetTopicInfoResponse)(nil), // 1: proto.ConsensusGetTopicInfoResponse
	(*QueryHeader)(nil),                   // 2: proto.QueryHeader
	(*TopicID)(nil),                       // 3: proto.TopicID
	(*ResponseHeader)(nil),                // 4: proto.ResponseHeader
	(*ConsensusTopicInfo)(nil),            // 5: proto.ConsensusTopicInfo
}
var file_consensus_get_topic_info_proto_depIdxs = []int32{
	2, // 0: proto.ConsensusGetTopicInfoQuery.header:type_name -> proto.QueryHeader
	3, // 1: proto.ConsensusGetTopicInfoQuery.topicID:type_name -> proto.TopicID
	4, // 2: proto.ConsensusGetTopicInfoResponse.header:type_name -> proto.ResponseHeader
	3, // 3: proto.ConsensusGetTopicInfoResponse.topicID:type_name -> proto.TopicID
	5, // 4: proto.ConsensusGetTopicInfoResponse.topicInfo:type_name -> proto.ConsensusTopicInfo
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_consensus_get_topic_info_proto_init() }
func file_consensus_get_topic_info_proto_init() {
	if File_consensus_get_topic_info_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_query_header_proto_init()
	file_response_header_proto_init()
	file_consensus_topic_info_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_consensus_get_topic_info_proto_rawDesc), len(file_consensus_get_topic_info_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_consensus_get_topic_info_proto_goTypes,
		DependencyIndexes: file_consensus_get_topic_info_proto_depIdxs,
		MessageInfos:      file_consensus_get_topic_info_proto_msgTypes,
	}.Build()
	File_consensus_get_topic_info_proto = out.File
	file_consensus_get_topic_info_proto_goTypes = nil
	file_consensus_get_topic_info_proto_depIdxs = nil
}
