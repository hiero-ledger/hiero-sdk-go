//*
// # Utility Service
// This service provides a transaction to generate a deterministic
// pseudo-random value, either a 32-bit integer within a requested range
// or a 384-bit byte array.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: util_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UtilService_Prng_FullMethodName = "/proto.UtilService/prng"
)

// UtilServiceClient is the client API for UtilService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// The Utility Service provides a pseudo-random number generator.
//
// The single gRPC call defined for this service simply reports a single
// pseudo-random number in the transaction record. That value may either
// be a 32-bit integer within a requested range, or a 384-bit byte array.
//
// ### Block Stream Effects
// The requested value is reported exclusively in a `UtilPrngOutput` message.
type UtilServiceClient interface {
	// *
	// Generate a pseudo-random value.
	// <p>
	// The request body MUST be a
	// [UtilPrngTransactionBody](#proto.UtilPrngTransactionBody)
	Prng(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type utilServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilServiceClient(cc grpc.ClientConnInterface) UtilServiceClient {
	return &utilServiceClient{cc}
}

func (c *utilServiceClient) Prng(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, UtilService_Prng_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilServiceServer is the server API for UtilService service.
// All implementations must embed UnimplementedUtilServiceServer
// for forward compatibility.
//
// *
// The Utility Service provides a pseudo-random number generator.
//
// The single gRPC call defined for this service simply reports a single
// pseudo-random number in the transaction record. That value may either
// be a 32-bit integer within a requested range, or a 384-bit byte array.
//
// ### Block Stream Effects
// The requested value is reported exclusively in a `UtilPrngOutput` message.
type UtilServiceServer interface {
	// *
	// Generate a pseudo-random value.
	// <p>
	// The request body MUST be a
	// [UtilPrngTransactionBody](#proto.UtilPrngTransactionBody)
	Prng(context.Context, *Transaction) (*TransactionResponse, error)
	mustEmbedUnimplementedUtilServiceServer()
}

// UnimplementedUtilServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUtilServiceServer struct{}

func (UnimplementedUtilServiceServer) Prng(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prng not implemented")
}
func (UnimplementedUtilServiceServer) mustEmbedUnimplementedUtilServiceServer() {}
func (UnimplementedUtilServiceServer) testEmbeddedByValue()                     {}

// UnsafeUtilServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilServiceServer will
// result in compilation errors.
type UnsafeUtilServiceServer interface {
	mustEmbedUnimplementedUtilServiceServer()
}

func RegisterUtilServiceServer(s grpc.ServiceRegistrar, srv UtilServiceServer) {
	// If the following call pancis, it indicates UnimplementedUtilServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UtilService_ServiceDesc, srv)
}

func _UtilService_Prng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilServiceServer).Prng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilService_Prng_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilServiceServer).Prng(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

// UtilService_ServiceDesc is the grpc.ServiceDesc for UtilService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UtilService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UtilService",
	HandlerType: (*UtilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "prng",
			Handler:    _UtilService_Prng_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "util_service.proto",
}
