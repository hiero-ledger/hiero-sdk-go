//*
// # Query
// This is the parent message for all queries, and this message is
// serialized and signed, with the signature included in the QueryHeader.
//
// All of the entries in the `query` `oneof` are fully specified elsewhere;
// we only include a short summary here.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: query.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A query transaction.<br/>
// This message is serialized to bytes and those bytes are signed by the
// submitter, with the signature included in the QueryHeader for the query
// request.
type Query struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Query:
	//
	//	*Query_GetByKey
	//	*Query_GetBySolidityID
	//	*Query_ContractCallLocal
	//	*Query_ContractGetInfo
	//	*Query_ContractGetBytecode
	//	*Query_ContractGetRecords
	//	*Query_CryptogetAccountBalance
	//	*Query_CryptoGetAccountRecords
	//	*Query_CryptoGetInfo
	//	*Query_CryptoGetLiveHash
	//	*Query_CryptoGetProxyStakers
	//	*Query_FileGetContents
	//	*Query_FileGetInfo
	//	*Query_TransactionGetReceipt
	//	*Query_TransactionGetRecord
	//	*Query_TransactionGetFastRecord
	//	*Query_ConsensusGetTopicInfo
	//	*Query_NetworkGetVersionInfo
	//	*Query_TokenGetInfo
	//	*Query_ScheduleGetInfo
	//	*Query_TokenGetAccountNftInfos
	//	*Query_TokenGetNftInfo
	//	*Query_TokenGetNftInfos
	//	*Query_NetworkGetExecutionTime
	//	*Query_AccountDetails
	Query         isQuery_Query `protobuf_oneof:"query"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_query_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{0}
}

func (x *Query) GetQuery() isQuery_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *Query) GetGetByKey() *GetByKeyQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_GetByKey); ok {
			return x.GetByKey
		}
	}
	return nil
}

func (x *Query) GetGetBySolidityID() *GetBySolidityIDQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_GetBySolidityID); ok {
			return x.GetBySolidityID
		}
	}
	return nil
}

func (x *Query) GetContractCallLocal() *ContractCallLocalQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_ContractCallLocal); ok {
			return x.ContractCallLocal
		}
	}
	return nil
}

func (x *Query) GetContractGetInfo() *ContractGetInfoQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_ContractGetInfo); ok {
			return x.ContractGetInfo
		}
	}
	return nil
}

func (x *Query) GetContractGetBytecode() *ContractGetBytecodeQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_ContractGetBytecode); ok {
			return x.ContractGetBytecode
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in query.proto.
func (x *Query) GetContractGetRecords() *ContractGetRecordsQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_ContractGetRecords); ok {
			return x.ContractGetRecords
		}
	}
	return nil
}

func (x *Query) GetCryptogetAccountBalance() *CryptoGetAccountBalanceQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_CryptogetAccountBalance); ok {
			return x.CryptogetAccountBalance
		}
	}
	return nil
}

func (x *Query) GetCryptoGetAccountRecords() *CryptoGetAccountRecordsQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_CryptoGetAccountRecords); ok {
			return x.CryptoGetAccountRecords
		}
	}
	return nil
}

func (x *Query) GetCryptoGetInfo() *CryptoGetInfoQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_CryptoGetInfo); ok {
			return x.CryptoGetInfo
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in query.proto.
func (x *Query) GetCryptoGetLiveHash() *CryptoGetLiveHashQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_CryptoGetLiveHash); ok {
			return x.CryptoGetLiveHash
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in query.proto.
func (x *Query) GetCryptoGetProxyStakers() *CryptoGetStakersQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_CryptoGetProxyStakers); ok {
			return x.CryptoGetProxyStakers
		}
	}
	return nil
}

func (x *Query) GetFileGetContents() *FileGetContentsQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_FileGetContents); ok {
			return x.FileGetContents
		}
	}
	return nil
}

func (x *Query) GetFileGetInfo() *FileGetInfoQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_FileGetInfo); ok {
			return x.FileGetInfo
		}
	}
	return nil
}

func (x *Query) GetTransactionGetReceipt() *TransactionGetReceiptQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_TransactionGetReceipt); ok {
			return x.TransactionGetReceipt
		}
	}
	return nil
}

func (x *Query) GetTransactionGetRecord() *TransactionGetRecordQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_TransactionGetRecord); ok {
			return x.TransactionGetRecord
		}
	}
	return nil
}

func (x *Query) GetTransactionGetFastRecord() *TransactionGetFastRecordQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_TransactionGetFastRecord); ok {
			return x.TransactionGetFastRecord
		}
	}
	return nil
}

func (x *Query) GetConsensusGetTopicInfo() *ConsensusGetTopicInfoQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_ConsensusGetTopicInfo); ok {
			return x.ConsensusGetTopicInfo
		}
	}
	return nil
}

func (x *Query) GetNetworkGetVersionInfo() *NetworkGetVersionInfoQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_NetworkGetVersionInfo); ok {
			return x.NetworkGetVersionInfo
		}
	}
	return nil
}

func (x *Query) GetTokenGetInfo() *TokenGetInfoQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_TokenGetInfo); ok {
			return x.TokenGetInfo
		}
	}
	return nil
}

func (x *Query) GetScheduleGetInfo() *ScheduleGetInfoQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_ScheduleGetInfo); ok {
			return x.ScheduleGetInfo
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in query.proto.
func (x *Query) GetTokenGetAccountNftInfos() *TokenGetAccountNftInfosQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_TokenGetAccountNftInfos); ok {
			return x.TokenGetAccountNftInfos
		}
	}
	return nil
}

func (x *Query) GetTokenGetNftInfo() *TokenGetNftInfoQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_TokenGetNftInfo); ok {
			return x.TokenGetNftInfo
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in query.proto.
func (x *Query) GetTokenGetNftInfos() *TokenGetNftInfosQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_TokenGetNftInfos); ok {
			return x.TokenGetNftInfos
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in query.proto.
func (x *Query) GetNetworkGetExecutionTime() *NetworkGetExecutionTimeQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_NetworkGetExecutionTime); ok {
			return x.NetworkGetExecutionTime
		}
	}
	return nil
}

func (x *Query) GetAccountDetails() *GetAccountDetailsQuery {
	if x != nil {
		if x, ok := x.Query.(*Query_AccountDetails); ok {
			return x.AccountDetails
		}
	}
	return nil
}

type isQuery_Query interface {
	isQuery_Query()
}

type Query_GetByKey struct {
	// *
	// Get all entities associated with a given key.
	GetByKey *GetByKeyQuery `protobuf:"bytes,1,opt,name=getByKey,proto3,oneof"`
}

type Query_GetBySolidityID struct {
	// *
	// Get an Hedera identifier associated with an identifier in EVM
	// "Solidity" form.<br/>
	// Most often used in smart contracts to find an Hedera account,
	// file, or contract identifier to pass to a system contract or
	// precompile.
	GetBySolidityID *GetBySolidityIDQuery `protobuf:"bytes,2,opt,name=getBySolidityID,proto3,oneof"`
}

type Query_ContractCallLocal struct {
	// *
	// Call a function of a smart contract.<br/>
	// This call is executed exclusively on the node to which it is
	// submitted, and is much less expensive than a `contractCall`
	// transaction.
	ContractCallLocal *ContractCallLocalQuery `protobuf:"bytes,3,opt,name=contractCallLocal,proto3,oneof"`
}

type Query_ContractGetInfo struct {
	// *
	// Get information about a smart contract.
	ContractGetInfo *ContractGetInfoQuery `protobuf:"bytes,4,opt,name=contractGetInfo,proto3,oneof"`
}

type Query_ContractGetBytecode struct {
	// *
	// Get runtime bytecode used by a smart contract.
	ContractGetBytecode *ContractGetBytecodeQuery `protobuf:"bytes,5,opt,name=contractGetBytecode,proto3,oneof"`
}

type Query_ContractGetRecords struct {
	// *
	// This query is unsupported and SHALL fail.<br/>
	// Requests for this information MUST be directed to a mirror node.
	// <p>
	// Get Records of a smart contract.
	//
	// Deprecated: Marked as deprecated in query.proto.
	ContractGetRecords *ContractGetRecordsQuery `protobuf:"bytes,6,opt,name=ContractGetRecords,proto3,oneof"`
}

type Query_CryptogetAccountBalance struct {
	// *
	// Get the current HBAR balance of an Hedera account or smart contract.
	CryptogetAccountBalance *CryptoGetAccountBalanceQuery `protobuf:"bytes,7,opt,name=cryptogetAccountBalance,proto3,oneof"`
}

type Query_CryptoGetAccountRecords struct {
	// *
	// Get records of all "recent" transactions for which a specified
	// account is the effective payer.
	CryptoGetAccountRecords *CryptoGetAccountRecordsQuery `protobuf:"bytes,8,opt,name=cryptoGetAccountRecords,proto3,oneof"`
}

type Query_CryptoGetInfo struct {
	// *
	// Get information about an account, including the balance.<br/>
	// This does not get the list of account records.
	CryptoGetInfo *CryptoGetInfoQuery `protobuf:"bytes,9,opt,name=cryptoGetInfo,proto3,oneof"`
}

type Query_CryptoGetLiveHash struct {
	// *
	// This query is unsupported and SHALL fail.<br/>
	// Requests for this information MUST be directed to a mirror node.
	// <p>
	// Get a single livehash from a single account, if present.
	//
	// Deprecated: Marked as deprecated in query.proto.
	CryptoGetLiveHash *CryptoGetLiveHashQuery `protobuf:"bytes,10,opt,name=cryptoGetLiveHash,proto3,oneof"`
}

type Query_CryptoGetProxyStakers struct {
	// *
	// This query is unsupported and SHALL fail.<br/>
	// Requests for this information MUST be directed to a mirror node.
	// <p>
	// Get all the accounts that are proxy staking to this account.
	//
	// Deprecated: Marked as deprecated in query.proto.
	CryptoGetProxyStakers *CryptoGetStakersQuery `protobuf:"bytes,11,opt,name=cryptoGetProxyStakers,proto3,oneof"`
}

type Query_FileGetContents struct {
	// *
	// Get the content of a file.
	FileGetContents *FileGetContentsQuery `protobuf:"bytes,12,opt,name=fileGetContents,proto3,oneof"`
}

type Query_FileGetInfo struct {
	// *
	// Get metadata for a file.
	FileGetInfo *FileGetInfoQuery `protobuf:"bytes,13,opt,name=fileGetInfo,proto3,oneof"`
}

type Query_TransactionGetReceipt struct {
	// *
	// Get a receipt for a transaction.<br/>
	// This only returns a receipt if the transaction is "recent", which
	// is typically within the previous 180 seconds (3 minutes).
	TransactionGetReceipt *TransactionGetReceiptQuery `protobuf:"bytes,14,opt,name=transactionGetReceipt,proto3,oneof"`
}

type Query_TransactionGetRecord struct {
	// *
	// Get a record for a transaction.
	// This only returns a record if the transaction is "available", which
	// is typically within the previous 1 hour.
	TransactionGetRecord *TransactionGetRecordQuery `protobuf:"bytes,15,opt,name=transactionGetRecord,proto3,oneof"`
}

type Query_TransactionGetFastRecord struct {
	// *
	// Get a record for a transaction.
	// This only returns a record if the transaction is "recent", which
	// is typically within the previous 180 seconds (3 minutes).
	TransactionGetFastRecord *TransactionGetFastRecordQuery `protobuf:"bytes,16,opt,name=transactionGetFastRecord,proto3,oneof"`
}

type Query_ConsensusGetTopicInfo struct {
	// *
	// Get metadata for a consensus topic.
	ConsensusGetTopicInfo *ConsensusGetTopicInfoQuery `protobuf:"bytes,50,opt,name=consensusGetTopicInfo,proto3,oneof"`
}

type Query_NetworkGetVersionInfo struct {
	// *
	// Get the versions of Hedera Services and the HAPI API deployed on
	// the responding consensus node.
	NetworkGetVersionInfo *NetworkGetVersionInfoQuery `protobuf:"bytes,51,opt,name=networkGetVersionInfo,proto3,oneof"`
}

type Query_TokenGetInfo struct {
	// *
	// Get metadata for a token.
	TokenGetInfo *TokenGetInfoQuery `protobuf:"bytes,52,opt,name=tokenGetInfo,proto3,oneof"`
}

type Query_ScheduleGetInfo struct {
	// *
	// Get metadata for a schedule.<br/>
	// A schedule is a request to execute a transaction at a future
	// time.
	ScheduleGetInfo *ScheduleGetInfoQuery `protobuf:"bytes,53,opt,name=scheduleGetInfo,proto3,oneof"`
}

type Query_TokenGetAccountNftInfos struct {
	// *
	// This query is unsupported and SHALL fail.<br/>
	// Requests for this information MUST be directed to a mirror node.
	// <p>
	// Get a list of non-fungible/unique tokens associated with an account.
	//
	// Deprecated: Marked as deprecated in query.proto.
	TokenGetAccountNftInfos *TokenGetAccountNftInfosQuery `protobuf:"bytes,54,opt,name=tokenGetAccountNftInfos,proto3,oneof"`
}

type Query_TokenGetNftInfo struct {
	// *
	// Get metadata for a specific, serial numbered, non-fungible/unique
	// token (NFT).
	TokenGetNftInfo *TokenGetNftInfoQuery `protobuf:"bytes,55,opt,name=tokenGetNftInfo,proto3,oneof"`
}

type Query_TokenGetNftInfos struct {
	// *
	// This query is unsupported and SHALL fail.<br/>
	// Requests for this information MUST be directed to a mirror node.
	// <p>
	// Get metadata for all non-fungible/unique tokens (NFTs) of a single
	// type within a range of indices (0-based count of minted tokens).
	//
	// Deprecated: Marked as deprecated in query.proto.
	TokenGetNftInfos *TokenGetNftInfosQuery `protobuf:"bytes,56,opt,name=tokenGetNftInfos,proto3,oneof"`
}

type Query_NetworkGetExecutionTime struct {
	// *
	// This query is unsupported and SHALL fail.<br/>
	// Requests for this information MUST be directed to a mirror node.
	// <p>
	// Get the execution time for a recent transaction.
	//
	// Deprecated: Marked as deprecated in query.proto.
	NetworkGetExecutionTime *NetworkGetExecutionTimeQuery `protobuf:"bytes,57,opt,name=networkGetExecutionTime,proto3,oneof"`
}

type Query_AccountDetails struct {
	// *
	// Get detail metadata for an account.
	AccountDetails *GetAccountDetailsQuery `protobuf:"bytes,58,opt,name=accountDetails,proto3,oneof"`
}

func (*Query_GetByKey) isQuery_Query() {}

func (*Query_GetBySolidityID) isQuery_Query() {}

func (*Query_ContractCallLocal) isQuery_Query() {}

func (*Query_ContractGetInfo) isQuery_Query() {}

func (*Query_ContractGetBytecode) isQuery_Query() {}

func (*Query_ContractGetRecords) isQuery_Query() {}

func (*Query_CryptogetAccountBalance) isQuery_Query() {}

func (*Query_CryptoGetAccountRecords) isQuery_Query() {}

func (*Query_CryptoGetInfo) isQuery_Query() {}

func (*Query_CryptoGetLiveHash) isQuery_Query() {}

func (*Query_CryptoGetProxyStakers) isQuery_Query() {}

func (*Query_FileGetContents) isQuery_Query() {}

func (*Query_FileGetInfo) isQuery_Query() {}

func (*Query_TransactionGetReceipt) isQuery_Query() {}

func (*Query_TransactionGetRecord) isQuery_Query() {}

func (*Query_TransactionGetFastRecord) isQuery_Query() {}

func (*Query_ConsensusGetTopicInfo) isQuery_Query() {}

func (*Query_NetworkGetVersionInfo) isQuery_Query() {}

func (*Query_TokenGetInfo) isQuery_Query() {}

func (*Query_ScheduleGetInfo) isQuery_Query() {}

func (*Query_TokenGetAccountNftInfos) isQuery_Query() {}

func (*Query_TokenGetNftInfo) isQuery_Query() {}

func (*Query_TokenGetNftInfos) isQuery_Query() {}

func (*Query_NetworkGetExecutionTime) isQuery_Query() {}

func (*Query_AccountDetails) isQuery_Query() {}

var File_query_proto protoreflect.FileDescriptor

const file_query_proto_rawDesc = "" +
	"\n" +
	"\vquery.proto\x12\x05proto\x1a\x10get_by_key.proto\x1a\x18get_by_solidity_id.proto\x1a\x19contract_call_local.proto\x1a\x17contract_get_info.proto\x1a\x1bcontract_get_bytecode.proto\x1a\x1acontract_get_records.proto\x1a crypto_get_account_balance.proto\x1a crypto_get_account_records.proto\x1a\x15crypto_get_info.proto\x1a\x1acrypto_get_live_hash.proto\x1a\x18crypto_get_stakers.proto\x1a\x17file_get_contents.proto\x1a\x13file_get_info.proto\x1a\x1dtransaction_get_receipt.proto\x1a\x1ctransaction_get_record.proto\x1a!transaction_get_fast_record.proto\x1a\x1econsensus_get_topic_info.proto\x1a\x1enetwork_get_version_info.proto\x1a network_get_execution_time.proto\x1a\x14token_get_info.proto\x1a\x17schedule_get_info.proto\x1a!token_get_account_nft_infos.proto\x1a\x18token_get_nft_info.proto\x1a\x19token_get_nft_infos.proto\x1a\x19get_account_details.proto\"\x8a\x10\n" +
	"\x05Query\x122\n" +
	"\bgetByKey\x18\x01 \x01(\v2\x14.proto.GetByKeyQueryH\x00R\bgetByKey\x12G\n" +
	"\x0fgetBySolidityID\x18\x02 \x01(\v2\x1b.proto.GetBySolidityIDQueryH\x00R\x0fgetBySolidityID\x12M\n" +
	"\x11contractCallLocal\x18\x03 \x01(\v2\x1d.proto.ContractCallLocalQueryH\x00R\x11contractCallLocal\x12G\n" +
	"\x0fcontractGetInfo\x18\x04 \x01(\v2\x1b.proto.ContractGetInfoQueryH\x00R\x0fcontractGetInfo\x12S\n" +
	"\x13contractGetBytecode\x18\x05 \x01(\v2\x1f.proto.ContractGetBytecodeQueryH\x00R\x13contractGetBytecode\x12T\n" +
	"\x12ContractGetRecords\x18\x06 \x01(\v2\x1e.proto.ContractGetRecordsQueryB\x02\x18\x01H\x00R\x12ContractGetRecords\x12_\n" +
	"\x17cryptogetAccountBalance\x18\a \x01(\v2#.proto.CryptoGetAccountBalanceQueryH\x00R\x17cryptogetAccountBalance\x12_\n" +
	"\x17cryptoGetAccountRecords\x18\b \x01(\v2#.proto.CryptoGetAccountRecordsQueryH\x00R\x17cryptoGetAccountRecords\x12A\n" +
	"\rcryptoGetInfo\x18\t \x01(\v2\x19.proto.CryptoGetInfoQueryH\x00R\rcryptoGetInfo\x12Q\n" +
	"\x11cryptoGetLiveHash\x18\n" +
	" \x01(\v2\x1d.proto.CryptoGetLiveHashQueryB\x02\x18\x01H\x00R\x11cryptoGetLiveHash\x12X\n" +
	"\x15cryptoGetProxyStakers\x18\v \x01(\v2\x1c.proto.CryptoGetStakersQueryB\x02\x18\x01H\x00R\x15cryptoGetProxyStakers\x12G\n" +
	"\x0ffileGetContents\x18\f \x01(\v2\x1b.proto.FileGetContentsQueryH\x00R\x0ffileGetContents\x12;\n" +
	"\vfileGetInfo\x18\r \x01(\v2\x17.proto.FileGetInfoQueryH\x00R\vfileGetInfo\x12Y\n" +
	"\x15transactionGetReceipt\x18\x0e \x01(\v2!.proto.TransactionGetReceiptQueryH\x00R\x15transactionGetReceipt\x12V\n" +
	"\x14transactionGetRecord\x18\x0f \x01(\v2 .proto.TransactionGetRecordQueryH\x00R\x14transactionGetRecord\x12b\n" +
	"\x18transactionGetFastRecord\x18\x10 \x01(\v2$.proto.TransactionGetFastRecordQueryH\x00R\x18transactionGetFastRecord\x12Y\n" +
	"\x15consensusGetTopicInfo\x182 \x01(\v2!.proto.ConsensusGetTopicInfoQueryH\x00R\x15consensusGetTopicInfo\x12Y\n" +
	"\x15networkGetVersionInfo\x183 \x01(\v2!.proto.NetworkGetVersionInfoQueryH\x00R\x15networkGetVersionInfo\x12>\n" +
	"\ftokenGetInfo\x184 \x01(\v2\x18.proto.TokenGetInfoQueryH\x00R\ftokenGetInfo\x12G\n" +
	"\x0fscheduleGetInfo\x185 \x01(\v2\x1b.proto.ScheduleGetInfoQueryH\x00R\x0fscheduleGetInfo\x12c\n" +
	"\x17tokenGetAccountNftInfos\x186 \x01(\v2#.proto.TokenGetAccountNftInfosQueryB\x02\x18\x01H\x00R\x17tokenGetAccountNftInfos\x12G\n" +
	"\x0ftokenGetNftInfo\x187 \x01(\v2\x1b.proto.TokenGetNftInfoQueryH\x00R\x0ftokenGetNftInfo\x12N\n" +
	"\x10tokenGetNftInfos\x188 \x01(\v2\x1c.proto.TokenGetNftInfosQueryB\x02\x18\x01H\x00R\x10tokenGetNftInfos\x12c\n" +
	"\x17networkGetExecutionTime\x189 \x01(\v2#.proto.NetworkGetExecutionTimeQueryB\x02\x18\x01H\x00R\x17networkGetExecutionTime\x12G\n" +
	"\x0eaccountDetails\x18: \x01(\v2\x1d.proto.GetAccountDetailsQueryH\x00R\x0eaccountDetailsB\a\n" +
	"\x05queryB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_query_proto_rawDescOnce sync.Once
	file_query_proto_rawDescData []byte
)

func file_query_proto_rawDescGZIP() []byte {
	file_query_proto_rawDescOnce.Do(func() {
		file_query_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_query_proto_rawDesc), len(file_query_proto_rawDesc)))
	})
	return file_query_proto_rawDescData
}

var file_query_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_query_proto_goTypes = []any{
	(*Query)(nil),                         // 0: proto.Query
	(*GetByKeyQuery)(nil),                 // 1: proto.GetByKeyQuery
	(*GetBySolidityIDQuery)(nil),          // 2: proto.GetBySolidityIDQuery
	(*ContractCallLocalQuery)(nil),        // 3: proto.ContractCallLocalQuery
	(*ContractGetInfoQuery)(nil),          // 4: proto.ContractGetInfoQuery
	(*ContractGetBytecodeQuery)(nil),      // 5: proto.ContractGetBytecodeQuery
	(*ContractGetRecordsQuery)(nil),       // 6: proto.ContractGetRecordsQuery
	(*CryptoGetAccountBalanceQuery)(nil),  // 7: proto.CryptoGetAccountBalanceQuery
	(*CryptoGetAccountRecordsQuery)(nil),  // 8: proto.CryptoGetAccountRecordsQuery
	(*CryptoGetInfoQuery)(nil),            // 9: proto.CryptoGetInfoQuery
	(*CryptoGetLiveHashQuery)(nil),        // 10: proto.CryptoGetLiveHashQuery
	(*CryptoGetStakersQuery)(nil),         // 11: proto.CryptoGetStakersQuery
	(*FileGetContentsQuery)(nil),          // 12: proto.FileGetContentsQuery
	(*FileGetInfoQuery)(nil),              // 13: proto.FileGetInfoQuery
	(*TransactionGetReceiptQuery)(nil),    // 14: proto.TransactionGetReceiptQuery
	(*TransactionGetRecordQuery)(nil),     // 15: proto.TransactionGetRecordQuery
	(*TransactionGetFastRecordQuery)(nil), // 16: proto.TransactionGetFastRecordQuery
	(*ConsensusGetTopicInfoQuery)(nil),    // 17: proto.ConsensusGetTopicInfoQuery
	(*NetworkGetVersionInfoQuery)(nil),    // 18: proto.NetworkGetVersionInfoQuery
	(*TokenGetInfoQuery)(nil),             // 19: proto.TokenGetInfoQuery
	(*ScheduleGetInfoQuery)(nil),          // 20: proto.ScheduleGetInfoQuery
	(*TokenGetAccountNftInfosQuery)(nil),  // 21: proto.TokenGetAccountNftInfosQuery
	(*TokenGetNftInfoQuery)(nil),          // 22: proto.TokenGetNftInfoQuery
	(*TokenGetNftInfosQuery)(nil),         // 23: proto.TokenGetNftInfosQuery
	(*NetworkGetExecutionTimeQuery)(nil),  // 24: proto.NetworkGetExecutionTimeQuery
	(*GetAccountDetailsQuery)(nil),        // 25: proto.GetAccountDetailsQuery
}
var file_query_proto_depIdxs = []int32{
	1,  // 0: proto.Query.getByKey:type_name -> proto.GetByKeyQuery
	2,  // 1: proto.Query.getBySolidityID:type_name -> proto.GetBySolidityIDQuery
	3,  // 2: proto.Query.contractCallLocal:type_name -> proto.ContractCallLocalQuery
	4,  // 3: proto.Query.contractGetInfo:type_name -> proto.ContractGetInfoQuery
	5,  // 4: proto.Query.contractGetBytecode:type_name -> proto.ContractGetBytecodeQuery
	6,  // 5: proto.Query.ContractGetRecords:type_name -> proto.ContractGetRecordsQuery
	7,  // 6: proto.Query.cryptogetAccountBalance:type_name -> proto.CryptoGetAccountBalanceQuery
	8,  // 7: proto.Query.cryptoGetAccountRecords:type_name -> proto.CryptoGetAccountRecordsQuery
	9,  // 8: proto.Query.cryptoGetInfo:type_name -> proto.CryptoGetInfoQuery
	10, // 9: proto.Query.cryptoGetLiveHash:type_name -> proto.CryptoGetLiveHashQuery
	11, // 10: proto.Query.cryptoGetProxyStakers:type_name -> proto.CryptoGetStakersQuery
	12, // 11: proto.Query.fileGetContents:type_name -> proto.FileGetContentsQuery
	13, // 12: proto.Query.fileGetInfo:type_name -> proto.FileGetInfoQuery
	14, // 13: proto.Query.transactionGetReceipt:type_name -> proto.TransactionGetReceiptQuery
	15, // 14: proto.Query.transactionGetRecord:type_name -> proto.TransactionGetRecordQuery
	16, // 15: proto.Query.transactionGetFastRecord:type_name -> proto.TransactionGetFastRecordQuery
	17, // 16: proto.Query.consensusGetTopicInfo:type_name -> proto.ConsensusGetTopicInfoQuery
	18, // 17: proto.Query.networkGetVersionInfo:type_name -> proto.NetworkGetVersionInfoQuery
	19, // 18: proto.Query.tokenGetInfo:type_name -> proto.TokenGetInfoQuery
	20, // 19: proto.Query.scheduleGetInfo:type_name -> proto.ScheduleGetInfoQuery
	21, // 20: proto.Query.tokenGetAccountNftInfos:type_name -> proto.TokenGetAccountNftInfosQuery
	22, // 21: proto.Query.tokenGetNftInfo:type_name -> proto.TokenGetNftInfoQuery
	23, // 22: proto.Query.tokenGetNftInfos:type_name -> proto.TokenGetNftInfosQuery
	24, // 23: proto.Query.networkGetExecutionTime:type_name -> proto.NetworkGetExecutionTimeQuery
	25, // 24: proto.Query.accountDetails:type_name -> proto.GetAccountDetailsQuery
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_query_proto_init() }
func file_query_proto_init() {
	if File_query_proto != nil {
		return
	}
	file_get_by_key_proto_init()
	file_get_by_solidity_id_proto_init()
	file_contract_call_local_proto_init()
	file_contract_get_info_proto_init()
	file_contract_get_bytecode_proto_init()
	file_contract_get_records_proto_init()
	file_crypto_get_account_balance_proto_init()
	file_crypto_get_account_records_proto_init()
	file_crypto_get_info_proto_init()
	file_crypto_get_live_hash_proto_init()
	file_crypto_get_stakers_proto_init()
	file_file_get_contents_proto_init()
	file_file_get_info_proto_init()
	file_transaction_get_receipt_proto_init()
	file_transaction_get_record_proto_init()
	file_transaction_get_fast_record_proto_init()
	file_consensus_get_topic_info_proto_init()
	file_network_get_version_info_proto_init()
	file_network_get_execution_time_proto_init()
	file_token_get_info_proto_init()
	file_schedule_get_info_proto_init()
	file_token_get_account_nft_infos_proto_init()
	file_token_get_nft_info_proto_init()
	file_token_get_nft_infos_proto_init()
	file_get_account_details_proto_init()
	file_query_proto_msgTypes[0].OneofWrappers = []any{
		(*Query_GetByKey)(nil),
		(*Query_GetBySolidityID)(nil),
		(*Query_ContractCallLocal)(nil),
		(*Query_ContractGetInfo)(nil),
		(*Query_ContractGetBytecode)(nil),
		(*Query_ContractGetRecords)(nil),
		(*Query_CryptogetAccountBalance)(nil),
		(*Query_CryptoGetAccountRecords)(nil),
		(*Query_CryptoGetInfo)(nil),
		(*Query_CryptoGetLiveHash)(nil),
		(*Query_CryptoGetProxyStakers)(nil),
		(*Query_FileGetContents)(nil),
		(*Query_FileGetInfo)(nil),
		(*Query_TransactionGetReceipt)(nil),
		(*Query_TransactionGetRecord)(nil),
		(*Query_TransactionGetFastRecord)(nil),
		(*Query_ConsensusGetTopicInfo)(nil),
		(*Query_NetworkGetVersionInfo)(nil),
		(*Query_TokenGetInfo)(nil),
		(*Query_ScheduleGetInfo)(nil),
		(*Query_TokenGetAccountNftInfos)(nil),
		(*Query_TokenGetNftInfo)(nil),
		(*Query_TokenGetNftInfos)(nil),
		(*Query_NetworkGetExecutionTime)(nil),
		(*Query_AccountDetails)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_query_proto_rawDesc), len(file_query_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_query_proto_goTypes,
		DependencyIndexes: file_query_proto_depIdxs,
		MessageInfos:      file_query_proto_msgTypes,
	}.Build()
	File_query_proto = out.File
	file_query_proto_goTypes = nil
	file_query_proto_depIdxs = nil
}
