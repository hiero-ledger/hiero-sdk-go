//*
// # Update Topic
// Update a topic for the Hedera Consensus Service (HCS).
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: consensus_update_topic.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Update the fields of an existing HCS topic.
//
// The topicID field is REQUIRED. All other fields are OPTIONAL.<br/>
// Fields set on this transaction SHALL be updated.<br/>
// Fields _not_ set on this transaction SHALL NOT be updated.
//
// ### Block Stream Effects
// None
type ConsensusUpdateTopicTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The topic ID specifying the topic to update.
	// <p>
	// A topic with this ID MUST exist and MUST NOT be deleted.<br/>
	// This value is REQUIRED.
	TopicID *TopicID `protobuf:"bytes,1,opt,name=topicID,proto3" json:"topicID,omitempty"`
	// *
	// An updated memo to be associated with this topic.
	// <p>
	// If this value is set, the current `adminKey` for the topic MUST sign
	// this transaction.<br/>
	// This value, if set, SHALL be encoded UTF-8 and SHALL NOT exceed
	// 100 bytes when so encoded.
	Memo *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// An updated expiration time for this topic, in seconds since the epoch.
	// <p>
	// For this purpose, `epoch` SHALL be the UNIX epoch
	// with 0 at `1970-01-01T00:00:00.000Z`.<br/>
	// The expirationTime MUST NOT be greater than the sum of
	// `MAX_AUTORENEW_PERIOD` and the actual consensus timestamp of
	// this transaction.<br/>
	// If `adminKey` is <b>unset</b> for the _topic_, this transaction MUST NOT
	// modify any other field.
	ExpirationTime *Timestamp `protobuf:"bytes,4,opt,name=expirationTime,proto3" json:"expirationTime,omitempty"`
	// *
	// Updated access control for modification of the topic.
	// <p>
	// If this field is set, that key and the previously set key MUST both
	// sign this transaction.<br/>
	// If this value is an empty `KeyList`, the prior key MUST sign this
	// transaction, and the topic SHALL be immutable after this transaction
	// completes, except for expiration and renewal.
	AdminKey *Key `protobuf:"bytes,6,opt,name=adminKey,proto3" json:"adminKey,omitempty"`
	// *
	// Updated access control for message submission to the topic.
	// <p>
	// If this value is set, the current `adminKey` for the topic MUST sign
	// this transaction.<br/>
	// If this value is set to an empty `KeyList`, the `submitKey` for the
	// topic will be unset after this transaction completes. When the
	// `submitKey` is unset, any account may submit a message on the topic,
	// without restriction.
	SubmitKey *Key `protobuf:"bytes,7,opt,name=submitKey,proto3" json:"submitKey,omitempty"`
	// An updated value for the number of seconds by which the topic expiration
	// will be automatically extended upon expiration, if it has a valid
	// auto-renew account.
	// <p>
	// If this value is set, the current `adminKey` for the topic MUST sign
	// this transaction.<br/>
	// This value, if set, MUST be greater than the
	// configured MIN_AUTORENEW_PERIOD.<br/>
	// This value, if set, MUST be less than the
	// configured MAX_AUTORENEW_PERIOD.
	AutoRenewPeriod *Duration `protobuf:"bytes,8,opt,name=autoRenewPeriod,proto3" json:"autoRenewPeriod,omitempty"`
	// *
	// An updated ID for the account to be charged renewal fees at the topic's
	// `expirationTime` to extend the lifetime of the topic.
	// <p>
	// If this value is set and not the "sentinel account", the referenced
	// account MUST sign this transaction.<br/>
	// If this value is set, the current `adminKey` for the topic MUST sign
	// this transaction.<br/>
	// If this value is set to the "sentinel account", which is `0.0.0`, the
	// `autoRenewAccount` SHALL be removed from the topic.
	AutoRenewAccount *AccountID `protobuf:"bytes,9,opt,name=autoRenewAccount,proto3" json:"autoRenewAccount,omitempty"`
	// *
	// Access control for update/delete of custom fees.
	// <p>
	// If set, subsequent consensus_update_topic transactions signed with this
	// key MAY update or delete the custom fees for this topic.<br/>
	// If this field is set, the admin key MUST sign this transaction.<br/>
	// If this field is set, the previous value SHALL be replaced.<br/>
	// If set to a 'Key' containing an empty 'KeyList', the previous value
	// SHALL be cleared.<br/>
	// If not set, the current key SHALL NOT change.<br/>
	// If unset in state, this field MUST NOT be set in this transaction.<br/>
	// If not set when the topic is created, this field CANNOT be set via
	// update.<br/>
	FeeScheduleKey *Key `protobuf:"bytes,10,opt,name=fee_schedule_key,json=feeScheduleKey,proto3" json:"fee_schedule_key,omitempty"`
	// *
	// A set of keys<br/>
	// Keys in this list are permitted to submit messages to this topic without
	// paying custom fees associated with this topic.
	// <p>
	// If a submit transaction is signed by _any_ key included in this set,
	// custom fees SHALL NOT be charged for that transaction.<br/>
	// If this field is not set, the current set of keys SHALL NOT change.<br/>
	// If this field is set, but contains an empty list, any existing fee-exempt
	// keys SHALL be removed.<br/>
	// A `fee_exempt_key_list` MUST NOT contain more than
	// `MAX_ENTRIES_FOR_FEE_EXEMPT_KEY_LIST` keys.<br/>
	// A `fee_exempt_key_list` MUST NOT contain any duplicate keys.<br/>
	// A `fee_exempt_key_list` MAY contain keys for accounts that are inactive,
	// deleted, or non-existent.
	FeeExemptKeyList *FeeExemptKeyList `protobuf:"bytes,11,opt,name=fee_exempt_key_list,json=feeExemptKeyList,proto3" json:"fee_exempt_key_list,omitempty"`
	// *
	// A set of custom fee definitions.<br/>
	// These are fees to be assessed for each submit to this topic.
	// <p>
	// Each fee defined in this set SHALL be evaluated for
	// each message submitted to this topic, and the resultant
	// total assessed fees SHALL be charged.<br/>
	// Custom fees defined here SHALL be assessed in addition to the base
	// network and node fees.<br/>
	// If this field is not set, the current set of custom fees
	// SHALL NOT change.<br/>
	// If this field is set, but contains an empty list, all current custom fees
	// SHALL be removed.
	// custom_fees list SHALL NOT contain more than
	// `MAX_CUSTOM_FEE_ENTRIES_FOR_TOPICS` entries.
	CustomFees *FixedCustomFeeList `protobuf:"bytes,12,opt,name=custom_fees,json=customFees,proto3" json:"custom_fees,omitempty"`
}

func (x *ConsensusUpdateTopicTransactionBody) Reset() {
	*x = ConsensusUpdateTopicTransactionBody{}
	mi := &file_consensus_update_topic_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusUpdateTopicTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusUpdateTopicTransactionBody) ProtoMessage() {}

func (x *ConsensusUpdateTopicTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_update_topic_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusUpdateTopicTransactionBody.ProtoReflect.Descriptor instead.
func (*ConsensusUpdateTopicTransactionBody) Descriptor() ([]byte, []int) {
	return file_consensus_update_topic_proto_rawDescGZIP(), []int{0}
}

func (x *ConsensusUpdateTopicTransactionBody) GetTopicID() *TopicID {
	if x != nil {
		return x.TopicID
	}
	return nil
}

func (x *ConsensusUpdateTopicTransactionBody) GetMemo() *wrapperspb.StringValue {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *ConsensusUpdateTopicTransactionBody) GetExpirationTime() *Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

func (x *ConsensusUpdateTopicTransactionBody) GetAdminKey() *Key {
	if x != nil {
		return x.AdminKey
	}
	return nil
}

func (x *ConsensusUpdateTopicTransactionBody) GetSubmitKey() *Key {
	if x != nil {
		return x.SubmitKey
	}
	return nil
}

func (x *ConsensusUpdateTopicTransactionBody) GetAutoRenewPeriod() *Duration {
	if x != nil {
		return x.AutoRenewPeriod
	}
	return nil
}

func (x *ConsensusUpdateTopicTransactionBody) GetAutoRenewAccount() *AccountID {
	if x != nil {
		return x.AutoRenewAccount
	}
	return nil
}

func (x *ConsensusUpdateTopicTransactionBody) GetFeeScheduleKey() *Key {
	if x != nil {
		return x.FeeScheduleKey
	}
	return nil
}

func (x *ConsensusUpdateTopicTransactionBody) GetFeeExemptKeyList() *FeeExemptKeyList {
	if x != nil {
		return x.FeeExemptKeyList
	}
	return nil
}

func (x *ConsensusUpdateTopicTransactionBody) GetCustomFees() *FixedCustomFeeList {
	if x != nil {
		return x.CustomFees
	}
	return nil
}

var File_consensus_update_topic_proto protoreflect.FileDescriptor

var file_consensus_update_topic_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x04, 0x0a,
	0x23, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x12, 0x30,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x38, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0f,
	0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x66, 0x65, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x13, 0x66,
	0x65, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x65, 0x65, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x10, 0x66, 0x65, 0x65, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x73, 0x42,
	0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73,
	0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consensus_update_topic_proto_rawDescOnce sync.Once
	file_consensus_update_topic_proto_rawDescData = file_consensus_update_topic_proto_rawDesc
)

func file_consensus_update_topic_proto_rawDescGZIP() []byte {
	file_consensus_update_topic_proto_rawDescOnce.Do(func() {
		file_consensus_update_topic_proto_rawDescData = protoimpl.X.CompressGZIP(file_consensus_update_topic_proto_rawDescData)
	})
	return file_consensus_update_topic_proto_rawDescData
}

var file_consensus_update_topic_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_consensus_update_topic_proto_goTypes = []any{
	(*ConsensusUpdateTopicTransactionBody)(nil), // 0: proto.ConsensusUpdateTopicTransactionBody
	(*TopicID)(nil),                // 1: proto.TopicID
	(*wrapperspb.StringValue)(nil), // 2: google.protobuf.StringValue
	(*Timestamp)(nil),              // 3: proto.Timestamp
	(*Key)(nil),                    // 4: proto.Key
	(*Duration)(nil),               // 5: proto.Duration
	(*AccountID)(nil),              // 6: proto.AccountID
	(*FeeExemptKeyList)(nil),       // 7: proto.FeeExemptKeyList
	(*FixedCustomFeeList)(nil),     // 8: proto.FixedCustomFeeList
}
var file_consensus_update_topic_proto_depIdxs = []int32{
	1,  // 0: proto.ConsensusUpdateTopicTransactionBody.topicID:type_name -> proto.TopicID
	2,  // 1: proto.ConsensusUpdateTopicTransactionBody.memo:type_name -> google.protobuf.StringValue
	3,  // 2: proto.ConsensusUpdateTopicTransactionBody.expirationTime:type_name -> proto.Timestamp
	4,  // 3: proto.ConsensusUpdateTopicTransactionBody.adminKey:type_name -> proto.Key
	4,  // 4: proto.ConsensusUpdateTopicTransactionBody.submitKey:type_name -> proto.Key
	5,  // 5: proto.ConsensusUpdateTopicTransactionBody.autoRenewPeriod:type_name -> proto.Duration
	6,  // 6: proto.ConsensusUpdateTopicTransactionBody.autoRenewAccount:type_name -> proto.AccountID
	4,  // 7: proto.ConsensusUpdateTopicTransactionBody.fee_schedule_key:type_name -> proto.Key
	7,  // 8: proto.ConsensusUpdateTopicTransactionBody.fee_exempt_key_list:type_name -> proto.FeeExemptKeyList
	8,  // 9: proto.ConsensusUpdateTopicTransactionBody.custom_fees:type_name -> proto.FixedCustomFeeList
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_consensus_update_topic_proto_init() }
func file_consensus_update_topic_proto_init() {
	if File_consensus_update_topic_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_custom_fees_proto_init()
	file_duration_proto_init()
	file_timestamp_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consensus_update_topic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_consensus_update_topic_proto_goTypes,
		DependencyIndexes: file_consensus_update_topic_proto_depIdxs,
		MessageInfos:      file_consensus_update_topic_proto_msgTypes,
	}.Build()
	File_consensus_update_topic_proto = out.File
	file_consensus_update_topic_proto_rawDesc = nil
	file_consensus_update_topic_proto_goTypes = nil
	file_consensus_update_topic_proto_depIdxs = nil
}
