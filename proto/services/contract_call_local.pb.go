//*
// # Local Contract Call
// A Contract Call executed directly on the current node
// (that is, without consensus).
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: contract_call_local.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Call a view function of a given smart contract<br/>
// The call must provide function parameter inputs as needed.<br/>
// This is potentially useful for calling view functions that will not revert
// when executed in a static EVM context. Many such use cases will be better
// served by using a Mirror Node API, however.
//
// This is performed locally on the particular node that the client is
// communicating with. Executing the call locally is faster and less costly,
// but imposes certain restrictions.<br/>
// The call MUST NOT change the state of the contract instance. This also
// precludes any expenditure or transfer of HBAR or other tokens.<br/>
// The call SHALL NOT have a separate consensus timestamp.<br/>
// The call SHALL NOT generate a record nor a receipt.<br/>
// The response SHALL contain the output returned by the function call.<br/>
// Any contract call that would use the `STATICCALL` opcode MAY be called via
// contract call local with performance and cost benefits.
//
// Unlike a ContractCall transaction, the node SHALL always consume the
// _entire_ amount of offered "gas" in determining the fee for this query, so
// accurate gas estimation is important.
type ContractCallLocalQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Standard information sent with every query operation.<br/>
	// This includes the signed payment and what kind of response is requested
	// (cost, state proof, both, or neither).
	// <p>
	// The payment MUST be sufficient for the base fees _and_ the full amount
	// in the `gas` field.
	Header *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// The ID of a smart contract to call.
	ContractID *ContractID `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`
	// *
	// The amount of "gas" to use for this call.
	// <p>
	// This transaction SHALL consume all of the gas offered and charge the
	// corresponding fee according to the current exchange rate between
	// HBAR and "gas".
	Gas int64 `protobuf:"varint,3,opt,name=gas,proto3" json:"gas,omitempty"`
	// *
	// The smart contract function to call, and the parameters to pass to that
	// function.
	// <p>
	// These SHALL be presented in EVM bytecode function call format.
	FunctionParameters []byte `protobuf:"bytes,4,opt,name=functionParameters,proto3" json:"functionParameters,omitempty"`
	// *
	// Do not use this field; it is ignored in the current software.
	// <p>
	// The maximum number of bytes that the result might include.<br/>
	// The call will fail if it would have returned more than this number
	// of bytes.
	//
	// Deprecated: Marked as deprecated in contract_call_local.proto.
	MaxResultSize int64 `protobuf:"varint,5,opt,name=maxResultSize,proto3" json:"maxResultSize,omitempty"`
	// *
	// The account that is the "sender" for this contract call.
	// <p>
	// If this is not set it SHALL be interpreted as the accountId from the
	// associated transactionId.<br/>
	// If this is set then either the associated transaction or the foreign
	// transaction data MUST be signed by the referenced account.
	SenderId *AccountID `protobuf:"bytes,6,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
}

func (x *ContractCallLocalQuery) Reset() {
	*x = ContractCallLocalQuery{}
	mi := &file_contract_call_local_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractCallLocalQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCallLocalQuery) ProtoMessage() {}

func (x *ContractCallLocalQuery) ProtoReflect() protoreflect.Message {
	mi := &file_contract_call_local_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCallLocalQuery.ProtoReflect.Descriptor instead.
func (*ContractCallLocalQuery) Descriptor() ([]byte, []int) {
	return file_contract_call_local_proto_rawDescGZIP(), []int{0}
}

func (x *ContractCallLocalQuery) GetHeader() *QueryHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ContractCallLocalQuery) GetContractID() *ContractID {
	if x != nil {
		return x.ContractID
	}
	return nil
}

func (x *ContractCallLocalQuery) GetGas() int64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *ContractCallLocalQuery) GetFunctionParameters() []byte {
	if x != nil {
		return x.FunctionParameters
	}
	return nil
}

// Deprecated: Marked as deprecated in contract_call_local.proto.
func (x *ContractCallLocalQuery) GetMaxResultSize() int64 {
	if x != nil {
		return x.MaxResultSize
	}
	return 0
}

func (x *ContractCallLocalQuery) GetSenderId() *AccountID {
	if x != nil {
		return x.SenderId
	}
	return nil
}

// *
// The response returned by a `ContractCallLocalQuery` transaction.
type ContractCallLocalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The standard response information for queries.<br/>
	// This includes the values requested in the `QueryHeader`
	// (cost, state proof, both, or neither).
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// The result(s) returned by the function call, if successful.
	// <p>
	// If the call failed this value SHALL be unset.
	FunctionResult *ContractFunctionResult `protobuf:"bytes,2,opt,name=functionResult,proto3" json:"functionResult,omitempty"`
}

func (x *ContractCallLocalResponse) Reset() {
	*x = ContractCallLocalResponse{}
	mi := &file_contract_call_local_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractCallLocalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCallLocalResponse) ProtoMessage() {}

func (x *ContractCallLocalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contract_call_local_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCallLocalResponse.ProtoReflect.Descriptor instead.
func (*ContractCallLocalResponse) Descriptor() ([]byte, []int) {
	return file_contract_call_local_proto_rawDescGZIP(), []int{1}
}

func (x *ContractCallLocalResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ContractCallLocalResponse) GetFunctionResult() *ContractFunctionResult {
	if x != nil {
		return x.FunctionResult
	}
	return nil
}

var File_contract_call_local_proto protoreflect.FileDescriptor

var file_contract_call_local_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67,
	0x61, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x09,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73,
	0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contract_call_local_proto_rawDescOnce sync.Once
	file_contract_call_local_proto_rawDescData = file_contract_call_local_proto_rawDesc
)

func file_contract_call_local_proto_rawDescGZIP() []byte {
	file_contract_call_local_proto_rawDescOnce.Do(func() {
		file_contract_call_local_proto_rawDescData = protoimpl.X.CompressGZIP(file_contract_call_local_proto_rawDescData)
	})
	return file_contract_call_local_proto_rawDescData
}

var file_contract_call_local_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_contract_call_local_proto_goTypes = []any{
	(*ContractCallLocalQuery)(nil),    // 0: proto.ContractCallLocalQuery
	(*ContractCallLocalResponse)(nil), // 1: proto.ContractCallLocalResponse
	(*QueryHeader)(nil),               // 2: proto.QueryHeader
	(*ContractID)(nil),                // 3: proto.ContractID
	(*AccountID)(nil),                 // 4: proto.AccountID
	(*ResponseHeader)(nil),            // 5: proto.ResponseHeader
	(*ContractFunctionResult)(nil),    // 6: proto.ContractFunctionResult
}
var file_contract_call_local_proto_depIdxs = []int32{
	2, // 0: proto.ContractCallLocalQuery.header:type_name -> proto.QueryHeader
	3, // 1: proto.ContractCallLocalQuery.contractID:type_name -> proto.ContractID
	4, // 2: proto.ContractCallLocalQuery.sender_id:type_name -> proto.AccountID
	5, // 3: proto.ContractCallLocalResponse.header:type_name -> proto.ResponseHeader
	6, // 4: proto.ContractCallLocalResponse.functionResult:type_name -> proto.ContractFunctionResult
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_contract_call_local_proto_init() }
func file_contract_call_local_proto_init() {
	if File_contract_call_local_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_contract_types_proto_init()
	file_query_header_proto_init()
	file_response_header_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contract_call_local_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contract_call_local_proto_goTypes,
		DependencyIndexes: file_contract_call_local_proto_depIdxs,
		MessageInfos:      file_contract_call_local_proto_msgTypes,
	}.Build()
	File_contract_call_local_proto = out.File
	file_contract_call_local_proto_rawDesc = nil
	file_contract_call_local_proto_goTypes = nil
	file_contract_call_local_proto_depIdxs = nil
}
