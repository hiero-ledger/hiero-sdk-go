//*
// # Contract Message Types
// Message types used in contract transactions.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: contract_types.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Context of an internal call in an EVM transaction that is not otherwise externalized.<br/>
// This message does not say anything about whether an EVM transaction is itself a logical
// transaction in a Hiero transactional unit. It simply provides context on an internal
// message call within an EVM transaction.
type InternalCallContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The gas available for the call.<br/>
	Gas uint64 `protobuf:"varint,1,opt,name=gas,proto3" json:"gas,omitempty"`
	// *
	// The value sent with the call.<br/>
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// *
	// The call data for the call.<br/>
	CallData      []byte `protobuf:"bytes,3,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InternalCallContext) Reset() {
	*x = InternalCallContext{}
	mi := &file_contract_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InternalCallContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalCallContext) ProtoMessage() {}

func (x *InternalCallContext) ProtoReflect() protoreflect.Message {
	mi := &file_contract_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalCallContext.ProtoReflect.Descriptor instead.
func (*InternalCallContext) Descriptor() ([]byte, []int) {
	return file_contract_types_proto_rawDescGZIP(), []int{0}
}

func (x *InternalCallContext) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *InternalCallContext) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *InternalCallContext) GetCallData() []byte {
	if x != nil {
		return x.CallData
	}
	return nil
}

// *
// Results of executing a EVM transaction.<br/>
type EvmTransactionResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The Hedera id of the caller.<br/>
	SenderId *AccountID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// *
	// The Hedera id of the contract receiving the call.<br/>
	ContractId *ContractID `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	// *
	// Result data from the function call.
	ResultData []byte `protobuf:"bytes,3,opt,name=result_data,json=resultData,proto3" json:"result_data,omitempty"`
	// *
	// Any error message produced by the contract call. Max size of 100 bytes.
	// <p>
	// This SHALL be unset if the contract call succeeded.
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// *
	// EVM gas used.
	GasUsed uint64 `protobuf:"varint,5,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// *
	// If not already externalized in a transaction body, the context of the
	// internal call producing this result.
	InternalCallContext *InternalCallContext `protobuf:"bytes,6,opt,name=internal_call_context,json=internalCallContext,proto3" json:"internal_call_context,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EvmTransactionResult) Reset() {
	*x = EvmTransactionResult{}
	mi := &file_contract_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvmTransactionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvmTransactionResult) ProtoMessage() {}

func (x *EvmTransactionResult) ProtoReflect() protoreflect.Message {
	mi := &file_contract_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvmTransactionResult.ProtoReflect.Descriptor instead.
func (*EvmTransactionResult) Descriptor() ([]byte, []int) {
	return file_contract_types_proto_rawDescGZIP(), []int{1}
}

func (x *EvmTransactionResult) GetSenderId() *AccountID {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *EvmTransactionResult) GetContractId() *ContractID {
	if x != nil {
		return x.ContractId
	}
	return nil
}

func (x *EvmTransactionResult) GetResultData() []byte {
	if x != nil {
		return x.ResultData
	}
	return nil
}

func (x *EvmTransactionResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *EvmTransactionResult) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EvmTransactionResult) GetInternalCallContext() *InternalCallContext {
	if x != nil {
		return x.InternalCallContext
	}
	return nil
}

// *
// A contract "nonce" reference.<br/>
// This connects a contract and its "nonce" value, and is primarily for use in
// query responses.  A "nonce" is short for "nonsense" and is usually a value
// with no particular meaning.
//
// The nonce of a contract SHALL be incremented when that contract creates
// another contract.
type ContractNonceInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A contract identifier.<br/>
	// This refers to the contract that holds this nonce value.
	ContractId *ContractID `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	// *
	// A "nonce" value.
	// The current value of the nonce associated with the identified contract.
	Nonce         int64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractNonceInfo) Reset() {
	*x = ContractNonceInfo{}
	mi := &file_contract_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractNonceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractNonceInfo) ProtoMessage() {}

func (x *ContractNonceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_contract_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractNonceInfo.ProtoReflect.Descriptor instead.
func (*ContractNonceInfo) Descriptor() ([]byte, []int) {
	return file_contract_types_proto_rawDescGZIP(), []int{2}
}

func (x *ContractNonceInfo) GetContractId() *ContractID {
	if x != nil {
		return x.ContractId
	}
	return nil
}

func (x *ContractNonceInfo) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// *
// EVM log data for a contract call.<br/>
// The EVM log information produced by a smart contract function call.
//
// Each contract function call MAY return zero or more log events.
type ContractLoginfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A contract identifier.<br/>
	// This refers to the contract that generated this log entry.
	ContractID *ContractID `protobuf:"bytes,1,opt,name=contractID,proto3" json:"contractID,omitempty"`
	// *
	// A bloom filter.<br/>
	// This filter applies to this log entry and indexes the contract log data
	// in the full data of the Ethereum block.<br/>
	// EIP-7668 proposes to remove bloom filters as they are quite low value
	// in practice and separate indexing services are more effective.
	Bloom []byte `protobuf:"bytes,2,opt,name=bloom,proto3" json:"bloom,omitempty"`
	// *
	// A list of the "topics" in this log entry.<br/>
	// The EVM permits up to 4 topics, each of which is 32 bytes (one EVM word).
	// <p>
	// The first "topic" is special, and MUST contain the keccak256 hash of the
	// event signature, if the event is not anonymous.
	Topic [][]byte `protobuf:"bytes,3,rep,name=topic,proto3" json:"topic,omitempty"`
	// *
	// Event data for this log entry.<br/>
	// This is binary data consisting of an arbitrary number of 256 bit
	// (32 byte) words. The content of that data is determined by the smart
	// contract code.<br/>
	Data          []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractLoginfo) Reset() {
	*x = ContractLoginfo{}
	mi := &file_contract_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractLoginfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractLoginfo) ProtoMessage() {}

func (x *ContractLoginfo) ProtoReflect() protoreflect.Message {
	mi := &file_contract_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractLoginfo.ProtoReflect.Descriptor instead.
func (*ContractLoginfo) Descriptor() ([]byte, []int) {
	return file_contract_types_proto_rawDescGZIP(), []int{3}
}

func (x *ContractLoginfo) GetContractID() *ContractID {
	if x != nil {
		return x.ContractID
	}
	return nil
}

func (x *ContractLoginfo) GetBloom() []byte {
	if x != nil {
		return x.Bloom
	}
	return nil
}

func (x *ContractLoginfo) GetTopic() [][]byte {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ContractLoginfo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// *
// A contract function result.<br/>
// The result returned by a call to a smart contract function. This is part of
// the response to a ContractCallLocal query, and is in the record for a
// ContractCall. The ContractCreateInstance transaction record also carries a
// function result, which is the results of the call to the constructor.
type ContractFunctionResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A contract identifier.<br/>
	// This identifies the smart contract that defines the function called.
	ContractID *ContractID `protobuf:"bytes,1,opt,name=contractID,proto3" json:"contractID,omitempty"`
	// *
	// Result data from the function call.
	// <p>
	// This SHALL be encoded in RLP bytecode format.
	ContractCallResult []byte `protobuf:"bytes,2,opt,name=contractCallResult,proto3" json:"contractCallResult,omitempty"`
	// *
	// Any error message produced by the contract call.
	// <p>
	// This SHALL be unset if the contract call succeeded.
	ErrorMessage string `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// *
	// A bloom filter produced by this contract call.<br/>
	// Ethereum uses this bloom filter to search for call results in the
	// Ethereum block history. High false positive rates make the bloom
	// filters quite limited value.
	Bloom []byte `protobuf:"bytes,4,opt,name=bloom,proto3" json:"bloom,omitempty"`
	// *
	// A quantity of "gas" used.<br/>
	// This represents the resource units expended to execute this
	// contract call, and correlates to transaction costs.
	GasUsed uint64 `protobuf:"varint,5,opt,name=gasUsed,proto3" json:"gasUsed,omitempty"`
	// *
	// Any Log events produced by this contract call.
	LogInfo []*ContractLoginfo `protobuf:"bytes,6,rep,name=logInfo,proto3" json:"logInfo,omitempty"`
	// *
	// Replaced by values in transaction records to support
	// `CREATE2` calls.<br/>
	// <p>
	// The list of smart contracts that were created by the function call.<br/>
	// The created ids will now _also_ be externalized through internal
	// transaction records, where each record has its alias field populated
	// with the new contract's EVM address.<br/>
	// This is needed for contracts created with CREATE2, which removes the
	// trivial relationship between a new contract's Identifier and its
	// Solidity address.
	//
	// Deprecated: Marked as deprecated in contract_types.proto.
	CreatedContractIDs []*ContractID `protobuf:"bytes,7,rep,name=createdContractIDs,proto3" json:"createdContractIDs,omitempty"`
	// *
	// A created contract address.<br/>
	// If the function created a new contract (e.g. `CREATE2`),
	// this is the primary 20-byte EVM address for that contract.
	// <p>
	// Every contract SHALL have a "base" EVM address that is determined by its
	// `shard.realm.num` contract ID.<br/>
	// This address is constructed as follows
	// <ol>
	//
	//	<li>The first 4 bytes are the big-endian
	//	    representation of the shard.</li>
	//	<li>The next 8 bytes are the big-endian
	//	    representation of the realm.</li>
	//	<li>The final 8 bytes are the big-endian
	//	    representation of the number.</li>
	//
	// </ol>
	// <p>
	// Contracts created via `CREATE2` SHALL have an _additional_, primary,
	// address that is derived from the
	// <a href="https://eips.ethereum.org/EIPS/eip-1014"><tt>EIP-1014</tt></a>
	// specification. This additional address SHALL NOT be directly related to
	// the `shard.realm.num` contract ID.<br/>
	// It should be emphasized that Contracts created via a `CREATE2` call can
	// also be referenced via the same "base" EVM address as described above.
	EvmAddress *wrapperspb.BytesValue `protobuf:"bytes,9,opt,name=evm_address,json=evmAddress,proto3" json:"evm_address,omitempty"`
	// *
	// The amount of gas available for this call, sometimes referred to as the
	// gasLimit.<br/>
	// This field SHALL NOT be populated when the associated `TransactionBody`
	// in the block stream is a `ContractCreateTransactionBody` or
	// a `ContractCallTransactionBody`.
	Gas int64 `protobuf:"varint,10,opt,name=gas,proto3" json:"gas,omitempty"`
	// *
	// An amount, in tinybar, sent by this function call.<br/>
	// This SHALL be zero(0) if the function called is not `payable`.<br/>
	// This field SHALL NOT be populated when the associated `TransactionBody`
	// in the block stream is a `ContractCreateTransactionBody` or
	// a `ContractCallTransactionBody`.
	Amount int64 `protobuf:"varint,11,opt,name=amount,proto3" json:"amount,omitempty"`
	// *
	// The smart contract function to call, and the parameters to pass to that
	// function.<br/>
	// These SHALL be presented in EVM bytecode function call format.<br/>
	// This field SHALL NOT be populated when the associated `TransactionBody`
	// in the block stream is a `ContractCreateTransactionBody` or
	// a `ContractCallTransactionBody`.
	FunctionParameters []byte `protobuf:"bytes,12,opt,name=functionParameters,proto3" json:"functionParameters,omitempty"`
	// *
	// The account that was the "sender" for this contract call.<br/>
	// If this is not set it SHALL be read from the accountId in the
	// transactionId for the contract call.<br/>
	// This field SHALL NOT be populated when the associated `TransactionBody`
	// in the block stream is a `ContractCreateTransactionBody` or
	// a `ContractCallTransactionBody`.
	SenderId *AccountID `protobuf:"bytes,13,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// *
	// A list of contract account nonce values.<br/>
	// This list SHALL contain a nonce value for each contract account modified
	// as a result of this contract call. These nonce values SHALL be the value
	// after the contract call is completed.
	ContractNonces []*ContractNonceInfo `protobuf:"bytes,14,rep,name=contract_nonces,json=contractNonces,proto3" json:"contract_nonces,omitempty"`
	// *
	// A nonce value for the "signer account".<br/>
	// If the contract call updated the signer nonce for the signer account
	// (i.e. by creating another contract), this field SHALL contain the
	// updated value.<br/>
	// If the signer account nonce was not updated, this field SHALL be `null`.
	SignerNonce   *wrapperspb.Int64Value `protobuf:"bytes,15,opt,name=signer_nonce,json=signerNonce,proto3" json:"signer_nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractFunctionResult) Reset() {
	*x = ContractFunctionResult{}
	mi := &file_contract_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractFunctionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractFunctionResult) ProtoMessage() {}

func (x *ContractFunctionResult) ProtoReflect() protoreflect.Message {
	mi := &file_contract_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractFunctionResult.ProtoReflect.Descriptor instead.
func (*ContractFunctionResult) Descriptor() ([]byte, []int) {
	return file_contract_types_proto_rawDescGZIP(), []int{4}
}

func (x *ContractFunctionResult) GetContractID() *ContractID {
	if x != nil {
		return x.ContractID
	}
	return nil
}

func (x *ContractFunctionResult) GetContractCallResult() []byte {
	if x != nil {
		return x.ContractCallResult
	}
	return nil
}

func (x *ContractFunctionResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ContractFunctionResult) GetBloom() []byte {
	if x != nil {
		return x.Bloom
	}
	return nil
}

func (x *ContractFunctionResult) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ContractFunctionResult) GetLogInfo() []*ContractLoginfo {
	if x != nil {
		return x.LogInfo
	}
	return nil
}

// Deprecated: Marked as deprecated in contract_types.proto.
func (x *ContractFunctionResult) GetCreatedContractIDs() []*ContractID {
	if x != nil {
		return x.CreatedContractIDs
	}
	return nil
}

func (x *ContractFunctionResult) GetEvmAddress() *wrapperspb.BytesValue {
	if x != nil {
		return x.EvmAddress
	}
	return nil
}

func (x *ContractFunctionResult) GetGas() int64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *ContractFunctionResult) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ContractFunctionResult) GetFunctionParameters() []byte {
	if x != nil {
		return x.FunctionParameters
	}
	return nil
}

func (x *ContractFunctionResult) GetSenderId() *AccountID {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *ContractFunctionResult) GetContractNonces() []*ContractNonceInfo {
	if x != nil {
		return x.ContractNonces
	}
	return nil
}

func (x *ContractFunctionResult) GetSignerNonce() *wrapperspb.Int64Value {
	if x != nil {
		return x.SignerNonce
	}
	return nil
}

var File_contract_types_proto protoreflect.FileDescriptor

const file_contract_types_proto_rawDesc = "" +
	"\n" +
	"\x14contract_types.proto\x12\x05proto\x1a\x11basic_types.proto\x1a\x1egoogle/protobuf/wrappers.proto\"Z\n" +
	"\x13InternalCallContext\x12\x10\n" +
	"\x03gas\x18\x01 \x01(\x04R\x03gas\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value\x12\x1b\n" +
	"\tcall_data\x18\x03 \x01(\fR\bcallData\"\xaa\x02\n" +
	"\x14EvmTransactionResult\x12-\n" +
	"\tsender_id\x18\x01 \x01(\v2\x10.proto.AccountIDR\bsenderId\x122\n" +
	"\vcontract_id\x18\x02 \x01(\v2\x11.proto.ContractIDR\n" +
	"contractId\x12\x1f\n" +
	"\vresult_data\x18\x03 \x01(\fR\n" +
	"resultData\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\x12\x19\n" +
	"\bgas_used\x18\x05 \x01(\x04R\agasUsed\x12N\n" +
	"\x15internal_call_context\x18\x06 \x01(\v2\x1a.proto.InternalCallContextR\x13internalCallContext\"]\n" +
	"\x11ContractNonceInfo\x122\n" +
	"\vcontract_id\x18\x01 \x01(\v2\x11.proto.ContractIDR\n" +
	"contractId\x12\x14\n" +
	"\x05nonce\x18\x02 \x01(\x03R\x05nonce\"\x84\x01\n" +
	"\x0fContractLoginfo\x121\n" +
	"\n" +
	"contractID\x18\x01 \x01(\v2\x11.proto.ContractIDR\n" +
	"contractID\x12\x14\n" +
	"\x05bloom\x18\x02 \x01(\fR\x05bloom\x12\x14\n" +
	"\x05topic\x18\x03 \x03(\fR\x05topic\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\"\x98\x05\n" +
	"\x16ContractFunctionResult\x121\n" +
	"\n" +
	"contractID\x18\x01 \x01(\v2\x11.proto.ContractIDR\n" +
	"contractID\x12.\n" +
	"\x12contractCallResult\x18\x02 \x01(\fR\x12contractCallResult\x12\"\n" +
	"\ferrorMessage\x18\x03 \x01(\tR\ferrorMessage\x12\x14\n" +
	"\x05bloom\x18\x04 \x01(\fR\x05bloom\x12\x18\n" +
	"\agasUsed\x18\x05 \x01(\x04R\agasUsed\x120\n" +
	"\alogInfo\x18\x06 \x03(\v2\x16.proto.ContractLoginfoR\alogInfo\x12E\n" +
	"\x12createdContractIDs\x18\a \x03(\v2\x11.proto.ContractIDB\x02\x18\x01R\x12createdContractIDs\x12<\n" +
	"\vevm_address\x18\t \x01(\v2\x1b.google.protobuf.BytesValueR\n" +
	"evmAddress\x12\x10\n" +
	"\x03gas\x18\n" +
	" \x01(\x03R\x03gas\x12\x16\n" +
	"\x06amount\x18\v \x01(\x03R\x06amount\x12.\n" +
	"\x12functionParameters\x18\f \x01(\fR\x12functionParameters\x12-\n" +
	"\tsender_id\x18\r \x01(\v2\x10.proto.AccountIDR\bsenderId\x12A\n" +
	"\x0fcontract_nonces\x18\x0e \x03(\v2\x18.proto.ContractNonceInfoR\x0econtractNonces\x12>\n" +
	"\fsigner_nonce\x18\x0f \x01(\v2\x1b.google.protobuf.Int64ValueR\vsignerNonceJ\x04\b\b\x10\tB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_contract_types_proto_rawDescOnce sync.Once
	file_contract_types_proto_rawDescData []byte
)

func file_contract_types_proto_rawDescGZIP() []byte {
	file_contract_types_proto_rawDescOnce.Do(func() {
		file_contract_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_contract_types_proto_rawDesc), len(file_contract_types_proto_rawDesc)))
	})
	return file_contract_types_proto_rawDescData
}

var file_contract_types_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_contract_types_proto_goTypes = []any{
	(*InternalCallContext)(nil),    // 0: proto.InternalCallContext
	(*EvmTransactionResult)(nil),   // 1: proto.EvmTransactionResult
	(*ContractNonceInfo)(nil),      // 2: proto.ContractNonceInfo
	(*ContractLoginfo)(nil),        // 3: proto.ContractLoginfo
	(*ContractFunctionResult)(nil), // 4: proto.ContractFunctionResult
	(*AccountID)(nil),              // 5: proto.AccountID
	(*ContractID)(nil),             // 6: proto.ContractID
	(*wrapperspb.BytesValue)(nil),  // 7: google.protobuf.BytesValue
	(*wrapperspb.Int64Value)(nil),  // 8: google.protobuf.Int64Value
}
var file_contract_types_proto_depIdxs = []int32{
	5,  // 0: proto.EvmTransactionResult.sender_id:type_name -> proto.AccountID
	6,  // 1: proto.EvmTransactionResult.contract_id:type_name -> proto.ContractID
	0,  // 2: proto.EvmTransactionResult.internal_call_context:type_name -> proto.InternalCallContext
	6,  // 3: proto.ContractNonceInfo.contract_id:type_name -> proto.ContractID
	6,  // 4: proto.ContractLoginfo.contractID:type_name -> proto.ContractID
	6,  // 5: proto.ContractFunctionResult.contractID:type_name -> proto.ContractID
	3,  // 6: proto.ContractFunctionResult.logInfo:type_name -> proto.ContractLoginfo
	6,  // 7: proto.ContractFunctionResult.createdContractIDs:type_name -> proto.ContractID
	7,  // 8: proto.ContractFunctionResult.evm_address:type_name -> google.protobuf.BytesValue
	5,  // 9: proto.ContractFunctionResult.sender_id:type_name -> proto.AccountID
	2,  // 10: proto.ContractFunctionResult.contract_nonces:type_name -> proto.ContractNonceInfo
	8,  // 11: proto.ContractFunctionResult.signer_nonce:type_name -> google.protobuf.Int64Value
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_contract_types_proto_init() }
func file_contract_types_proto_init() {
	if File_contract_types_proto != nil {
		return
	}
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_contract_types_proto_rawDesc), len(file_contract_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contract_types_proto_goTypes,
		DependencyIndexes: file_contract_types_proto_depIdxs,
		MessageInfos:      file_contract_types_proto_msgTypes,
	}.Build()
	File_contract_types_proto = out.File
	file_contract_types_proto_goTypes = nil
	file_contract_types_proto_depIdxs = nil
}
