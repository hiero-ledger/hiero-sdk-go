//*
// # Schedulable Transaction Body
// A message that replicates the `TransactionBody` message, with slight
// changes to exclude fields that cannot be scheduled via a `scheduleCreate`
// transaction.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: schedulable_transaction_body.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A schedulable transaction.
//
// The network configuration `scheduling.whitelist` limits which of these
// transaction types may actually be scheduled. As of version `0.50.0` of the
// consensus node software this list contains only `CryptoTransfer`,
// `ConsensusSubmitMessage`, `TokenBurn`, `TokenMint`,
// and `CryptoApproveAllowance`.
type SchedulableTransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A limit for the transaction fee the client is willing to pay.
	// <p>
	// The network SHALL NOT charge fees greater than this value.
	TransactionFee uint64 `protobuf:"varint,1,opt,name=transactionFee,proto3" json:"transactionFee,omitempty"`
	// *
	// A short description of the schedulable transaction.
	// <p>
	// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
	// (default 100) bytes when encoded as UTF-8.
	Memo string `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
	// Types that are valid to be assigned to Data:
	//
	//	*SchedulableTransactionBody_ContractCall
	//	*SchedulableTransactionBody_ContractCreateInstance
	//	*SchedulableTransactionBody_ContractUpdateInstance
	//	*SchedulableTransactionBody_ContractDeleteInstance
	//	*SchedulableTransactionBody_CryptoCreateAccount
	//	*SchedulableTransactionBody_CryptoDelete
	//	*SchedulableTransactionBody_CryptoTransfer
	//	*SchedulableTransactionBody_CryptoUpdateAccount
	//	*SchedulableTransactionBody_FileAppend
	//	*SchedulableTransactionBody_FileCreate
	//	*SchedulableTransactionBody_FileDelete
	//	*SchedulableTransactionBody_FileUpdate
	//	*SchedulableTransactionBody_SystemDelete
	//	*SchedulableTransactionBody_SystemUndelete
	//	*SchedulableTransactionBody_Freeze
	//	*SchedulableTransactionBody_ConsensusCreateTopic
	//	*SchedulableTransactionBody_ConsensusUpdateTopic
	//	*SchedulableTransactionBody_ConsensusDeleteTopic
	//	*SchedulableTransactionBody_ConsensusSubmitMessage
	//	*SchedulableTransactionBody_TokenCreation
	//	*SchedulableTransactionBody_TokenFreeze
	//	*SchedulableTransactionBody_TokenUnfreeze
	//	*SchedulableTransactionBody_TokenGrantKyc
	//	*SchedulableTransactionBody_TokenRevokeKyc
	//	*SchedulableTransactionBody_TokenDeletion
	//	*SchedulableTransactionBody_TokenUpdate
	//	*SchedulableTransactionBody_TokenMint
	//	*SchedulableTransactionBody_TokenBurn
	//	*SchedulableTransactionBody_TokenWipe
	//	*SchedulableTransactionBody_TokenAssociate
	//	*SchedulableTransactionBody_TokenDissociate
	//	*SchedulableTransactionBody_ScheduleDelete
	//	*SchedulableTransactionBody_TokenPause
	//	*SchedulableTransactionBody_TokenUnpause
	//	*SchedulableTransactionBody_CryptoApproveAllowance
	//	*SchedulableTransactionBody_CryptoDeleteAllowance
	//	*SchedulableTransactionBody_TokenFeeScheduleUpdate
	//	*SchedulableTransactionBody_UtilPrng
	//	*SchedulableTransactionBody_TokenUpdateNfts
	//	*SchedulableTransactionBody_NodeCreate
	//	*SchedulableTransactionBody_NodeUpdate
	//	*SchedulableTransactionBody_NodeDelete
	//	*SchedulableTransactionBody_TokenReject
	//	*SchedulableTransactionBody_TokenCancelAirdrop
	//	*SchedulableTransactionBody_TokenClaimAirdrop
	//	*SchedulableTransactionBody_TokenAirdrop
	Data isSchedulableTransactionBody_Data `protobuf_oneof:"data"`
	// *
	// A list of maximum custom fees that the users are willing to pay.
	// <p>
	// This field is OPTIONAL.<br/>
	// If left empty, the users are accepting to pay any custom fee.<br/>
	// If used with a transaction type that does not support custom fee limits, the transaction will fail.
	MaxCustomFees []*CustomFeeLimit `protobuf:"bytes,1001,rep,name=max_custom_fees,json=maxCustomFees,proto3" json:"max_custom_fees,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchedulableTransactionBody) Reset() {
	*x = SchedulableTransactionBody{}
	mi := &file_schedulable_transaction_body_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulableTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulableTransactionBody) ProtoMessage() {}

func (x *SchedulableTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_schedulable_transaction_body_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulableTransactionBody.ProtoReflect.Descriptor instead.
func (*SchedulableTransactionBody) Descriptor() ([]byte, []int) {
	return file_schedulable_transaction_body_proto_rawDescGZIP(), []int{0}
}

func (x *SchedulableTransactionBody) GetTransactionFee() uint64 {
	if x != nil {
		return x.TransactionFee
	}
	return 0
}

func (x *SchedulableTransactionBody) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SchedulableTransactionBody) GetData() isSchedulableTransactionBody_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SchedulableTransactionBody) GetContractCall() *ContractCallTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_ContractCall); ok {
			return x.ContractCall
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetContractCreateInstance() *ContractCreateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_ContractCreateInstance); ok {
			return x.ContractCreateInstance
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetContractUpdateInstance() *ContractUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_ContractUpdateInstance); ok {
			return x.ContractUpdateInstance
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetContractDeleteInstance() *ContractDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_ContractDeleteInstance); ok {
			return x.ContractDeleteInstance
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetCryptoCreateAccount() *CryptoCreateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_CryptoCreateAccount); ok {
			return x.CryptoCreateAccount
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetCryptoDelete() *CryptoDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_CryptoDelete); ok {
			return x.CryptoDelete
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetCryptoTransfer() *CryptoTransferTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_CryptoTransfer); ok {
			return x.CryptoTransfer
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetCryptoUpdateAccount() *CryptoUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_CryptoUpdateAccount); ok {
			return x.CryptoUpdateAccount
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetFileAppend() *FileAppendTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_FileAppend); ok {
			return x.FileAppend
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetFileCreate() *FileCreateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_FileCreate); ok {
			return x.FileCreate
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetFileDelete() *FileDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_FileDelete); ok {
			return x.FileDelete
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetFileUpdate() *FileUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_FileUpdate); ok {
			return x.FileUpdate
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetSystemDelete() *SystemDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_SystemDelete); ok {
			return x.SystemDelete
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetSystemUndelete() *SystemUndeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_SystemUndelete); ok {
			return x.SystemUndelete
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetFreeze() *FreezeTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_Freeze); ok {
			return x.Freeze
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetConsensusCreateTopic() *ConsensusCreateTopicTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_ConsensusCreateTopic); ok {
			return x.ConsensusCreateTopic
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetConsensusUpdateTopic() *ConsensusUpdateTopicTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_ConsensusUpdateTopic); ok {
			return x.ConsensusUpdateTopic
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetConsensusDeleteTopic() *ConsensusDeleteTopicTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_ConsensusDeleteTopic); ok {
			return x.ConsensusDeleteTopic
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetConsensusSubmitMessage() *ConsensusSubmitMessageTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_ConsensusSubmitMessage); ok {
			return x.ConsensusSubmitMessage
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenCreation() *TokenCreateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenCreation); ok {
			return x.TokenCreation
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenFreeze() *TokenFreezeAccountTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenFreeze); ok {
			return x.TokenFreeze
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenUnfreeze() *TokenUnfreezeAccountTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenUnfreeze); ok {
			return x.TokenUnfreeze
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenGrantKyc() *TokenGrantKycTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenGrantKyc); ok {
			return x.TokenGrantKyc
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenRevokeKyc() *TokenRevokeKycTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenRevokeKyc); ok {
			return x.TokenRevokeKyc
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenDeletion() *TokenDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenDeletion); ok {
			return x.TokenDeletion
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenUpdate() *TokenUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenUpdate); ok {
			return x.TokenUpdate
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenMint() *TokenMintTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenMint); ok {
			return x.TokenMint
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenBurn() *TokenBurnTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenBurn); ok {
			return x.TokenBurn
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenWipe() *TokenWipeAccountTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenWipe); ok {
			return x.TokenWipe
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenAssociate() *TokenAssociateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenAssociate); ok {
			return x.TokenAssociate
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenDissociate() *TokenDissociateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenDissociate); ok {
			return x.TokenDissociate
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetScheduleDelete() *ScheduleDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_ScheduleDelete); ok {
			return x.ScheduleDelete
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenPause() *TokenPauseTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenPause); ok {
			return x.TokenPause
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenUnpause() *TokenUnpauseTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenUnpause); ok {
			return x.TokenUnpause
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetCryptoApproveAllowance() *CryptoApproveAllowanceTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_CryptoApproveAllowance); ok {
			return x.CryptoApproveAllowance
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetCryptoDeleteAllowance() *CryptoDeleteAllowanceTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_CryptoDeleteAllowance); ok {
			return x.CryptoDeleteAllowance
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenFeeScheduleUpdate() *TokenFeeScheduleUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenFeeScheduleUpdate); ok {
			return x.TokenFeeScheduleUpdate
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetUtilPrng() *UtilPrngTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_UtilPrng); ok {
			return x.UtilPrng
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenUpdateNfts() *TokenUpdateNftsTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenUpdateNfts); ok {
			return x.TokenUpdateNfts
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetNodeCreate() *NodeCreateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_NodeCreate); ok {
			return x.NodeCreate
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetNodeUpdate() *NodeUpdateTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_NodeUpdate); ok {
			return x.NodeUpdate
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetNodeDelete() *NodeDeleteTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_NodeDelete); ok {
			return x.NodeDelete
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenReject() *TokenRejectTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenReject); ok {
			return x.TokenReject
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenCancelAirdrop() *TokenCancelAirdropTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenCancelAirdrop); ok {
			return x.TokenCancelAirdrop
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenClaimAirdrop() *TokenClaimAirdropTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenClaimAirdrop); ok {
			return x.TokenClaimAirdrop
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenAirdrop() *TokenAirdropTransactionBody {
	if x != nil {
		if x, ok := x.Data.(*SchedulableTransactionBody_TokenAirdrop); ok {
			return x.TokenAirdrop
		}
	}
	return nil
}

func (x *SchedulableTransactionBody) GetMaxCustomFees() []*CustomFeeLimit {
	if x != nil {
		return x.MaxCustomFees
	}
	return nil
}

type isSchedulableTransactionBody_Data interface {
	isSchedulableTransactionBody_Data()
}

type SchedulableTransactionBody_ContractCall struct {
	// *
	// Call a function defined on a smart contract.
	ContractCall *ContractCallTransactionBody `protobuf:"bytes,3,opt,name=contractCall,proto3,oneof"`
}

type SchedulableTransactionBody_ContractCreateInstance struct {
	// *
	// Create a smart contract.
	ContractCreateInstance *ContractCreateTransactionBody `protobuf:"bytes,4,opt,name=contractCreateInstance,proto3,oneof"`
}

type SchedulableTransactionBody_ContractUpdateInstance struct {
	// *
	// Update a smart contract.
	ContractUpdateInstance *ContractUpdateTransactionBody `protobuf:"bytes,5,opt,name=contractUpdateInstance,proto3,oneof"`
}

type SchedulableTransactionBody_ContractDeleteInstance struct {
	// *
	// Delete a smart contract and transfer remaining balance
	// to a specified account.
	ContractDeleteInstance *ContractDeleteTransactionBody `protobuf:"bytes,6,opt,name=contractDeleteInstance,proto3,oneof"`
}

type SchedulableTransactionBody_CryptoCreateAccount struct {
	// *
	// Create a new Hedera account.
	CryptoCreateAccount *CryptoCreateTransactionBody `protobuf:"bytes,7,opt,name=cryptoCreateAccount,proto3,oneof"`
}

type SchedulableTransactionBody_CryptoDelete struct {
	// *
	// Delete an Hedera account.<br/>
	// This will mark the account as deleted, and transfer all remaining
	// HBAR to a receiver account.
	CryptoDelete *CryptoDeleteTransactionBody `protobuf:"bytes,8,opt,name=cryptoDelete,proto3,oneof"`
}

type SchedulableTransactionBody_CryptoTransfer struct {
	// *
	// Transfer HBAR between accounts.
	CryptoTransfer *CryptoTransferTransactionBody `protobuf:"bytes,9,opt,name=cryptoTransfer,proto3,oneof"`
}

type SchedulableTransactionBody_CryptoUpdateAccount struct {
	// *
	// Modify an Hedera account.
	CryptoUpdateAccount *CryptoUpdateTransactionBody `protobuf:"bytes,10,opt,name=cryptoUpdateAccount,proto3,oneof"`
}

type SchedulableTransactionBody_FileAppend struct {
	// *
	// Append data to the end of a file.
	FileAppend *FileAppendTransactionBody `protobuf:"bytes,11,opt,name=fileAppend,proto3,oneof"`
}

type SchedulableTransactionBody_FileCreate struct {
	// *
	// Create a new file.
	FileCreate *FileCreateTransactionBody `protobuf:"bytes,12,opt,name=fileCreate,proto3,oneof"`
}

type SchedulableTransactionBody_FileDelete struct {
	// *
	// Delete a file.<br/>
	// This will remove the content of the file, and mark the file as
	// deleted.
	FileDelete *FileDeleteTransactionBody `protobuf:"bytes,13,opt,name=fileDelete,proto3,oneof"`
}

type SchedulableTransactionBody_FileUpdate struct {
	// *
	// Modify a file.<br/>
	// This may modify any metadata, and/or _replace_ the content.
	FileUpdate *FileUpdateTransactionBody `protobuf:"bytes,14,opt,name=fileUpdate,proto3,oneof"`
}

type SchedulableTransactionBody_SystemDelete struct {
	// *
	// Delete a file as an Hedera administrative function.<br/>
	// This is a privileged operation.
	SystemDelete *SystemDeleteTransactionBody `protobuf:"bytes,15,opt,name=systemDelete,proto3,oneof"`
}

type SchedulableTransactionBody_SystemUndelete struct {
	// *
	// Restore a file deleted via `systemDelete`.<br/>
	// This is a privileged operation.
	SystemUndelete *SystemUndeleteTransactionBody `protobuf:"bytes,16,opt,name=systemUndelete,proto3,oneof"`
}

type SchedulableTransactionBody_Freeze struct {
	// *
	// Freeze the network.<br/>
	// This is actually several possible operations, and the caller
	// should examine the "freeze service" for more detail.<br/>
	// This is a privileged operation.
	Freeze *FreezeTransactionBody `protobuf:"bytes,17,opt,name=freeze,proto3,oneof"`
}

type SchedulableTransactionBody_ConsensusCreateTopic struct {
	// *
	// Create a topic.
	ConsensusCreateTopic *ConsensusCreateTopicTransactionBody `protobuf:"bytes,18,opt,name=consensusCreateTopic,proto3,oneof"`
}

type SchedulableTransactionBody_ConsensusUpdateTopic struct {
	// *
	// Update a topic.
	ConsensusUpdateTopic *ConsensusUpdateTopicTransactionBody `protobuf:"bytes,19,opt,name=consensusUpdateTopic,proto3,oneof"`
}

type SchedulableTransactionBody_ConsensusDeleteTopic struct {
	// *
	// Delete a topic.
	ConsensusDeleteTopic *ConsensusDeleteTopicTransactionBody `protobuf:"bytes,20,opt,name=consensusDeleteTopic,proto3,oneof"`
}

type SchedulableTransactionBody_ConsensusSubmitMessage struct {
	// *
	// Submit a message to a topic.<br/>
	// A message may be "chunked", and submitted in parts, if the total
	// message size exceeds the limit for a single transaction.
	ConsensusSubmitMessage *ConsensusSubmitMessageTransactionBody `protobuf:"bytes,21,opt,name=consensusSubmitMessage,proto3,oneof"`
}

type SchedulableTransactionBody_TokenCreation struct {
	// *
	// Create a new Hedera token.
	TokenCreation *TokenCreateTransactionBody `protobuf:"bytes,22,opt,name=tokenCreation,proto3,oneof"`
}

type SchedulableTransactionBody_TokenFreeze struct {
	// *
	// Freeze an account with respect to a token.<br/>
	// A frozen account cannot transact in that token until unfrozen.
	TokenFreeze *TokenFreezeAccountTransactionBody `protobuf:"bytes,23,opt,name=tokenFreeze,proto3,oneof"`
}

type SchedulableTransactionBody_TokenUnfreeze struct {
	// *
	// Unfreeze an account with respect to a token.
	TokenUnfreeze *TokenUnfreezeAccountTransactionBody `protobuf:"bytes,24,opt,name=tokenUnfreeze,proto3,oneof"`
}

type SchedulableTransactionBody_TokenGrantKyc struct {
	// *
	// Grant KYC to an account with respect to a token.<br/>
	// KYC is generally a "know your customer" assertion that a
	// responsible entity has sufficient information to positively
	// identify the account holder to relevant authorities.
	TokenGrantKyc *TokenGrantKycTransactionBody `protobuf:"bytes,25,opt,name=tokenGrantKyc,proto3,oneof"`
}

type SchedulableTransactionBody_TokenRevokeKyc struct {
	// *
	// Revoke KYC from an account with respect to a token.
	TokenRevokeKyc *TokenRevokeKycTransactionBody `protobuf:"bytes,26,opt,name=tokenRevokeKyc,proto3,oneof"`
}

type SchedulableTransactionBody_TokenDeletion struct {
	// *
	// Deletes an Hedera token.<br/>
	// The token will be marked deleted.
	TokenDeletion *TokenDeleteTransactionBody `protobuf:"bytes,27,opt,name=tokenDeletion,proto3,oneof"`
}

type SchedulableTransactionBody_TokenUpdate struct {
	// *
	// Update an Hedera token.<br/>
	// Depending on what fields are to be modified, the signature
	// requirements will vary. See `TokenUpdateTransactionBody` for
	// further detail.
	TokenUpdate *TokenUpdateTransactionBody `protobuf:"bytes,28,opt,name=tokenUpdate,proto3,oneof"`
}

type SchedulableTransactionBody_TokenMint struct {
	// *
	// Mint new tokens.<br/>
	// All minted tokens will be delivered to the treasury account for
	// the token type. The "mint key" for the token must sign this
	// transaction.
	TokenMint *TokenMintTransactionBody `protobuf:"bytes,29,opt,name=tokenMint,proto3,oneof"`
}

type SchedulableTransactionBody_TokenBurn struct {
	// *
	// Burn tokens from the treasury account.<br/>
	// The "burn key" for the token must sign this transaction.
	TokenBurn *TokenBurnTransactionBody `protobuf:"bytes,30,opt,name=tokenBurn,proto3,oneof"`
}

type SchedulableTransactionBody_TokenWipe struct {
	// *
	// Wipe tokens from an account.<br/>
	// This will remove a specified amount of fungible/common tokens or
	// a specified list of non-fungible/unique serial numbered tokens
	// of a given token type from an Hedera account. The removed tokens
	// are _burned_ as if by a `tokenBurn` transaction.<br/>
	// The "wipe key" for the token must sign this transaction.
	TokenWipe *TokenWipeAccountTransactionBody `protobuf:"bytes,31,opt,name=tokenWipe,proto3,oneof"`
}

type SchedulableTransactionBody_TokenAssociate struct {
	// *
	// Associate tokens to an account.
	TokenAssociate *TokenAssociateTransactionBody `protobuf:"bytes,32,opt,name=tokenAssociate,proto3,oneof"`
}

type SchedulableTransactionBody_TokenDissociate struct {
	// *
	// Dissociate tokens from an account.
	TokenDissociate *TokenDissociateTransactionBody `protobuf:"bytes,33,opt,name=tokenDissociate,proto3,oneof"`
}

type SchedulableTransactionBody_ScheduleDelete struct {
	// *
	// Delete a schedule.<br/>
	// The schedule will be marked as deleted.
	ScheduleDelete *ScheduleDeleteTransactionBody `protobuf:"bytes,34,opt,name=scheduleDelete,proto3,oneof"`
}

type SchedulableTransactionBody_TokenPause struct {
	// *
	// Pause a Token.<br/>
	// This transaction must be signed by the "pause key" for the token.
	TokenPause *TokenPauseTransactionBody `protobuf:"bytes,35,opt,name=token_pause,json=tokenPause,proto3,oneof"`
}

type SchedulableTransactionBody_TokenUnpause struct {
	// *
	// Unpause a Token.<br/>
	// This transaction must be signed by the "pause key" for the token.
	TokenUnpause *TokenUnpauseTransactionBody `protobuf:"bytes,36,opt,name=token_unpause,json=tokenUnpause,proto3,oneof"`
}

type SchedulableTransactionBody_CryptoApproveAllowance struct {
	// *
	// Add one or more approved allowances for spenders to transfer the
	// paying account's hbar or tokens.
	CryptoApproveAllowance *CryptoApproveAllowanceTransactionBody `protobuf:"bytes,37,opt,name=cryptoApproveAllowance,proto3,oneof"`
}

type SchedulableTransactionBody_CryptoDeleteAllowance struct {
	// *
	// Delete one or more approvals for spenders to transfer the
	// paying account's hbar or tokens.
	CryptoDeleteAllowance *CryptoDeleteAllowanceTransactionBody `protobuf:"bytes,38,opt,name=cryptoDeleteAllowance,proto3,oneof"`
}

type SchedulableTransactionBody_TokenFeeScheduleUpdate struct {
	// *
	// Update the custom fee schedule for a token.<br/>
	// This transaction must be signed by the "fee schedule key"
	// for the token.
	TokenFeeScheduleUpdate *TokenFeeScheduleUpdateTransactionBody `protobuf:"bytes,39,opt,name=token_fee_schedule_update,json=tokenFeeScheduleUpdate,proto3,oneof"`
}

type SchedulableTransactionBody_UtilPrng struct {
	// *
	// Provide a deterministic pseudorandom number based on network state.
	UtilPrng *UtilPrngTransactionBody `protobuf:"bytes,40,opt,name=util_prng,json=utilPrng,proto3,oneof"`
}

type SchedulableTransactionBody_TokenUpdateNfts struct {
	// *
	// Update one or more non-fungible/unique tokens.<br/>
	// This will update metadata for one or more serial numbers within
	// a collection (token type).
	TokenUpdateNfts *TokenUpdateNftsTransactionBody `protobuf:"bytes,41,opt,name=token_update_nfts,json=tokenUpdateNfts,proto3,oneof"`
}

type SchedulableTransactionBody_NodeCreate struct {
	// *
	// Create a new node in the network address book.<br/>
	// This is a privileged operation.
	NodeCreate *NodeCreateTransactionBody `protobuf:"bytes,42,opt,name=nodeCreate,proto3,oneof"`
}

type SchedulableTransactionBody_NodeUpdate struct {
	// *
	// Update a node in the network address book.<br/>
	// This is a privileged operation.
	NodeUpdate *NodeUpdateTransactionBody `protobuf:"bytes,43,opt,name=nodeUpdate,proto3,oneof"`
}

type SchedulableTransactionBody_NodeDelete struct {
	// *
	// Delete a node from the network address book.<br/>
	// This will mark the node as deleted.<br/>
	// This is a privileged operation.
	NodeDelete *NodeDeleteTransactionBody `protobuf:"bytes,44,opt,name=nodeDelete,proto3,oneof"`
}

type SchedulableTransactionBody_TokenReject struct {
	// *
	// "Reject" undesired tokens.<br/>
	// This transaction will transfer one or more tokens or token
	// balances held by the requesting account to the treasury
	// for each token type.
	// <p>
	// Each transfer MUST be one of the following:
	// <ul>
	//
	//	<li>A single non-fungible/unique token.</li>
	//	<li>The full balance held for a fungible/common
	//	    token type.</li>
	//
	// </ul>
	// When complete, the requesting account SHALL NOT hold the
	// rejected tokens.<br/>
	// Custom fees and royalties defined for the tokens rejected
	// SHALL NOT be charged for this transaction.
	TokenReject *TokenRejectTransactionBody `protobuf:"bytes,45,opt,name=tokenReject,proto3,oneof"`
}

type SchedulableTransactionBody_TokenCancelAirdrop struct {
	// *
	// Cancel an "airdrop".<br/>
	// This transaction cancels a pending airdrop for one or more
	// recipients.
	// <p>
	// The airdrop(s) to cancel MUST be pending, and not claimed.<br/>
	TokenCancelAirdrop *TokenCancelAirdropTransactionBody `protobuf:"bytes,46,opt,name=tokenCancelAirdrop,proto3,oneof"`
}

type SchedulableTransactionBody_TokenClaimAirdrop struct {
	// *
	// Claim an "airdrop".
	// This transaction "claims" one or more pending "airdrops".
	// <p>
	// The airdrop(s) to claim MUST be pending, and not
	// already claimed.<br/>
	TokenClaimAirdrop *TokenClaimAirdropTransactionBody `protobuf:"bytes,47,opt,name=tokenClaimAirdrop,proto3,oneof"`
}

type SchedulableTransactionBody_TokenAirdrop struct {
	// *
	// Send an "airdrop" of tokens to one or more recipients.
	// <p>
	// This transaction unilaterally "gifts" tokens by transferring them
	// from a "sender" account to the "recipient" account(s). If any
	// recipient is not already associated to the token to airdrop, or
	// has set a "reciever signature required" flag, then that recipient
	// is recorded as a "pending" airdrop which must be "claimed".  All
	// other recipients receive the "airdropped" tokens immediately.
	TokenAirdrop *TokenAirdropTransactionBody `protobuf:"bytes,48,opt,name=tokenAirdrop,proto3,oneof"`
}

func (*SchedulableTransactionBody_ContractCall) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ContractCreateInstance) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ContractUpdateInstance) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ContractDeleteInstance) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_CryptoCreateAccount) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_CryptoDelete) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_CryptoTransfer) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_CryptoUpdateAccount) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_FileAppend) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_FileCreate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_FileDelete) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_FileUpdate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_SystemDelete) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_SystemUndelete) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_Freeze) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ConsensusCreateTopic) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ConsensusUpdateTopic) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ConsensusDeleteTopic) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ConsensusSubmitMessage) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenCreation) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenFreeze) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenUnfreeze) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenGrantKyc) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenRevokeKyc) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenDeletion) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenUpdate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenMint) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenBurn) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenWipe) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenAssociate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenDissociate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ScheduleDelete) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenPause) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenUnpause) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_CryptoApproveAllowance) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_CryptoDeleteAllowance) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenFeeScheduleUpdate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_UtilPrng) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenUpdateNfts) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_NodeCreate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_NodeUpdate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_NodeDelete) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenReject) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenCancelAirdrop) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenClaimAirdrop) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenAirdrop) isSchedulableTransactionBody_Data() {}

var File_schedulable_transaction_body_proto protoreflect.FileDescriptor

const file_schedulable_transaction_body_proto_rawDesc = "" +
	"\n" +
	"\"schedulable_transaction_body.proto\x12\x05proto\x1a\x13system_delete.proto\x1a\x15system_undelete.proto\x1a\ffreeze.proto\x1a\x13contract_call.proto\x1a\x15contract_create.proto\x1a\x15contract_update.proto\x1a\x13crypto_create.proto\x1a\x13crypto_delete.proto\x1a\x15crypto_transfer.proto\x1a\x13crypto_update.proto\x1a\x1ecrypto_approve_allowance.proto\x1a\x1dcrypto_delete_allowance.proto\x1a\x11file_append.proto\x1a\x11file_create.proto\x1a\x11file_delete.proto\x1a\x11file_update.proto\x1a\x15contract_delete.proto\x1a\x1cconsensus_create_topic.proto\x1a\x1cconsensus_update_topic.proto\x1a\x1cconsensus_delete_topic.proto\x1a\x1econsensus_submit_message.proto\x1a\x12token_create.proto\x1a\x1atoken_freeze_account.proto\x1a\x1ctoken_unfreeze_account.proto\x1a\x15token_grant_kyc.proto\x1a\x16token_revoke_kyc.proto\x1a\x12token_delete.proto\x1a\x12token_update.proto\x1a\x10token_mint.proto\x1a\x10token_burn.proto\x1a\x18token_wipe_account.proto\x1a\x15token_associate.proto\x1a\x16token_dissociate.proto\x1a\x1ftoken_fee_schedule_update.proto\x1a\x11token_pause.proto\x1a\x13token_unpause.proto\x1a\x17token_update_nfts.proto\x1a\x12token_reject.proto\x1a\x1atoken_cancel_airdrop.proto\x1a\x19token_claim_airdrop.proto\x1a\x13token_airdrop.proto\x1a\x15schedule_delete.proto\x1a\x0futil_prng.proto\x1a\x11custom_fees.proto\x1a\x11node_create.proto\x1a\x11node_update.proto\x1a\x11node_delete.proto\"\xdc\x1e\n" +
	"\x1aSchedulableTransactionBody\x12&\n" +
	"\x0etransactionFee\x18\x01 \x01(\x04R\x0etransactionFee\x12\x12\n" +
	"\x04memo\x18\x02 \x01(\tR\x04memo\x12H\n" +
	"\fcontractCall\x18\x03 \x01(\v2\".proto.ContractCallTransactionBodyH\x00R\fcontractCall\x12^\n" +
	"\x16contractCreateInstance\x18\x04 \x01(\v2$.proto.ContractCreateTransactionBodyH\x00R\x16contractCreateInstance\x12^\n" +
	"\x16contractUpdateInstance\x18\x05 \x01(\v2$.proto.ContractUpdateTransactionBodyH\x00R\x16contractUpdateInstance\x12^\n" +
	"\x16contractDeleteInstance\x18\x06 \x01(\v2$.proto.ContractDeleteTransactionBodyH\x00R\x16contractDeleteInstance\x12V\n" +
	"\x13cryptoCreateAccount\x18\a \x01(\v2\".proto.CryptoCreateTransactionBodyH\x00R\x13cryptoCreateAccount\x12H\n" +
	"\fcryptoDelete\x18\b \x01(\v2\".proto.CryptoDeleteTransactionBodyH\x00R\fcryptoDelete\x12N\n" +
	"\x0ecryptoTransfer\x18\t \x01(\v2$.proto.CryptoTransferTransactionBodyH\x00R\x0ecryptoTransfer\x12V\n" +
	"\x13cryptoUpdateAccount\x18\n" +
	" \x01(\v2\".proto.CryptoUpdateTransactionBodyH\x00R\x13cryptoUpdateAccount\x12B\n" +
	"\n" +
	"fileAppend\x18\v \x01(\v2 .proto.FileAppendTransactionBodyH\x00R\n" +
	"fileAppend\x12B\n" +
	"\n" +
	"fileCreate\x18\f \x01(\v2 .proto.FileCreateTransactionBodyH\x00R\n" +
	"fileCreate\x12B\n" +
	"\n" +
	"fileDelete\x18\r \x01(\v2 .proto.FileDeleteTransactionBodyH\x00R\n" +
	"fileDelete\x12B\n" +
	"\n" +
	"fileUpdate\x18\x0e \x01(\v2 .proto.FileUpdateTransactionBodyH\x00R\n" +
	"fileUpdate\x12H\n" +
	"\fsystemDelete\x18\x0f \x01(\v2\".proto.SystemDeleteTransactionBodyH\x00R\fsystemDelete\x12N\n" +
	"\x0esystemUndelete\x18\x10 \x01(\v2$.proto.SystemUndeleteTransactionBodyH\x00R\x0esystemUndelete\x126\n" +
	"\x06freeze\x18\x11 \x01(\v2\x1c.proto.FreezeTransactionBodyH\x00R\x06freeze\x12`\n" +
	"\x14consensusCreateTopic\x18\x12 \x01(\v2*.proto.ConsensusCreateTopicTransactionBodyH\x00R\x14consensusCreateTopic\x12`\n" +
	"\x14consensusUpdateTopic\x18\x13 \x01(\v2*.proto.ConsensusUpdateTopicTransactionBodyH\x00R\x14consensusUpdateTopic\x12`\n" +
	"\x14consensusDeleteTopic\x18\x14 \x01(\v2*.proto.ConsensusDeleteTopicTransactionBodyH\x00R\x14consensusDeleteTopic\x12f\n" +
	"\x16consensusSubmitMessage\x18\x15 \x01(\v2,.proto.ConsensusSubmitMessageTransactionBodyH\x00R\x16consensusSubmitMessage\x12I\n" +
	"\rtokenCreation\x18\x16 \x01(\v2!.proto.TokenCreateTransactionBodyH\x00R\rtokenCreation\x12L\n" +
	"\vtokenFreeze\x18\x17 \x01(\v2(.proto.TokenFreezeAccountTransactionBodyH\x00R\vtokenFreeze\x12R\n" +
	"\rtokenUnfreeze\x18\x18 \x01(\v2*.proto.TokenUnfreezeAccountTransactionBodyH\x00R\rtokenUnfreeze\x12K\n" +
	"\rtokenGrantKyc\x18\x19 \x01(\v2#.proto.TokenGrantKycTransactionBodyH\x00R\rtokenGrantKyc\x12N\n" +
	"\x0etokenRevokeKyc\x18\x1a \x01(\v2$.proto.TokenRevokeKycTransactionBodyH\x00R\x0etokenRevokeKyc\x12I\n" +
	"\rtokenDeletion\x18\x1b \x01(\v2!.proto.TokenDeleteTransactionBodyH\x00R\rtokenDeletion\x12E\n" +
	"\vtokenUpdate\x18\x1c \x01(\v2!.proto.TokenUpdateTransactionBodyH\x00R\vtokenUpdate\x12?\n" +
	"\ttokenMint\x18\x1d \x01(\v2\x1f.proto.TokenMintTransactionBodyH\x00R\ttokenMint\x12?\n" +
	"\ttokenBurn\x18\x1e \x01(\v2\x1f.proto.TokenBurnTransactionBodyH\x00R\ttokenBurn\x12F\n" +
	"\ttokenWipe\x18\x1f \x01(\v2&.proto.TokenWipeAccountTransactionBodyH\x00R\ttokenWipe\x12N\n" +
	"\x0etokenAssociate\x18  \x01(\v2$.proto.TokenAssociateTransactionBodyH\x00R\x0etokenAssociate\x12Q\n" +
	"\x0ftokenDissociate\x18! \x01(\v2%.proto.TokenDissociateTransactionBodyH\x00R\x0ftokenDissociate\x12N\n" +
	"\x0escheduleDelete\x18\" \x01(\v2$.proto.ScheduleDeleteTransactionBodyH\x00R\x0escheduleDelete\x12C\n" +
	"\vtoken_pause\x18# \x01(\v2 .proto.TokenPauseTransactionBodyH\x00R\n" +
	"tokenPause\x12I\n" +
	"\rtoken_unpause\x18$ \x01(\v2\".proto.TokenUnpauseTransactionBodyH\x00R\ftokenUnpause\x12f\n" +
	"\x16cryptoApproveAllowance\x18% \x01(\v2,.proto.CryptoApproveAllowanceTransactionBodyH\x00R\x16cryptoApproveAllowance\x12c\n" +
	"\x15cryptoDeleteAllowance\x18& \x01(\v2+.proto.CryptoDeleteAllowanceTransactionBodyH\x00R\x15cryptoDeleteAllowance\x12i\n" +
	"\x19token_fee_schedule_update\x18' \x01(\v2,.proto.TokenFeeScheduleUpdateTransactionBodyH\x00R\x16tokenFeeScheduleUpdate\x12=\n" +
	"\tutil_prng\x18( \x01(\v2\x1e.proto.UtilPrngTransactionBodyH\x00R\butilPrng\x12S\n" +
	"\x11token_update_nfts\x18) \x01(\v2%.proto.TokenUpdateNftsTransactionBodyH\x00R\x0ftokenUpdateNfts\x12]\n" +
	"\n" +
	"nodeCreate\x18* \x01(\v2;.com.hedera.hapi.node.addressbook.NodeCreateTransactionBodyH\x00R\n" +
	"nodeCreate\x12]\n" +
	"\n" +
	"nodeUpdate\x18+ \x01(\v2;.com.hedera.hapi.node.addressbook.NodeUpdateTransactionBodyH\x00R\n" +
	"nodeUpdate\x12]\n" +
	"\n" +
	"nodeDelete\x18, \x01(\v2;.com.hedera.hapi.node.addressbook.NodeDeleteTransactionBodyH\x00R\n" +
	"nodeDelete\x12E\n" +
	"\vtokenReject\x18- \x01(\v2!.proto.TokenRejectTransactionBodyH\x00R\vtokenReject\x12Z\n" +
	"\x12tokenCancelAirdrop\x18. \x01(\v2(.proto.TokenCancelAirdropTransactionBodyH\x00R\x12tokenCancelAirdrop\x12W\n" +
	"\x11tokenClaimAirdrop\x18/ \x01(\v2'.proto.TokenClaimAirdropTransactionBodyH\x00R\x11tokenClaimAirdrop\x12H\n" +
	"\ftokenAirdrop\x180 \x01(\v2\".proto.TokenAirdropTransactionBodyH\x00R\ftokenAirdrop\x12>\n" +
	"\x0fmax_custom_fees\x18\xe9\a \x03(\v2\x15.proto.CustomFeeLimitR\rmaxCustomFeesB\x06\n" +
	"\x04dataB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_schedulable_transaction_body_proto_rawDescOnce sync.Once
	file_schedulable_transaction_body_proto_rawDescData []byte
)

func file_schedulable_transaction_body_proto_rawDescGZIP() []byte {
	file_schedulable_transaction_body_proto_rawDescOnce.Do(func() {
		file_schedulable_transaction_body_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_schedulable_transaction_body_proto_rawDesc), len(file_schedulable_transaction_body_proto_rawDesc)))
	})
	return file_schedulable_transaction_body_proto_rawDescData
}

var file_schedulable_transaction_body_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_schedulable_transaction_body_proto_goTypes = []any{
	(*SchedulableTransactionBody)(nil),            // 0: proto.SchedulableTransactionBody
	(*ContractCallTransactionBody)(nil),           // 1: proto.ContractCallTransactionBody
	(*ContractCreateTransactionBody)(nil),         // 2: proto.ContractCreateTransactionBody
	(*ContractUpdateTransactionBody)(nil),         // 3: proto.ContractUpdateTransactionBody
	(*ContractDeleteTransactionBody)(nil),         // 4: proto.ContractDeleteTransactionBody
	(*CryptoCreateTransactionBody)(nil),           // 5: proto.CryptoCreateTransactionBody
	(*CryptoDeleteTransactionBody)(nil),           // 6: proto.CryptoDeleteTransactionBody
	(*CryptoTransferTransactionBody)(nil),         // 7: proto.CryptoTransferTransactionBody
	(*CryptoUpdateTransactionBody)(nil),           // 8: proto.CryptoUpdateTransactionBody
	(*FileAppendTransactionBody)(nil),             // 9: proto.FileAppendTransactionBody
	(*FileCreateTransactionBody)(nil),             // 10: proto.FileCreateTransactionBody
	(*FileDeleteTransactionBody)(nil),             // 11: proto.FileDeleteTransactionBody
	(*FileUpdateTransactionBody)(nil),             // 12: proto.FileUpdateTransactionBody
	(*SystemDeleteTransactionBody)(nil),           // 13: proto.SystemDeleteTransactionBody
	(*SystemUndeleteTransactionBody)(nil),         // 14: proto.SystemUndeleteTransactionBody
	(*FreezeTransactionBody)(nil),                 // 15: proto.FreezeTransactionBody
	(*ConsensusCreateTopicTransactionBody)(nil),   // 16: proto.ConsensusCreateTopicTransactionBody
	(*ConsensusUpdateTopicTransactionBody)(nil),   // 17: proto.ConsensusUpdateTopicTransactionBody
	(*ConsensusDeleteTopicTransactionBody)(nil),   // 18: proto.ConsensusDeleteTopicTransactionBody
	(*ConsensusSubmitMessageTransactionBody)(nil), // 19: proto.ConsensusSubmitMessageTransactionBody
	(*TokenCreateTransactionBody)(nil),            // 20: proto.TokenCreateTransactionBody
	(*TokenFreezeAccountTransactionBody)(nil),     // 21: proto.TokenFreezeAccountTransactionBody
	(*TokenUnfreezeAccountTransactionBody)(nil),   // 22: proto.TokenUnfreezeAccountTransactionBody
	(*TokenGrantKycTransactionBody)(nil),          // 23: proto.TokenGrantKycTransactionBody
	(*TokenRevokeKycTransactionBody)(nil),         // 24: proto.TokenRevokeKycTransactionBody
	(*TokenDeleteTransactionBody)(nil),            // 25: proto.TokenDeleteTransactionBody
	(*TokenUpdateTransactionBody)(nil),            // 26: proto.TokenUpdateTransactionBody
	(*TokenMintTransactionBody)(nil),              // 27: proto.TokenMintTransactionBody
	(*TokenBurnTransactionBody)(nil),              // 28: proto.TokenBurnTransactionBody
	(*TokenWipeAccountTransactionBody)(nil),       // 29: proto.TokenWipeAccountTransactionBody
	(*TokenAssociateTransactionBody)(nil),         // 30: proto.TokenAssociateTransactionBody
	(*TokenDissociateTransactionBody)(nil),        // 31: proto.TokenDissociateTransactionBody
	(*ScheduleDeleteTransactionBody)(nil),         // 32: proto.ScheduleDeleteTransactionBody
	(*TokenPauseTransactionBody)(nil),             // 33: proto.TokenPauseTransactionBody
	(*TokenUnpauseTransactionBody)(nil),           // 34: proto.TokenUnpauseTransactionBody
	(*CryptoApproveAllowanceTransactionBody)(nil), // 35: proto.CryptoApproveAllowanceTransactionBody
	(*CryptoDeleteAllowanceTransactionBody)(nil),  // 36: proto.CryptoDeleteAllowanceTransactionBody
	(*TokenFeeScheduleUpdateTransactionBody)(nil), // 37: proto.TokenFeeScheduleUpdateTransactionBody
	(*UtilPrngTransactionBody)(nil),               // 38: proto.UtilPrngTransactionBody
	(*TokenUpdateNftsTransactionBody)(nil),        // 39: proto.TokenUpdateNftsTransactionBody
	(*NodeCreateTransactionBody)(nil),             // 40: com.hedera.hapi.node.addressbook.NodeCreateTransactionBody
	(*NodeUpdateTransactionBody)(nil),             // 41: com.hedera.hapi.node.addressbook.NodeUpdateTransactionBody
	(*NodeDeleteTransactionBody)(nil),             // 42: com.hedera.hapi.node.addressbook.NodeDeleteTransactionBody
	(*TokenRejectTransactionBody)(nil),            // 43: proto.TokenRejectTransactionBody
	(*TokenCancelAirdropTransactionBody)(nil),     // 44: proto.TokenCancelAirdropTransactionBody
	(*TokenClaimAirdropTransactionBody)(nil),      // 45: proto.TokenClaimAirdropTransactionBody
	(*TokenAirdropTransactionBody)(nil),           // 46: proto.TokenAirdropTransactionBody
	(*CustomFeeLimit)(nil),                        // 47: proto.CustomFeeLimit
}
var file_schedulable_transaction_body_proto_depIdxs = []int32{
	1,  // 0: proto.SchedulableTransactionBody.contractCall:type_name -> proto.ContractCallTransactionBody
	2,  // 1: proto.SchedulableTransactionBody.contractCreateInstance:type_name -> proto.ContractCreateTransactionBody
	3,  // 2: proto.SchedulableTransactionBody.contractUpdateInstance:type_name -> proto.ContractUpdateTransactionBody
	4,  // 3: proto.SchedulableTransactionBody.contractDeleteInstance:type_name -> proto.ContractDeleteTransactionBody
	5,  // 4: proto.SchedulableTransactionBody.cryptoCreateAccount:type_name -> proto.CryptoCreateTransactionBody
	6,  // 5: proto.SchedulableTransactionBody.cryptoDelete:type_name -> proto.CryptoDeleteTransactionBody
	7,  // 6: proto.SchedulableTransactionBody.cryptoTransfer:type_name -> proto.CryptoTransferTransactionBody
	8,  // 7: proto.SchedulableTransactionBody.cryptoUpdateAccount:type_name -> proto.CryptoUpdateTransactionBody
	9,  // 8: proto.SchedulableTransactionBody.fileAppend:type_name -> proto.FileAppendTransactionBody
	10, // 9: proto.SchedulableTransactionBody.fileCreate:type_name -> proto.FileCreateTransactionBody
	11, // 10: proto.SchedulableTransactionBody.fileDelete:type_name -> proto.FileDeleteTransactionBody
	12, // 11: proto.SchedulableTransactionBody.fileUpdate:type_name -> proto.FileUpdateTransactionBody
	13, // 12: proto.SchedulableTransactionBody.systemDelete:type_name -> proto.SystemDeleteTransactionBody
	14, // 13: proto.SchedulableTransactionBody.systemUndelete:type_name -> proto.SystemUndeleteTransactionBody
	15, // 14: proto.SchedulableTransactionBody.freeze:type_name -> proto.FreezeTransactionBody
	16, // 15: proto.SchedulableTransactionBody.consensusCreateTopic:type_name -> proto.ConsensusCreateTopicTransactionBody
	17, // 16: proto.SchedulableTransactionBody.consensusUpdateTopic:type_name -> proto.ConsensusUpdateTopicTransactionBody
	18, // 17: proto.SchedulableTransactionBody.consensusDeleteTopic:type_name -> proto.ConsensusDeleteTopicTransactionBody
	19, // 18: proto.SchedulableTransactionBody.consensusSubmitMessage:type_name -> proto.ConsensusSubmitMessageTransactionBody
	20, // 19: proto.SchedulableTransactionBody.tokenCreation:type_name -> proto.TokenCreateTransactionBody
	21, // 20: proto.SchedulableTransactionBody.tokenFreeze:type_name -> proto.TokenFreezeAccountTransactionBody
	22, // 21: proto.SchedulableTransactionBody.tokenUnfreeze:type_name -> proto.TokenUnfreezeAccountTransactionBody
	23, // 22: proto.SchedulableTransactionBody.tokenGrantKyc:type_name -> proto.TokenGrantKycTransactionBody
	24, // 23: proto.SchedulableTransactionBody.tokenRevokeKyc:type_name -> proto.TokenRevokeKycTransactionBody
	25, // 24: proto.SchedulableTransactionBody.tokenDeletion:type_name -> proto.TokenDeleteTransactionBody
	26, // 25: proto.SchedulableTransactionBody.tokenUpdate:type_name -> proto.TokenUpdateTransactionBody
	27, // 26: proto.SchedulableTransactionBody.tokenMint:type_name -> proto.TokenMintTransactionBody
	28, // 27: proto.SchedulableTransactionBody.tokenBurn:type_name -> proto.TokenBurnTransactionBody
	29, // 28: proto.SchedulableTransactionBody.tokenWipe:type_name -> proto.TokenWipeAccountTransactionBody
	30, // 29: proto.SchedulableTransactionBody.tokenAssociate:type_name -> proto.TokenAssociateTransactionBody
	31, // 30: proto.SchedulableTransactionBody.tokenDissociate:type_name -> proto.TokenDissociateTransactionBody
	32, // 31: proto.SchedulableTransactionBody.scheduleDelete:type_name -> proto.ScheduleDeleteTransactionBody
	33, // 32: proto.SchedulableTransactionBody.token_pause:type_name -> proto.TokenPauseTransactionBody
	34, // 33: proto.SchedulableTransactionBody.token_unpause:type_name -> proto.TokenUnpauseTransactionBody
	35, // 34: proto.SchedulableTransactionBody.cryptoApproveAllowance:type_name -> proto.CryptoApproveAllowanceTransactionBody
	36, // 35: proto.SchedulableTransactionBody.cryptoDeleteAllowance:type_name -> proto.CryptoDeleteAllowanceTransactionBody
	37, // 36: proto.SchedulableTransactionBody.token_fee_schedule_update:type_name -> proto.TokenFeeScheduleUpdateTransactionBody
	38, // 37: proto.SchedulableTransactionBody.util_prng:type_name -> proto.UtilPrngTransactionBody
	39, // 38: proto.SchedulableTransactionBody.token_update_nfts:type_name -> proto.TokenUpdateNftsTransactionBody
	40, // 39: proto.SchedulableTransactionBody.nodeCreate:type_name -> com.hedera.hapi.node.addressbook.NodeCreateTransactionBody
	41, // 40: proto.SchedulableTransactionBody.nodeUpdate:type_name -> com.hedera.hapi.node.addressbook.NodeUpdateTransactionBody
	42, // 41: proto.SchedulableTransactionBody.nodeDelete:type_name -> com.hedera.hapi.node.addressbook.NodeDeleteTransactionBody
	43, // 42: proto.SchedulableTransactionBody.tokenReject:type_name -> proto.TokenRejectTransactionBody
	44, // 43: proto.SchedulableTransactionBody.tokenCancelAirdrop:type_name -> proto.TokenCancelAirdropTransactionBody
	45, // 44: proto.SchedulableTransactionBody.tokenClaimAirdrop:type_name -> proto.TokenClaimAirdropTransactionBody
	46, // 45: proto.SchedulableTransactionBody.tokenAirdrop:type_name -> proto.TokenAirdropTransactionBody
	47, // 46: proto.SchedulableTransactionBody.max_custom_fees:type_name -> proto.CustomFeeLimit
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_schedulable_transaction_body_proto_init() }
func file_schedulable_transaction_body_proto_init() {
	if File_schedulable_transaction_body_proto != nil {
		return
	}
	file_system_delete_proto_init()
	file_system_undelete_proto_init()
	file_freeze_proto_init()
	file_contract_call_proto_init()
	file_contract_create_proto_init()
	file_contract_update_proto_init()
	file_crypto_create_proto_init()
	file_crypto_delete_proto_init()
	file_crypto_transfer_proto_init()
	file_crypto_update_proto_init()
	file_crypto_approve_allowance_proto_init()
	file_crypto_delete_allowance_proto_init()
	file_file_append_proto_init()
	file_file_create_proto_init()
	file_file_delete_proto_init()
	file_file_update_proto_init()
	file_contract_delete_proto_init()
	file_consensus_create_topic_proto_init()
	file_consensus_update_topic_proto_init()
	file_consensus_delete_topic_proto_init()
	file_consensus_submit_message_proto_init()
	file_token_create_proto_init()
	file_token_freeze_account_proto_init()
	file_token_unfreeze_account_proto_init()
	file_token_grant_kyc_proto_init()
	file_token_revoke_kyc_proto_init()
	file_token_delete_proto_init()
	file_token_update_proto_init()
	file_token_mint_proto_init()
	file_token_burn_proto_init()
	file_token_wipe_account_proto_init()
	file_token_associate_proto_init()
	file_token_dissociate_proto_init()
	file_token_fee_schedule_update_proto_init()
	file_token_pause_proto_init()
	file_token_unpause_proto_init()
	file_token_update_nfts_proto_init()
	file_token_reject_proto_init()
	file_token_cancel_airdrop_proto_init()
	file_token_claim_airdrop_proto_init()
	file_token_airdrop_proto_init()
	file_schedule_delete_proto_init()
	file_util_prng_proto_init()
	file_custom_fees_proto_init()
	file_node_create_proto_init()
	file_node_update_proto_init()
	file_node_delete_proto_init()
	file_schedulable_transaction_body_proto_msgTypes[0].OneofWrappers = []any{
		(*SchedulableTransactionBody_ContractCall)(nil),
		(*SchedulableTransactionBody_ContractCreateInstance)(nil),
		(*SchedulableTransactionBody_ContractUpdateInstance)(nil),
		(*SchedulableTransactionBody_ContractDeleteInstance)(nil),
		(*SchedulableTransactionBody_CryptoCreateAccount)(nil),
		(*SchedulableTransactionBody_CryptoDelete)(nil),
		(*SchedulableTransactionBody_CryptoTransfer)(nil),
		(*SchedulableTransactionBody_CryptoUpdateAccount)(nil),
		(*SchedulableTransactionBody_FileAppend)(nil),
		(*SchedulableTransactionBody_FileCreate)(nil),
		(*SchedulableTransactionBody_FileDelete)(nil),
		(*SchedulableTransactionBody_FileUpdate)(nil),
		(*SchedulableTransactionBody_SystemDelete)(nil),
		(*SchedulableTransactionBody_SystemUndelete)(nil),
		(*SchedulableTransactionBody_Freeze)(nil),
		(*SchedulableTransactionBody_ConsensusCreateTopic)(nil),
		(*SchedulableTransactionBody_ConsensusUpdateTopic)(nil),
		(*SchedulableTransactionBody_ConsensusDeleteTopic)(nil),
		(*SchedulableTransactionBody_ConsensusSubmitMessage)(nil),
		(*SchedulableTransactionBody_TokenCreation)(nil),
		(*SchedulableTransactionBody_TokenFreeze)(nil),
		(*SchedulableTransactionBody_TokenUnfreeze)(nil),
		(*SchedulableTransactionBody_TokenGrantKyc)(nil),
		(*SchedulableTransactionBody_TokenRevokeKyc)(nil),
		(*SchedulableTransactionBody_TokenDeletion)(nil),
		(*SchedulableTransactionBody_TokenUpdate)(nil),
		(*SchedulableTransactionBody_TokenMint)(nil),
		(*SchedulableTransactionBody_TokenBurn)(nil),
		(*SchedulableTransactionBody_TokenWipe)(nil),
		(*SchedulableTransactionBody_TokenAssociate)(nil),
		(*SchedulableTransactionBody_TokenDissociate)(nil),
		(*SchedulableTransactionBody_ScheduleDelete)(nil),
		(*SchedulableTransactionBody_TokenPause)(nil),
		(*SchedulableTransactionBody_TokenUnpause)(nil),
		(*SchedulableTransactionBody_CryptoApproveAllowance)(nil),
		(*SchedulableTransactionBody_CryptoDeleteAllowance)(nil),
		(*SchedulableTransactionBody_TokenFeeScheduleUpdate)(nil),
		(*SchedulableTransactionBody_UtilPrng)(nil),
		(*SchedulableTransactionBody_TokenUpdateNfts)(nil),
		(*SchedulableTransactionBody_NodeCreate)(nil),
		(*SchedulableTransactionBody_NodeUpdate)(nil),
		(*SchedulableTransactionBody_NodeDelete)(nil),
		(*SchedulableTransactionBody_TokenReject)(nil),
		(*SchedulableTransactionBody_TokenCancelAirdrop)(nil),
		(*SchedulableTransactionBody_TokenClaimAirdrop)(nil),
		(*SchedulableTransactionBody_TokenAirdrop)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_schedulable_transaction_body_proto_rawDesc), len(file_schedulable_transaction_body_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schedulable_transaction_body_proto_goTypes,
		DependencyIndexes: file_schedulable_transaction_body_proto_depIdxs,
		MessageInfos:      file_schedulable_transaction_body_proto_msgTypes,
	}.Build()
	File_schedulable_transaction_body_proto = out.File
	file_schedulable_transaction_body_proto_goTypes = nil
	file_schedulable_transaction_body_proto_depIdxs = nil
}
