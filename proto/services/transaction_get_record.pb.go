//*
// # Get Transaction Record
// Messages for a query to obtain a transaction record. This particular
// query is used by `getTxRecordByTxID` in the "Crypto" service API.
//
// > Note
// >> Much more detailed information for transaction records is available
// >> from a mirror node, and the mirror node retains transaction records
// >> long term, rather than for a short "cache" duration. Clients may
// >> prefer the mirror node graph API to query transaction records, rather
// >> than this query.
//
// > Implementation Note
// >> This query is _defined_ for "Crypto" service, but is _implemented_ by
// >> the "Network Admin" service.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: transaction_get_record.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Request for a `TransactionGetRecord` (a.k.a. `getTxRecordByTxID`) query.
// <p>
// A transaction record SHALL be available after the network reaches
// consensus and completes execution for a transaction.<br/>
// A transaction record SHALL NOT be available after the end of the network
// configured "record cache duration".
//
// <dl>
//
//	 <dt>What is the "first" transaction?</dt>
//	 <dd>The "first" transaction SHALL be the the transaction with
//	     the earliest consensus time and a status that is neither
//	     `INVALID_NODE_ACCOUNT` nor `INVALID_PAYER_SIGNATURE`.<br/>
//	     If no transaction is found meeting this status criteria, the
//	     "first" transaction SHALL be the transaction with the earliest
//	     consensus time.</dd>
//	<dt>What is a "child" transaction?</dt>
//	<dd>A "child" transaction is any transaction created in the process of
//	    completing another transaction. These are most common with a smart
//	    contract call, where a call to a contract may initiate one or more
//	    additional transactions to complete a complex process.</dd>
//
// </dl>
type TransactionGetRecordQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Standard information sent with every query operation.<br/>
	// This includes the signed payment and what kind of response is requested
	// (cost, state proof, both, or neither).
	Header *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// A transaction identifier.
	// <p>
	// This MUST contain the full identifier, as submitted, for the
	// transaction to query.
	TransactionID *TransactionID `protobuf:"bytes,2,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	// *
	// A flag to request duplicates.
	// <p>
	// If set, every transaction record within the record cache duration that
	// matches the requested transaction identifier SHALL be returned.<br/>
	// If not set, duplicate transactions SHALL NOT be returned.<br/>
	// If not set, only the record for the first matching transaction to
	// reach consensus SHALL be returned.
	IncludeDuplicates bool `protobuf:"varint,3,opt,name=includeDuplicates,proto3" json:"includeDuplicates,omitempty"`
	// *
	// A flag to request "child" records.
	// <p>
	// If set, the response SHALL include records for each child transaction
	// executed as part of the requested parent transaction.<br/>
	// If not set, the response SHALL NOT include any records for child
	// transactions.
	IncludeChildRecords bool `protobuf:"varint,4,opt,name=include_child_records,json=includeChildRecords,proto3" json:"include_child_records,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TransactionGetRecordQuery) Reset() {
	*x = TransactionGetRecordQuery{}
	mi := &file_transaction_get_record_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionGetRecordQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionGetRecordQuery) ProtoMessage() {}

func (x *TransactionGetRecordQuery) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_get_record_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionGetRecordQuery.ProtoReflect.Descriptor instead.
func (*TransactionGetRecordQuery) Descriptor() ([]byte, []int) {
	return file_transaction_get_record_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionGetRecordQuery) GetHeader() *QueryHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TransactionGetRecordQuery) GetTransactionID() *TransactionID {
	if x != nil {
		return x.TransactionID
	}
	return nil
}

func (x *TransactionGetRecordQuery) GetIncludeDuplicates() bool {
	if x != nil {
		return x.IncludeDuplicates
	}
	return false
}

func (x *TransactionGetRecordQuery) GetIncludeChildRecords() bool {
	if x != nil {
		return x.IncludeChildRecords
	}
	return false
}

// *
// Response message for a `getTxRecordByTxID` query.
//
// The `transactionRecord` field SHALL return the record for the "first"
// transaction that matches the transaction identifier requested.<br/>
// If records for duplicate transactions are requested, those duplicate
// records SHALL be present in the `duplicateTransactionReceipts` list.<br/>
// If records for child transactions are requested, those child records SHALL
// be present in the `child_transaction_records` list.<br/>
// A state proof MAY be provided for this response; provided the record is
// still available from the consensus nodes.
//
// <dl>
//
//	 <dt>What is the "first" transaction?</dt>
//	 <dd>The "first" transaction receipt SHALL be the receipt for the
//	     first transaction with status that is neither
//	     `INVALID_NODE_ACCOUNT` nor `INVALID_PAYER_SIGNATURE`.<br/>
//	     If no transaction is found meeting the status criteria, the
//	     "first" transaction SHALL be the first transaction by
//	     consensus time.</dd>
//	<dt>What is a "child" transaction?</dt>
//	<dd>A "child" transaction is any transaction created in the process of
//	    completing another transaction. These are most common with a smart
//	    contract call, where a call to a contract may initiate one or more
//	    additional transactions to complete a complex process.</dd>
//
// </dl>
type TransactionGetRecordResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The standard response information for queries.<br/>
	// This includes the values requested in the `QueryHeader`
	// (cost, state proof, both, or neither).
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// A transaction record.
	// <p>
	// This SHALL be the record for the "first" transaction that matches
	// the transaction identifier requested.<br/>
	// If the identified transaction has not reached consensus, this
	// record SHALL have a `status` of `UNKNOWN`.<br/>
	// If the identified transaction reached consensus prior to the
	// current configured record cache duration, this record SHALL
	// have a `status` of `UNKNOWN`.
	TransactionRecord *TransactionRecord `protobuf:"bytes,3,opt,name=transactionRecord,proto3" json:"transactionRecord,omitempty"`
	// *
	// A list of duplicate transaction records.
	// <p>
	// If the request set the `includeDuplicates` flat, this list SHALL
	// include the records for each duplicate transaction associated to the
	// requested transaction identifier.
	// If the request did not set the `includeDuplicates` flag, this list
	// SHALL be empty.<br/>
	// If the `transactionRecord` status is `UNKNOWN`, this list
	// SHALL be empty.<br/>
	// This list SHALL be in order by consensus timestamp.
	DuplicateTransactionRecords []*TransactionRecord `protobuf:"bytes,4,rep,name=duplicateTransactionRecords,proto3" json:"duplicateTransactionRecords,omitempty"`
	// *
	// A list of records for all child transactions spawned by the requested
	// transaction.
	// <p>
	// If the request set the `include_child_records` flag, this list SHALL
	// include records for each child transaction executed as part of the
	// requested parent transaction.<br/>
	// If the request did not set the `include_child_records` flag, this
	// list SHALL be empty. <br/>
	// If the parent transaction did not initiate any child transactions
	// this list SHALL be empty.<br/>
	// If the `transactionRecord` status is `UNKNOWN`, this list
	// SHALL be empty.<br/>
	// This list SHALL be in order by consensus timestamp.
	ChildTransactionRecords []*TransactionRecord `protobuf:"bytes,5,rep,name=child_transaction_records,json=childTransactionRecords,proto3" json:"child_transaction_records,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TransactionGetRecordResponse) Reset() {
	*x = TransactionGetRecordResponse{}
	mi := &file_transaction_get_record_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionGetRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionGetRecordResponse) ProtoMessage() {}

func (x *TransactionGetRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_get_record_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionGetRecordResponse.ProtoReflect.Descriptor instead.
func (*TransactionGetRecordResponse) Descriptor() ([]byte, []int) {
	return file_transaction_get_record_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionGetRecordResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TransactionGetRecordResponse) GetTransactionRecord() *TransactionRecord {
	if x != nil {
		return x.TransactionRecord
	}
	return nil
}

func (x *TransactionGetRecordResponse) GetDuplicateTransactionRecords() []*TransactionRecord {
	if x != nil {
		return x.DuplicateTransactionRecords
	}
	return nil
}

func (x *TransactionGetRecordResponse) GetChildTransactionRecords() []*TransactionRecord {
	if x != nil {
		return x.ChildTransactionRecords
	}
	return nil
}

var File_transaction_get_record_proto protoreflect.FileDescriptor

const file_transaction_get_record_proto_rawDesc = "" +
	"\n" +
	"\x1ctransaction_get_record.proto\x12\x05proto\x1a\x18transaction_record.proto\x1a\x11basic_types.proto\x1a\x12query_header.proto\x1a\x15response_header.proto\"\xe5\x01\n" +
	"\x19TransactionGetRecordQuery\x12*\n" +
	"\x06header\x18\x01 \x01(\v2\x12.proto.QueryHeaderR\x06header\x12:\n" +
	"\rtransactionID\x18\x02 \x01(\v2\x14.proto.TransactionIDR\rtransactionID\x12,\n" +
	"\x11includeDuplicates\x18\x03 \x01(\bR\x11includeDuplicates\x122\n" +
	"\x15include_child_records\x18\x04 \x01(\bR\x13includeChildRecords\"\xc7\x02\n" +
	"\x1cTransactionGetRecordResponse\x12-\n" +
	"\x06header\x18\x01 \x01(\v2\x15.proto.ResponseHeaderR\x06header\x12F\n" +
	"\x11transactionRecord\x18\x03 \x01(\v2\x18.proto.TransactionRecordR\x11transactionRecord\x12Z\n" +
	"\x1bduplicateTransactionRecords\x18\x04 \x03(\v2\x18.proto.TransactionRecordR\x1bduplicateTransactionRecords\x12T\n" +
	"\x19child_transaction_records\x18\x05 \x03(\v2\x18.proto.TransactionRecordR\x17childTransactionRecordsB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_transaction_get_record_proto_rawDescOnce sync.Once
	file_transaction_get_record_proto_rawDescData []byte
)

func file_transaction_get_record_proto_rawDescGZIP() []byte {
	file_transaction_get_record_proto_rawDescOnce.Do(func() {
		file_transaction_get_record_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_transaction_get_record_proto_rawDesc), len(file_transaction_get_record_proto_rawDesc)))
	})
	return file_transaction_get_record_proto_rawDescData
}

var file_transaction_get_record_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_transaction_get_record_proto_goTypes = []any{
	(*TransactionGetRecordQuery)(nil),    // 0: proto.TransactionGetRecordQuery
	(*TransactionGetRecordResponse)(nil), // 1: proto.TransactionGetRecordResponse
	(*QueryHeader)(nil),                  // 2: proto.QueryHeader
	(*TransactionID)(nil),                // 3: proto.TransactionID
	(*ResponseHeader)(nil),               // 4: proto.ResponseHeader
	(*TransactionRecord)(nil),            // 5: proto.TransactionRecord
}
var file_transaction_get_record_proto_depIdxs = []int32{
	2, // 0: proto.TransactionGetRecordQuery.header:type_name -> proto.QueryHeader
	3, // 1: proto.TransactionGetRecordQuery.transactionID:type_name -> proto.TransactionID
	4, // 2: proto.TransactionGetRecordResponse.header:type_name -> proto.ResponseHeader
	5, // 3: proto.TransactionGetRecordResponse.transactionRecord:type_name -> proto.TransactionRecord
	5, // 4: proto.TransactionGetRecordResponse.duplicateTransactionRecords:type_name -> proto.TransactionRecord
	5, // 5: proto.TransactionGetRecordResponse.child_transaction_records:type_name -> proto.TransactionRecord
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_transaction_get_record_proto_init() }
func file_transaction_get_record_proto_init() {
	if File_transaction_get_record_proto != nil {
		return
	}
	file_transaction_record_proto_init()
	file_basic_types_proto_init()
	file_query_header_proto_init()
	file_response_header_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_transaction_get_record_proto_rawDesc), len(file_transaction_get_record_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transaction_get_record_proto_goTypes,
		DependencyIndexes: file_transaction_get_record_proto_depIdxs,
		MessageInfos:      file_transaction_get_record_proto_msgTypes,
	}.Build()
	File_transaction_get_record_proto = out.File
	file_transaction_get_record_proto_goTypes = nil
	file_transaction_get_record_proto_depIdxs = nil
}
