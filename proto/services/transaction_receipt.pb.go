//*
// # Transaction Receipt
// The receipt returned when the results of a transaction are requested via
// `TransactionGetReceiptQuery`.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: transaction_receipt.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// The summary of a transaction's result so far.<br/>
// If the transaction has not reached consensus, this result will
// be necessarily incomplete.
//
// Most items in this object are only set for specific transactions.
// Those values SHALL be unset for all other transactions.
type TransactionReceipt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The consensus status of the transaction.
	// <p>
	// This SHALL be `UNKNOWN` if consensus has not been reached.<br/>
	// This SHALL be `UNKNOWN` if the associated transaction did not have
	// a valid payer signature.
	Status ResponseCodeEnum `protobuf:"varint,1,opt,name=status,proto3,enum=proto.ResponseCodeEnum" json:"status,omitempty"`
	// *
	// In the receipt of a `CryptoCreate`, the id of the newly created account.
	AccountID *AccountID `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	// *
	// In the receipt of a `FileCreate`, the id of the newly created file.
	FileID *FileID `protobuf:"bytes,3,opt,name=fileID,proto3" json:"fileID,omitempty"`
	// *
	// In the receipt of a `ContractCreate`, the id of the newly created
	// contract.
	ContractID *ContractID `protobuf:"bytes,4,opt,name=contractID,proto3" json:"contractID,omitempty"`
	// *
	// The exchange rates in effect when the transaction reached consensus.
	ExchangeRate *ExchangeRateSet `protobuf:"bytes,5,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	// *
	// In the receipt of a `ConsensusCreateTopic`, the id of the newly
	// created topic.
	TopicID *TopicID `protobuf:"bytes,6,opt,name=topicID,proto3" json:"topicID,omitempty"`
	// *
	// In the receipt of a `ConsensusSubmitMessage`, the new sequence
	// number for the topic that received the message.
	TopicSequenceNumber uint64 `protobuf:"varint,7,opt,name=topicSequenceNumber,proto3" json:"topicSequenceNumber,omitempty"`
	// *
	// In the receipt of a `ConsensusSubmitMessage`, the new running hash of
	// the topic that received the message.<br/>
	// <p>
	// The inputs to the topic running hash have changed over time.<br/>
	// This 48-byte field is the output of a SHA-384 digest with input data
	// determined by the value of the `topicRunningHashVersion` field.<br/>
	// All new transactions SHALL use `topicRunningHashVersion` `3`.<br/>
	// The bytes of each uint64 or uint32 encoded for the hash input MUST be
	// in Big-Endian format.
	// <p>
	// <hr style="margin: 0.2em 5em 0.2em 5em; height: 0.5em; border-style: solid none solid none; border-width: 2px;"/>
	// <p>
	// The most recent version is denoted by `topicRunningHashVersion = 3`.
	// <p>
	// This version SHALL include, in order
	// <ol>
	//
	//	<li>The previous running hash of the topic (48 bytes)</li>
	//	<li>The `topic_running_hash_version` field (8 bytes)</li>
	//	<li>The payer account's shard (8 bytes)</li>
	//	<li>The payer account's realm (8 bytes)</li>
	//	<li>The payer account's number (8 bytes)</li>
	//	<li>The topic's shard (8 bytes)</li>
	//	<li>The topic's realm (8 bytes)</li>
	//	<li>The topic's number (8 bytes)</li>
	//	<li>The number of seconds since the epoch when the
	//	    `ConsensusSubmitMessage` reached consensus (8 bytes)</li>
	//	<li>The number of nanoseconds within the second when the
	//	    `ConsensusSubmitMessage` reached consensus (4 bytes)</li>
	//	<li>The `topic_sequence_number` field (8 bytes)</li>
	//	<li>The output of a SHA-384 digest of the message bytes from the
	//	    `ConsensusSubmitMessage` (48 bytes)</li>
	//
	// </ol>
	// <hr style="margin: 0.2em 5em 0.2em 5em; height: 0.5em; border-style: solid none solid none; border-width: 2px;"/>
	// <p>
	// The next older version is denoted by `topicRunningHashVersion = 2`.
	// <p>
	// This version SHALL include, in order
	// <ol>
	//
	//	<li>The previous running hash of the topic (48 bytes)</li>
	//	<li>The `topic_running_hash_version` field (8 bytes)</li>
	//	<li>The topic's shard (8 bytes)</li>
	//	<li>The topic's realm (8 bytes)</li>
	//	<li>The topic's number (8 bytes)</li>
	//	<li>The number of seconds since the epoch when the
	//	    `ConsensusSubmitMessage` reached consensus (8 bytes)</li>
	//	<li>The number of nanoseconds within the second when the
	//	    `ConsensusSubmitMessage` reached consensus (4 bytes)</li>
	//	<li>The `topic_sequence_number` field (8 bytes)</li>
	//	<li>The output of a SHA-384 digest of the message bytes from the
	//	    `ConsensusSubmitMessage` (48 bytes)</li>
	//
	// </ol>
	// <hr style="margin: 0.2em 5em 0.2em 5em; height: 0.5em; border-style: solid none solid none; border-width: 2px;"/>
	// <p>
	// The original version, used at genesis, is denoted
	// by `topicRunningHashVersion = 1` or `topicRunningHashVersion = 0`.
	// <p>
	// This version SHALL include, in order
	// <ol>
	//
	//	<li>The previous running hash of the topic (48 bytes)</li>
	//	<li>The topic's shard (8 bytes)</li>
	//	<li>The topic's realm (8 bytes)</li>
	//	<li>The topic's number (8 bytes)</li>
	//	<li>The number of seconds since the epoch when the
	//	    `ConsensusSubmitMessage` reached consensus (8 bytes)</li>
	//	<li>The number of nanoseconds within the second when the
	//	    `ConsensusSubmitMessage` reached consensus (4 bytes)</li>
	//	<li>The `topic_sequence_number` field (8 bytes)</li>
	//	<li>The message bytes from the `ConsensusSubmitMessage`
	//	    (variable)</li>
	//
	// </ol>
	TopicRunningHash []byte `protobuf:"bytes,8,opt,name=topicRunningHash,proto3" json:"topicRunningHash,omitempty"`
	// *
	// In the receipt of a `ConsensusSubmitMessage`, the version of the
	// SHA-384 digest inputs used to update the running hash.
	TopicRunningHashVersion uint64 `protobuf:"varint,9,opt,name=topicRunningHashVersion,proto3" json:"topicRunningHashVersion,omitempty"`
	// *
	// In the receipt of a `CreateToken`, the id of the newly created token
	TokenID *TokenID `protobuf:"bytes,10,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	// *
	// In the receipt of `TokenMint`, `TokenWipe`, or `TokenBurn`.<br/>
	// For non-unique tokens, the current total supply of that token.<br/>
	// For unique tokens,the total number of NFTs issued for that token.
	NewTotalSupply uint64 `protobuf:"varint,11,opt,name=newTotalSupply,proto3" json:"newTotalSupply,omitempty"`
	// *
	// In the receipt of a `ScheduleCreate`, the id of the newly created
	// Scheduled Entity
	ScheduleID *ScheduleID `protobuf:"bytes,12,opt,name=scheduleID,proto3" json:"scheduleID,omitempty"`
	// *
	// In the receipt of a `ScheduleCreate` or `ScheduleSign` that enables the
	// scheduled transaction to execute immediately, the `TransactionID` that
	// should be used to query for the receipt or record of the scheduled
	// transaction that was executed.
	ScheduledTransactionID *TransactionID `protobuf:"bytes,13,opt,name=scheduledTransactionID,proto3" json:"scheduledTransactionID,omitempty"`
	// *
	// In the receipt of a `TokenMint` for non-fungible/unique tokens,
	// the serial numbers of the newly created tokens.
	SerialNumbers []int64 `protobuf:"varint,14,rep,packed,name=serialNumbers,proto3" json:"serialNumbers,omitempty"`
	// *
	// An affected node identifier.<br/>
	// In the receipt of a NodeCreate, the id of the newly created node.
	// <p>
	// This value SHALL be set following a `createNode` transaction.<br/>
	// This value SHALL NOT be set following any other transaction.
	NodeId        uint64 `protobuf:"varint,15,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionReceipt) Reset() {
	*x = TransactionReceipt{}
	mi := &file_transaction_receipt_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReceipt) ProtoMessage() {}

func (x *TransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_receipt_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReceipt.ProtoReflect.Descriptor instead.
func (*TransactionReceipt) Descriptor() ([]byte, []int) {
	return file_transaction_receipt_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionReceipt) GetStatus() ResponseCodeEnum {
	if x != nil {
		return x.Status
	}
	return ResponseCodeEnum_OK
}

func (x *TransactionReceipt) GetAccountID() *AccountID {
	if x != nil {
		return x.AccountID
	}
	return nil
}

func (x *TransactionReceipt) GetFileID() *FileID {
	if x != nil {
		return x.FileID
	}
	return nil
}

func (x *TransactionReceipt) GetContractID() *ContractID {
	if x != nil {
		return x.ContractID
	}
	return nil
}

func (x *TransactionReceipt) GetExchangeRate() *ExchangeRateSet {
	if x != nil {
		return x.ExchangeRate
	}
	return nil
}

func (x *TransactionReceipt) GetTopicID() *TopicID {
	if x != nil {
		return x.TopicID
	}
	return nil
}

func (x *TransactionReceipt) GetTopicSequenceNumber() uint64 {
	if x != nil {
		return x.TopicSequenceNumber
	}
	return 0
}

func (x *TransactionReceipt) GetTopicRunningHash() []byte {
	if x != nil {
		return x.TopicRunningHash
	}
	return nil
}

func (x *TransactionReceipt) GetTopicRunningHashVersion() uint64 {
	if x != nil {
		return x.TopicRunningHashVersion
	}
	return 0
}

func (x *TransactionReceipt) GetTokenID() *TokenID {
	if x != nil {
		return x.TokenID
	}
	return nil
}

func (x *TransactionReceipt) GetNewTotalSupply() uint64 {
	if x != nil {
		return x.NewTotalSupply
	}
	return 0
}

func (x *TransactionReceipt) GetScheduleID() *ScheduleID {
	if x != nil {
		return x.ScheduleID
	}
	return nil
}

func (x *TransactionReceipt) GetScheduledTransactionID() *TransactionID {
	if x != nil {
		return x.ScheduledTransactionID
	}
	return nil
}

func (x *TransactionReceipt) GetSerialNumbers() []int64 {
	if x != nil {
		return x.SerialNumbers
	}
	return nil
}

func (x *TransactionReceipt) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

var File_transaction_receipt_proto protoreflect.FileDescriptor

const file_transaction_receipt_proto_rawDesc = "" +
	"\n" +
	"\x19transaction_receipt.proto\x12\x05proto\x1a\x11basic_types.proto\x1a\x13response_code.proto\x1a\x13exchange_rate.proto\"\xdf\x05\n" +
	"\x12TransactionReceipt\x12/\n" +
	"\x06status\x18\x01 \x01(\x0e2\x17.proto.ResponseCodeEnumR\x06status\x12.\n" +
	"\taccountID\x18\x02 \x01(\v2\x10.proto.AccountIDR\taccountID\x12%\n" +
	"\x06fileID\x18\x03 \x01(\v2\r.proto.FileIDR\x06fileID\x121\n" +
	"\n" +
	"contractID\x18\x04 \x01(\v2\x11.proto.ContractIDR\n" +
	"contractID\x12:\n" +
	"\fexchangeRate\x18\x05 \x01(\v2\x16.proto.ExchangeRateSetR\fexchangeRate\x12(\n" +
	"\atopicID\x18\x06 \x01(\v2\x0e.proto.TopicIDR\atopicID\x120\n" +
	"\x13topicSequenceNumber\x18\a \x01(\x04R\x13topicSequenceNumber\x12*\n" +
	"\x10topicRunningHash\x18\b \x01(\fR\x10topicRunningHash\x128\n" +
	"\x17topicRunningHashVersion\x18\t \x01(\x04R\x17topicRunningHashVersion\x12(\n" +
	"\atokenID\x18\n" +
	" \x01(\v2\x0e.proto.TokenIDR\atokenID\x12&\n" +
	"\x0enewTotalSupply\x18\v \x01(\x04R\x0enewTotalSupply\x121\n" +
	"\n" +
	"scheduleID\x18\f \x01(\v2\x11.proto.ScheduleIDR\n" +
	"scheduleID\x12L\n" +
	"\x16scheduledTransactionID\x18\r \x01(\v2\x14.proto.TransactionIDR\x16scheduledTransactionID\x12$\n" +
	"\rserialNumbers\x18\x0e \x03(\x03R\rserialNumbers\x12\x17\n" +
	"\anode_id\x18\x0f \x01(\x04R\x06nodeIdB&\n" +
	"\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3"

var (
	file_transaction_receipt_proto_rawDescOnce sync.Once
	file_transaction_receipt_proto_rawDescData []byte
)

func file_transaction_receipt_proto_rawDescGZIP() []byte {
	file_transaction_receipt_proto_rawDescOnce.Do(func() {
		file_transaction_receipt_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_transaction_receipt_proto_rawDesc), len(file_transaction_receipt_proto_rawDesc)))
	})
	return file_transaction_receipt_proto_rawDescData
}

var file_transaction_receipt_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_transaction_receipt_proto_goTypes = []any{
	(*TransactionReceipt)(nil), // 0: proto.TransactionReceipt
	(ResponseCodeEnum)(0),      // 1: proto.ResponseCodeEnum
	(*AccountID)(nil),          // 2: proto.AccountID
	(*FileID)(nil),             // 3: proto.FileID
	(*ContractID)(nil),         // 4: proto.ContractID
	(*ExchangeRateSet)(nil),    // 5: proto.ExchangeRateSet
	(*TopicID)(nil),            // 6: proto.TopicID
	(*TokenID)(nil),            // 7: proto.TokenID
	(*ScheduleID)(nil),         // 8: proto.ScheduleID
	(*TransactionID)(nil),      // 9: proto.TransactionID
}
var file_transaction_receipt_proto_depIdxs = []int32{
	1, // 0: proto.TransactionReceipt.status:type_name -> proto.ResponseCodeEnum
	2, // 1: proto.TransactionReceipt.accountID:type_name -> proto.AccountID
	3, // 2: proto.TransactionReceipt.fileID:type_name -> proto.FileID
	4, // 3: proto.TransactionReceipt.contractID:type_name -> proto.ContractID
	5, // 4: proto.TransactionReceipt.exchangeRate:type_name -> proto.ExchangeRateSet
	6, // 5: proto.TransactionReceipt.topicID:type_name -> proto.TopicID
	7, // 6: proto.TransactionReceipt.tokenID:type_name -> proto.TokenID
	8, // 7: proto.TransactionReceipt.scheduleID:type_name -> proto.ScheduleID
	9, // 8: proto.TransactionReceipt.scheduledTransactionID:type_name -> proto.TransactionID
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_transaction_receipt_proto_init() }
func file_transaction_receipt_proto_init() {
	if File_transaction_receipt_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_response_code_proto_init()
	file_exchange_rate_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_transaction_receipt_proto_rawDesc), len(file_transaction_receipt_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transaction_receipt_proto_goTypes,
		DependencyIndexes: file_transaction_receipt_proto_depIdxs,
		MessageInfos:      file_transaction_receipt_proto_msgTypes,
	}.Build()
	File_transaction_receipt_proto = out.File
	file_transaction_receipt_proto_goTypes = nil
	file_transaction_receipt_proto_depIdxs = nil
}
