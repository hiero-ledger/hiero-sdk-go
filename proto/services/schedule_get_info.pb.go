//*
// # Schedule Get Information
// Query body and response to retrieve information about a scheduled
// transaction.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: schedule_get_info.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Request for information about a scheduled transaction.
//
// If the requested schedule does not exist, the network SHALL respond
// with `INVALID_SCHEDULE_ID`.
type ScheduleGetInfoQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Standard information sent with every query operation.<br/>
	// This includes the signed payment and what kind of response is requested
	// (cost, state proof, both, or neither).
	Header *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// A schedule identifier.
	// <p>
	// This SHALL identify the schedule to retrieve.<br/>
	// This field is REQUIRED.
	ScheduleID *ScheduleID `protobuf:"bytes,2,opt,name=scheduleID,proto3" json:"scheduleID,omitempty"`
}

func (x *ScheduleGetInfoQuery) Reset() {
	*x = ScheduleGetInfoQuery{}
	mi := &file_schedule_get_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleGetInfoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleGetInfoQuery) ProtoMessage() {}

func (x *ScheduleGetInfoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_get_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleGetInfoQuery.ProtoReflect.Descriptor instead.
func (*ScheduleGetInfoQuery) Descriptor() ([]byte, []int) {
	return file_schedule_get_info_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduleGetInfoQuery) GetHeader() *QueryHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ScheduleGetInfoQuery) GetScheduleID() *ScheduleID {
	if x != nil {
		return x.ScheduleID
	}
	return nil
}

// *
// Information summarizing schedule state
type ScheduleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A schedule identifier.
	// <p>
	// This SHALL identify the schedule retrieved.
	ScheduleID *ScheduleID `protobuf:"bytes,1,opt,name=scheduleID,proto3" json:"scheduleID,omitempty"`
	// Types that are assignable to Data:
	//
	//	*ScheduleInfo_DeletionTime
	//	*ScheduleInfo_ExecutionTime
	Data isScheduleInfo_Data `protobuf_oneof:"data"`
	// *
	// An expiration timestamp.<br/>
	// This represents the time at which the schedule will expire. For a
	// long-term schedule (if enabled) this is when the schedule will be
	// executed, assuming it meets signature requirements at that time.
	// For a short-term schedule, this is the deadline to complete the
	// signature requirements for the scheduled transaction to execute.
	// Regardless of schedule type, the schedule will be removed from
	// state when it expires.
	// <p>
	// A schedule SHALL be removed from state when it expires.<br/>
	// A short-term schedule MUST meet signature requirements strictly
	// before expiration or it SHALL NOT be executed.<br/>
	// A long-term schedule SHALL be executed if, and only if, all signature
	// requirements for the scheduled transaction are met at expiration.<br/>
	// A long-term schedule SHALL NOT be executed if any signature requirement
	// for the scheduled transaction are not met at expiration.<br/>
	ExpirationTime *Timestamp `protobuf:"bytes,4,opt,name=expirationTime,proto3" json:"expirationTime,omitempty"`
	// *
	// A scheduled transaction.
	// <p>
	// This SHALL be a transaction type enabled in the network property
	// `scheduling.whitelist`, and SHALL NOT be any other
	// transaction type.<br/>
	// This transaction SHALL be executed if the schedule meets all signature
	// and execution time requirements for this transaction.<br/>
	// The signature requirements for this transaction SHALL be evaluated
	// at schedule creation, SHALL be reevaluated with each `signSchedule`
	// transaction, and, for long-term schedules, SHALL be reevaluated when
	// the schedule expires.<br/>
	ScheduledTransactionBody *SchedulableTransactionBody `protobuf:"bytes,5,opt,name=scheduledTransactionBody,proto3" json:"scheduledTransactionBody,omitempty"`
	// *
	// A short description for this schedule.
	// <p>
	// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
	// (default 100) bytes when encoded as UTF-8.
	Memo string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// The key used to delete the schedule from state
	AdminKey *Key `protobuf:"bytes,7,opt,name=adminKey,proto3" json:"adminKey,omitempty"`
	// *
	// A list of "valid" signatures for this schedule.<br/>
	// This list contains only "primitive" (i.e. cryptographic or contract)
	// signatures. The full signature requirements for the scheduled
	// transaction are evaluated as if this list of keys had signed the
	// scheduled transaction directly.
	// <p>
	// This list SHALL contain every "primitive" key that has signed the
	// original `createSchedule`, or any subsequent
	// `signSchedule` transaction.<br/>
	// This list MAY elide any signature not likely to be required by the
	// scheduled transaction. Such requirement SHOULD be evaluated when the
	// signature is presented (i.e. during evaluation of a `createSchedule` or
	// `signSchedule` transaction).
	Signers *KeyList `protobuf:"bytes,8,opt,name=signers,proto3" json:"signers,omitempty"`
	// *
	// An account identifier.
	// <p>
	// This SHALL identify the account that created this schedule.
	CreatorAccountID *AccountID `protobuf:"bytes,9,opt,name=creatorAccountID,proto3" json:"creatorAccountID,omitempty"`
	// *
	// An account identifier.
	// <p>
	// The identified account SHALL pay the full transaction fee for the
	// scheduled transaction _when it executes_.
	PayerAccountID *AccountID `protobuf:"bytes,10,opt,name=payerAccountID,proto3" json:"payerAccountID,omitempty"`
	// *
	// A transaction identifier.
	// <p>
	// This SHALL be recorded as the transaction identifier for the
	// _scheduled_ transaction, if (and when) it is executed.
	ScheduledTransactionID *TransactionID `protobuf:"bytes,11,opt,name=scheduledTransactionID,proto3" json:"scheduledTransactionID,omitempty"`
	// *
	// The ledger ID of the network that generated this response.
	// <p>
	// This value SHALL identify the distributed ledger that responded to
	// this query.
	LedgerId []byte `protobuf:"bytes,12,opt,name=ledger_id,json=ledgerId,proto3" json:"ledger_id,omitempty"`
	// *
	// A flag indicating this schedule will execute when it expires.
	// <p>
	// If this field is set
	// <ul>
	//
	//	<li>This schedule SHALL be considered a "long-term" schedule.</li>
	//	<li>This schedule SHALL be evaluated when the network consensus time
	//	    reaches the `expirationTime`, and if the signature requirements
	//	    for the scheduled transaction are met at that time, the
	//	    scheduled transaction SHALL be executed.</li>
	//	<li>This schedule SHALL NOT be executed before the network consensus
	//	    time reaches the `expirationTime`.</li>
	//
	// </ul>
	// If this field is not set
	// <ul>
	//
	//	<li>This schedule SHALL be considered a "short-term" schedule.</li>
	//	<li>This schedule SHALL be evaluated when created, and reevaluated
	//	    with each `signSchedule` transaction, and if the signature
	//	    requirements for the scheduled transaction are met at that time,
	//	    the scheduled transaction SHALL be executed immediately.</li>
	//	<li>This schedule SHALL be executed as soon as the signature
	//	    requirements are met, and MUST be executed before the network
	//	    consensus time reaches the `expirationTime`, if at all.</li>
	//
	// </ul>
	WaitForExpiry bool `protobuf:"varint,13,opt,name=wait_for_expiry,json=waitForExpiry,proto3" json:"wait_for_expiry,omitempty"`
}

func (x *ScheduleInfo) Reset() {
	*x = ScheduleInfo{}
	mi := &file_schedule_get_info_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInfo) ProtoMessage() {}

func (x *ScheduleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_get_info_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInfo.ProtoReflect.Descriptor instead.
func (*ScheduleInfo) Descriptor() ([]byte, []int) {
	return file_schedule_get_info_proto_rawDescGZIP(), []int{1}
}

func (x *ScheduleInfo) GetScheduleID() *ScheduleID {
	if x != nil {
		return x.ScheduleID
	}
	return nil
}

func (m *ScheduleInfo) GetData() isScheduleInfo_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ScheduleInfo) GetDeletionTime() *Timestamp {
	if x, ok := x.GetData().(*ScheduleInfo_DeletionTime); ok {
		return x.DeletionTime
	}
	return nil
}

func (x *ScheduleInfo) GetExecutionTime() *Timestamp {
	if x, ok := x.GetData().(*ScheduleInfo_ExecutionTime); ok {
		return x.ExecutionTime
	}
	return nil
}

func (x *ScheduleInfo) GetExpirationTime() *Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

func (x *ScheduleInfo) GetScheduledTransactionBody() *SchedulableTransactionBody {
	if x != nil {
		return x.ScheduledTransactionBody
	}
	return nil
}

func (x *ScheduleInfo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ScheduleInfo) GetAdminKey() *Key {
	if x != nil {
		return x.AdminKey
	}
	return nil
}

func (x *ScheduleInfo) GetSigners() *KeyList {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *ScheduleInfo) GetCreatorAccountID() *AccountID {
	if x != nil {
		return x.CreatorAccountID
	}
	return nil
}

func (x *ScheduleInfo) GetPayerAccountID() *AccountID {
	if x != nil {
		return x.PayerAccountID
	}
	return nil
}

func (x *ScheduleInfo) GetScheduledTransactionID() *TransactionID {
	if x != nil {
		return x.ScheduledTransactionID
	}
	return nil
}

func (x *ScheduleInfo) GetLedgerId() []byte {
	if x != nil {
		return x.LedgerId
	}
	return nil
}

func (x *ScheduleInfo) GetWaitForExpiry() bool {
	if x != nil {
		return x.WaitForExpiry
	}
	return false
}

type isScheduleInfo_Data interface {
	isScheduleInfo_Data()
}

type ScheduleInfo_DeletionTime struct {
	// *
	// A deletion timestamp.
	// <p>
	// If the schedule was deleted, this SHALL be set to the consensus
	// timestamp of the `deleteSchedule` transaction.<br/>
	// If the schedule is _not_ deleted, this field SHALL NOT be set.
	DeletionTime *Timestamp `protobuf:"bytes,2,opt,name=deletion_time,json=deletionTime,proto3,oneof"`
}

type ScheduleInfo_ExecutionTime struct {
	// *
	// An execution timestamp.
	// <p>
	// If the schedule was completed, and the _scheduled_ transaction
	// executed, this SHALL be set to the consensus timestamp of the
	// transaction that initiated that execution.<br/>
	// If the schedule is _not_ complete, this field SHALL NOT be set.
	ExecutionTime *Timestamp `protobuf:"bytes,3,opt,name=execution_time,json=executionTime,proto3,oneof"`
}

func (*ScheduleInfo_DeletionTime) isScheduleInfo_Data() {}

func (*ScheduleInfo_ExecutionTime) isScheduleInfo_Data() {}

// *
// A response message for a `getScheduleInfo` query.
type ScheduleGetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The standard response information for queries.<br/>
	// This includes the values requested in the `QueryHeader`
	// (cost, state proof, both, or neither).
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// Detail information for a schedule.
	// <p>
	// This field SHALL contain all available schedule detail.
	ScheduleInfo *ScheduleInfo `protobuf:"bytes,2,opt,name=scheduleInfo,proto3" json:"scheduleInfo,omitempty"`
}

func (x *ScheduleGetInfoResponse) Reset() {
	*x = ScheduleGetInfoResponse{}
	mi := &file_schedule_get_info_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleGetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleGetInfoResponse) ProtoMessage() {}

func (x *ScheduleGetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_get_info_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleGetInfoResponse.ProtoReflect.Descriptor instead.
func (*ScheduleGetInfoResponse) Descriptor() ([]byte, []int) {
	return file_schedule_get_info_proto_rawDescGZIP(), []int{2}
}

func (x *ScheduleGetInfoResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ScheduleGetInfoResponse) GetScheduleInfo() *ScheduleInfo {
	if x != nil {
		return x.ScheduleInfo
	}
	return nil
}

var File_schedule_get_info_proto protoreflect.FileDescriptor

var file_schedule_get_info_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x75, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x22, 0xc7, 0x05, 0x0a, 0x0c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x44, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x37,
	0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x18,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x18, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x26, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x73, 0x12, 0x3c, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x10, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x38, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x16, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52,
	0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77,
	0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schedule_get_info_proto_rawDescOnce sync.Once
	file_schedule_get_info_proto_rawDescData = file_schedule_get_info_proto_rawDesc
)

func file_schedule_get_info_proto_rawDescGZIP() []byte {
	file_schedule_get_info_proto_rawDescOnce.Do(func() {
		file_schedule_get_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_schedule_get_info_proto_rawDescData)
	})
	return file_schedule_get_info_proto_rawDescData
}

var file_schedule_get_info_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_schedule_get_info_proto_goTypes = []any{
	(*ScheduleGetInfoQuery)(nil),       // 0: proto.ScheduleGetInfoQuery
	(*ScheduleInfo)(nil),               // 1: proto.ScheduleInfo
	(*ScheduleGetInfoResponse)(nil),    // 2: proto.ScheduleGetInfoResponse
	(*QueryHeader)(nil),                // 3: proto.QueryHeader
	(*ScheduleID)(nil),                 // 4: proto.ScheduleID
	(*Timestamp)(nil),                  // 5: proto.Timestamp
	(*SchedulableTransactionBody)(nil), // 6: proto.SchedulableTransactionBody
	(*Key)(nil),                        // 7: proto.Key
	(*KeyList)(nil),                    // 8: proto.KeyList
	(*AccountID)(nil),                  // 9: proto.AccountID
	(*TransactionID)(nil),              // 10: proto.TransactionID
	(*ResponseHeader)(nil),             // 11: proto.ResponseHeader
}
var file_schedule_get_info_proto_depIdxs = []int32{
	3,  // 0: proto.ScheduleGetInfoQuery.header:type_name -> proto.QueryHeader
	4,  // 1: proto.ScheduleGetInfoQuery.scheduleID:type_name -> proto.ScheduleID
	4,  // 2: proto.ScheduleInfo.scheduleID:type_name -> proto.ScheduleID
	5,  // 3: proto.ScheduleInfo.deletion_time:type_name -> proto.Timestamp
	5,  // 4: proto.ScheduleInfo.execution_time:type_name -> proto.Timestamp
	5,  // 5: proto.ScheduleInfo.expirationTime:type_name -> proto.Timestamp
	6,  // 6: proto.ScheduleInfo.scheduledTransactionBody:type_name -> proto.SchedulableTransactionBody
	7,  // 7: proto.ScheduleInfo.adminKey:type_name -> proto.Key
	8,  // 8: proto.ScheduleInfo.signers:type_name -> proto.KeyList
	9,  // 9: proto.ScheduleInfo.creatorAccountID:type_name -> proto.AccountID
	9,  // 10: proto.ScheduleInfo.payerAccountID:type_name -> proto.AccountID
	10, // 11: proto.ScheduleInfo.scheduledTransactionID:type_name -> proto.TransactionID
	11, // 12: proto.ScheduleGetInfoResponse.header:type_name -> proto.ResponseHeader
	1,  // 13: proto.ScheduleGetInfoResponse.scheduleInfo:type_name -> proto.ScheduleInfo
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_schedule_get_info_proto_init() }
func file_schedule_get_info_proto_init() {
	if File_schedule_get_info_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_timestamp_proto_init()
	file_query_header_proto_init()
	file_response_header_proto_init()
	file_schedulable_transaction_body_proto_init()
	file_schedule_get_info_proto_msgTypes[1].OneofWrappers = []any{
		(*ScheduleInfo_DeletionTime)(nil),
		(*ScheduleInfo_ExecutionTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schedule_get_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schedule_get_info_proto_goTypes,
		DependencyIndexes: file_schedule_get_info_proto_depIdxs,
		MessageInfos:      file_schedule_get_info_proto_msgTypes,
	}.Build()
	File_schedule_get_info_proto = out.File
	file_schedule_get_info_proto_rawDesc = nil
	file_schedule_get_info_proto_goTypes = nil
	file_schedule_get_info_proto_depIdxs = nil
}
