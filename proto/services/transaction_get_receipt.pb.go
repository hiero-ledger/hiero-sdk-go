//*
// # Get Transaction Receipt
// This query is central to client interactions. A client must query
// the network for the "receipt" after a transaction is submitted to know
// whether the transaction succeeded and the consensus result.
//
// > Implementation Note
// >> This query is _defined_ for "Crypto" service, but is _implemented_ by
// >> the "Network Admin" service.
//
// > Note
// >> The mechanism for transaction receipts and results is subject to
// >> considerable change in the near future. Clients heavily dependent
// >> on direct network queries for transaction receipts may consider
// >> changes needed to query a mirror node for transaction receipts
// >> and results instead.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: transaction_get_receipt.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A query to retrieve a transaction receipt.
// This query retrieves the post-consensus (final) result of a transaction.
// A transaction receipt may not be available if queried too early
// (less than 5-10 seconds), or too late (more than 3 minutes). If a receipt
// is available, it contains basic transaction results. A query to a mirror
// node (or other archival system) is required to obtain full detail for a
// transaction, or any result after the basic receipt time period.
//
// This query is "free". The payment field in the header MUST be empty.<br/>
// If a receipt is not available, the response SHALL be `UNKNOWN`.<br/>
// A transaction receipt SHALL be available after the network reaches
// consensus for a transaction.<br/>
// A transaction receipt SHALL NOT be available after the end of the network
// configured "receipt period", typically three(3) minutes.
//
// <dl>
//
//	 <dt>What is the "first" transaction?</dt>
//	 <dd>The "first" transaction SHALL be the the transaction with
//	     the earliest consensus time and a status that is neither
//	     `INVALID_NODE_ACCOUNT` nor `INVALID_PAYER_SIGNATURE`.<br/>
//	     If no transaction is found meeting this status criteria, the
//	     "first" transaction SHALL be the transaction with the earliest
//	     consensus time.</dd>
//	<dt>What is a "child" transaction?</dt>
//	<dd>A "child" transaction is any transaction created in the process of
//	    completing another transaction. These are most common with a smart
//	    contract call, where a call to a contract may initiate one or more
//	    additional transactions to complete a complex process.</dd>
//
// </dl>
type TransactionGetReceiptQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Standard information sent with every query operation.<br/>
	// This includes the signed payment and what kind of response is requested
	// (cost, state proof, both, or neither).
	Header *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// A transaction identifier.
	// <p>
	// This MUST contain the full identifier, as submitted, for the
	// transaction to query.
	TransactionID *TransactionID `protobuf:"bytes,2,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	// *
	// A flag to request duplicates.
	// <p>
	// If set, every transaction receipt within the receipt period that
	// matches the requested transaction identifier SHALL be returned.<br/>
	// If not set, duplicate transactions SHALL NOT be returned.<br/>
	// If not set, only the receipt for the first matching transaction to
	// reach consensus SHALL be returned.
	IncludeDuplicates bool `protobuf:"varint,3,opt,name=includeDuplicates,proto3" json:"includeDuplicates,omitempty"`
	// *
	// A flag to request "child" receipts.
	// <p>
	// If set, the response SHALL include receipts for each child transaction
	// executed as part of the requested parent transaction.<br/>
	// If not set, the response SHALL NOT include any receipts for child
	// transactions.
	IncludeChildReceipts bool `protobuf:"varint,4,opt,name=include_child_receipts,json=includeChildReceipts,proto3" json:"include_child_receipts,omitempty"`
}

func (x *TransactionGetReceiptQuery) Reset() {
	*x = TransactionGetReceiptQuery{}
	mi := &file_transaction_get_receipt_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionGetReceiptQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionGetReceiptQuery) ProtoMessage() {}

func (x *TransactionGetReceiptQuery) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_get_receipt_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionGetReceiptQuery.ProtoReflect.Descriptor instead.
func (*TransactionGetReceiptQuery) Descriptor() ([]byte, []int) {
	return file_transaction_get_receipt_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionGetReceiptQuery) GetHeader() *QueryHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TransactionGetReceiptQuery) GetTransactionID() *TransactionID {
	if x != nil {
		return x.TransactionID
	}
	return nil
}

func (x *TransactionGetReceiptQuery) GetIncludeDuplicates() bool {
	if x != nil {
		return x.IncludeDuplicates
	}
	return false
}

func (x *TransactionGetReceiptQuery) GetIncludeChildReceipts() bool {
	if x != nil {
		return x.IncludeChildReceipts
	}
	return false
}

// *
// Response message for a `getTransactionReceipts` query.
//
// The `receipt` field SHALL return the receipt for the "first" transaction
// that matches the transaction identifier requested.<br/>
// If receipts for duplicate transactions are requested, those duplicate
// receipts SHALL be present in the `duplicateTransactionReceipts` list.<br/>
// If receipts for child transactions are requested, those child receipts
// SHALL be present in the `child_transaction_receipts` list.<br/>
// A state proof SHALL NOT be provided for this response; transaction receipts
// are not retained in network state.
//
// <dl>
//
//	 <dt>What is the "first" transaction?</dt>
//	 <dd>The "first" transaction receipt SHALL be the receipt for the
//	     first transaction with status that is neither
//	     `INVALID_NODE_ACCOUNT` nor `INVALID_PAYER_SIGNATURE`.<br/>
//	     If no transaction is found meeting the status criteria, the
//	     "first" transaction SHALL be the first transaction by
//	     consensus time.</dd>
//	<dt>What is a "child" transaction?</dt>
//	<dd>A "child" transaction is any transaction created in the process of
//	    completing another transaction. These are most common with a smart
//	    contract call, where a call to a contract may initiate one or more
//	    additional transactions to complete a complex process.</dd>
//
// </dl>
type TransactionGetReceiptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The standard response information for queries.<br/>
	// This includes the values requested in the `QueryHeader`
	// (cost, state proof, both, or neither).
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// A transaction receipt.
	// <p>
	// This SHALL be the receipt for the "first" transaction that matches
	// the transaction identifier requested.<br/>
	// If the identified transaction has not reached consensus, this receipt
	// SHALL have a `status` of `UNKNOWN`.<br/>
	// If the identified transaction reached consensus prior to the current
	// configured receipt period (typically the last 180 seconds), this receipt
	// SHALL have a `status` of `UNKNOWN`.
	Receipt *TransactionReceipt `protobuf:"bytes,2,opt,name=receipt,proto3" json:"receipt,omitempty"`
	// *
	// A list of duplicate transaction receipts.
	// <p>
	// If the request set the `includeDuplicates` flat, this list SHALL
	// include the receipts for each duplicate transaction associated to the
	// requested transaction identifier.
	// If the request did not set the `includeDuplicates` flag, this list
	// SHALL be empty.<br/>
	// If the `receipt` status is `UNKNOWN`, this list SHALL be empty.<br/>
	// This list SHALL be in order by consensus timestamp.
	DuplicateTransactionReceipts []*TransactionReceipt `protobuf:"bytes,4,rep,name=duplicateTransactionReceipts,proto3" json:"duplicateTransactionReceipts,omitempty"`
	// *
	// A list of receipts for all child transactions spawned by the requested
	// transaction.
	// <p>
	// If the request set the `include_child_receipts` flag, this list SHALL
	// include receipts for each child transaction executed as part of the
	// requested parent transaction.<br/>
	// If the request did not set the `include_child_receipts` flag, this
	// list SHALL be empty. <br/>
	// If the parent transaction did not initiate any child transactions
	// this list SHALL be empty.<br/>
	// If the `receipt` status is `UNKNOWN`, this list SHALL be empty.<br/>
	// This list SHALL be in order by consensus timestamp.
	ChildTransactionReceipts []*TransactionReceipt `protobuf:"bytes,5,rep,name=child_transaction_receipts,json=childTransactionReceipts,proto3" json:"child_transaction_receipts,omitempty"`
}

func (x *TransactionGetReceiptResponse) Reset() {
	*x = TransactionGetReceiptResponse{}
	mi := &file_transaction_get_receipt_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionGetReceiptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionGetReceiptResponse) ProtoMessage() {}

func (x *TransactionGetReceiptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_get_receipt_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionGetReceiptResponse.ProtoReflect.Descriptor instead.
func (*TransactionGetReceiptResponse) Descriptor() ([]byte, []int) {
	return file_transaction_get_receipt_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionGetReceiptResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TransactionGetReceiptResponse) GetReceipt() *TransactionReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *TransactionGetReceiptResponse) GetDuplicateTransactionReceipts() []*TransactionReceipt {
	if x != nil {
		return x.DuplicateTransactionReceipts
	}
	return nil
}

func (x *TransactionGetReceiptResponse) GetChildTransactionReceipts() []*TransactionReceipt {
	if x != nil {
		return x.ChildTransactionReceipts
	}
	return nil
}

var File_transaction_get_receipt_proto protoreflect.FileDescriptor

var file_transaction_get_receipt_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe8, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x1d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x12, 0x5d, 0x0a, 0x1c, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x52, 0x1c, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x12,
	0x57, 0x0a, 0x1a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x18,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_get_receipt_proto_rawDescOnce sync.Once
	file_transaction_get_receipt_proto_rawDescData = file_transaction_get_receipt_proto_rawDesc
)

func file_transaction_get_receipt_proto_rawDescGZIP() []byte {
	file_transaction_get_receipt_proto_rawDescOnce.Do(func() {
		file_transaction_get_receipt_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_get_receipt_proto_rawDescData)
	})
	return file_transaction_get_receipt_proto_rawDescData
}

var file_transaction_get_receipt_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_transaction_get_receipt_proto_goTypes = []any{
	(*TransactionGetReceiptQuery)(nil),    // 0: proto.TransactionGetReceiptQuery
	(*TransactionGetReceiptResponse)(nil), // 1: proto.TransactionGetReceiptResponse
	(*QueryHeader)(nil),                   // 2: proto.QueryHeader
	(*TransactionID)(nil),                 // 3: proto.TransactionID
	(*ResponseHeader)(nil),                // 4: proto.ResponseHeader
	(*TransactionReceipt)(nil),            // 5: proto.TransactionReceipt
}
var file_transaction_get_receipt_proto_depIdxs = []int32{
	2, // 0: proto.TransactionGetReceiptQuery.header:type_name -> proto.QueryHeader
	3, // 1: proto.TransactionGetReceiptQuery.transactionID:type_name -> proto.TransactionID
	4, // 2: proto.TransactionGetReceiptResponse.header:type_name -> proto.ResponseHeader
	5, // 3: proto.TransactionGetReceiptResponse.receipt:type_name -> proto.TransactionReceipt
	5, // 4: proto.TransactionGetReceiptResponse.duplicateTransactionReceipts:type_name -> proto.TransactionReceipt
	5, // 5: proto.TransactionGetReceiptResponse.child_transaction_receipts:type_name -> proto.TransactionReceipt
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_transaction_get_receipt_proto_init() }
func file_transaction_get_receipt_proto_init() {
	if File_transaction_get_receipt_proto != nil {
		return
	}
	file_transaction_receipt_proto_init()
	file_basic_types_proto_init()
	file_query_header_proto_init()
	file_response_header_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_get_receipt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transaction_get_receipt_proto_goTypes,
		DependencyIndexes: file_transaction_get_receipt_proto_depIdxs,
		MessageInfos:      file_transaction_get_receipt_proto_msgTypes,
	}.Build()
	File_transaction_get_receipt_proto = out.File
	file_transaction_get_receipt_proto_rawDesc = nil
	file_transaction_get_receipt_proto_goTypes = nil
	file_transaction_get_receipt_proto_depIdxs = nil
}
