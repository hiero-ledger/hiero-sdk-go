//*
// # Get Account Details
// A standard query to inspect the full detail of an account.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: get_account_details.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Request detail information about an account.
//
// The returned information SHALL include balance and allowances.<br/>
// The returned information SHALL NOT include a list of account records.
//
// #### Important
// This query is a _privileged_ query. Only "system" accounts SHALL be
// permitted to submit this query.
type GetAccountDetailsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Standard information sent with every query operation.<br/>
	// This includes the signed payment and what kind of response is requested
	// (cost, state proof, both, or neither).
	Header *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// An account ID for which information is requested
	// <p>
	// This value SHALL identify the account to be queried.<br/>
	// This value MUST identify a valid account.<br/>
	// This field is REQUIRED.
	AccountId *AccountID `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetAccountDetailsQuery) Reset() {
	*x = GetAccountDetailsQuery{}
	mi := &file_get_account_details_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountDetailsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountDetailsQuery) ProtoMessage() {}

func (x *GetAccountDetailsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_get_account_details_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountDetailsQuery.ProtoReflect.Descriptor instead.
func (*GetAccountDetailsQuery) Descriptor() ([]byte, []int) {
	return file_get_account_details_proto_rawDescGZIP(), []int{0}
}

func (x *GetAccountDetailsQuery) GetHeader() *QueryHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetAccountDetailsQuery) GetAccountId() *AccountID {
	if x != nil {
		return x.AccountId
	}
	return nil
}

// *
// A response to a `GetAccountDetailsQuery`.
//
// This SHALL contain the account details if requested and successful.
type GetAccountDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The standard response information for queries.<br/>
	// This includes the values requested in the `QueryHeader`
	// (cost, state proof, both, or neither).
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// *
	// Details of the account.
	// <p>
	// A state proof MAY be generated for this field.
	AccountDetails *GetAccountDetailsResponse_AccountDetails `protobuf:"bytes,2,opt,name=account_details,json=accountDetails,proto3" json:"account_details,omitempty"`
}

func (x *GetAccountDetailsResponse) Reset() {
	*x = GetAccountDetailsResponse{}
	mi := &file_get_account_details_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountDetailsResponse) ProtoMessage() {}

func (x *GetAccountDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_get_account_details_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetAccountDetailsResponse) Descriptor() ([]byte, []int) {
	return file_get_account_details_proto_rawDescGZIP(), []int{1}
}

func (x *GetAccountDetailsResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetAccountDetailsResponse) GetAccountDetails() *GetAccountDetailsResponse_AccountDetails {
	if x != nil {
		return x.AccountDetails
	}
	return nil
}

// *
// Permission granted by one account (the "funding" account) to another
// account (the "spender" account) that allows the spender to spend a
// specified amount of HBAR owned by the funding account.
//
// An allowance SHALL NOT transfer any HBAR directly, it only permits
// transactions signed only by the spender account to transfer HBAR, up
// to the amount specified, from the funding account.
//
// Once the specified amount is spent, the allowance SHALL be consumed
// and a new allowance SHALL be required before that spending account
// may spend additional HBAR from the funding account.
type GrantedCryptoAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The identifier for the spending account associated with this allowance.
	// <p>
	// This account SHALL be permitted to sign transactions to spend
	// HBAR from the funding/allowing account.<br/>
	// This permission SHALL be limited to no more than the specified `amount`.
	Spender *AccountID `protobuf:"bytes,1,opt,name=spender,proto3" json:"spender,omitempty"`
	// *
	// The maximum amount that the spender account may transfer within
	// the scope of this allowance.
	// <p>
	// This allowance SHALL be consumed if any combination of transfers
	// authorized via this allowance meet this value in total.<br/>
	// This value MUST be specified in tinybar (i.e. 10<sup>-8</sup> HBAR).
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *GrantedCryptoAllowance) Reset() {
	*x = GrantedCryptoAllowance{}
	mi := &file_get_account_details_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrantedCryptoAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantedCryptoAllowance) ProtoMessage() {}

func (x *GrantedCryptoAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_get_account_details_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantedCryptoAllowance.ProtoReflect.Descriptor instead.
func (*GrantedCryptoAllowance) Descriptor() ([]byte, []int) {
	return file_get_account_details_proto_rawDescGZIP(), []int{2}
}

func (x *GrantedCryptoAllowance) GetSpender() *AccountID {
	if x != nil {
		return x.Spender
	}
	return nil
}

func (x *GrantedCryptoAllowance) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// *
// Permission granted by one account (the "funding" account) to another
// account (the "spender" account) that allows the spender to transfer
// all serial numbers of a specific non-fungible/unique token (NFT)
// collection owned by the funding account.<br/>
// This is a broad permission, as it does not matter how many NFTs of the
// specified collection the funding account owns, the spender MAY dispose
// of any or all of them with this allowance.<br/>
// Each token type (typically a collection of NFTs) SHALL require
// a separate allowance.<br/>
// Allowances for a specific serial number MUST be directly associated
// with that specific non-fungible/unique token, rather than
// the holding account.
//
// An allowance SHALL NOT transfer any tokens directly, it only permits
// transactions signed only by the spender account to transfer any
// non-fungible/unique tokens of the specified type owned by
// the funding account.
type GrantedNftAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The identifier for the token associated with this allowance.
	// <p>
	// This token MUST be a non-fungible/unique token.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// *
	// The identifier for the spending account associated with this allowance.
	// <p>
	// This account SHALL be permitted to sign transactions to spend
	// tokens of the associated token type from the funding/allowing account.
	Spender *AccountID `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
}

func (x *GrantedNftAllowance) Reset() {
	*x = GrantedNftAllowance{}
	mi := &file_get_account_details_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrantedNftAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantedNftAllowance) ProtoMessage() {}

func (x *GrantedNftAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_get_account_details_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantedNftAllowance.ProtoReflect.Descriptor instead.
func (*GrantedNftAllowance) Descriptor() ([]byte, []int) {
	return file_get_account_details_proto_rawDescGZIP(), []int{3}
}

func (x *GrantedNftAllowance) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *GrantedNftAllowance) GetSpender() *AccountID {
	if x != nil {
		return x.Spender
	}
	return nil
}

// *
// Permission granted by one account (the "funding" account) to another
// account (the "spender" account) that allows the spender to spend a
// specified amount of a specific non-HBAR fungible token from the
// balance owned by the funding account.
//
// An allowance SHALL NOT transfer any tokens directly, it only permits
// transactions signed only by the spender account to transfer tokens
// of the specified type, up to the amount specified, from the funding account.
//
// Once the specified amount is spent, the allowance SHALL be consumed
// and a new allowance SHALL be required before that spending account
// may spend additional tokens from the funding account.
type GrantedTokenAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The identifier for the token associated with this allowance.
	// <p>
	// This token MUST be a fungible/common token.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// *
	// The identifier for the spending account associated with this allowance.
	// <p>
	// This account SHALL be permitted to sign transactions to spend tokens
	// of the associated token type from the funding/allowing account.<br/>
	// This permission SHALL be limited to no more than the specified `amount`.
	Spender *AccountID `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	// The maximum amount that the spender account may transfer within
	// the scope of this allowance.
	// <p>
	// This allowance SHALL be consumed if any combination of transfers
	// authorized via this allowance meet this value in total.<br/>
	// This value MUST be specified in the smallest units of the relevant
	// token (i.e. 10<sup>-decimals</sup> whole tokens).
	Amount int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *GrantedTokenAllowance) Reset() {
	*x = GrantedTokenAllowance{}
	mi := &file_get_account_details_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrantedTokenAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantedTokenAllowance) ProtoMessage() {}

func (x *GrantedTokenAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_get_account_details_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantedTokenAllowance.ProtoReflect.Descriptor instead.
func (*GrantedTokenAllowance) Descriptor() ([]byte, []int) {
	return file_get_account_details_proto_rawDescGZIP(), []int{4}
}

func (x *GrantedTokenAllowance) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *GrantedTokenAllowance) GetSpender() *AccountID {
	if x != nil {
		return x.Spender
	}
	return nil
}

func (x *GrantedTokenAllowance) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// *
// Information describing a single Account in the Hedera distributed ledger.
//
// #### Attributes
// Each Account may have a unique three-part identifier, a Key, and one or
// more token balances. Accounts also have an alias, which has multiple
// forms, and may be set automatically. Several additional items are
// associated with the Account to enable full functionality.
//
// #### Expiration
// Accounts, as most items in the network, have an expiration time, recorded
// as a `Timestamp`, and must be "renewed" for a small fee at expiration.
// This helps to reduce the amount of inactive accounts retained in state.
// Another account may be designated to pay any renewal fees and
// automatically renew the account for (by default) 30-90 days at a time as
// a means to optionally ensure important accounts remain active.
//
// ### Staking
// Accounts may participate in securing the network by "staking" the account
// balances to a particular network node, and receive a portion of network
// fees as a reward. An account may optionally decline these rewards but
// still stake its balances.
//
// #### Transfer Restrictions
// An account may optionally require that inbound transfer transactions be
// signed by that account as receiver (in addition to any other signatures
// required, including sender).
type GetAccountDetailsResponse_AccountDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The unique ID of this account.
	// <p>
	// An account ID, when assigned to this field, SHALL be of
	// the form `shard.realm.number`.<br/>
	// Transactions MAY reference the account by alias, but the account
	// itself MUST always have a purely numeric identifier. This numeric
	// ID is the value used to reference the account in query responses,
	// transaction receipts, transaction records, and the block stream.
	AccountId *AccountID `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// *
	// A Solidity ID.<br/>
	// This identifies the contract instance, and the `Account` associated
	// with that contract instance.
	// <p>
	// This SHALL be populated if this account is a smart contract, and
	// SHALL NOT be populated otherwise.<br/>
	// This SHALL be formatted as a string according to Solidity ID
	// standards.
	ContractAccountId string `protobuf:"bytes,2,opt,name=contract_account_id,json=contractAccountId,proto3" json:"contract_account_id,omitempty"`
	// *
	// A boolean indicating that this account is deleted.
	Deleted bool `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// *
	// Replaced by StakingInfo.<br/>
	// ID of the account to which this account is staking its balances. If
	// this account is not currently staking its balances, then this field,
	// if set, SHALL be the sentinel value of `0.0.0`.
	//
	// Deprecated: Marked as deprecated in get_account_details.proto.
	ProxyAccountId *AccountID `protobuf:"bytes,4,opt,name=proxy_account_id,json=proxyAccountId,proto3" json:"proxy_account_id,omitempty"`
	// *
	// The total amount of tinybar proxy staked to this account.
	ProxyReceived int64 `protobuf:"varint,5,opt,name=proxy_received,json=proxyReceived,proto3" json:"proxy_received,omitempty"`
	// *
	// The key to be used to sign transactions from this account, if any.
	// <p>
	// This key SHALL NOT be set for hollow accounts until the account
	// is finalized.<br/>
	// This key SHALL be set on all other accounts, except for certain
	// immutable accounts (0.0.800 and 0.0.801) necessary for network
	// function and otherwise secured by the governing council.
	Key *Key `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	// *
	// The HBAR balance of this account, in tinybar (10<sup>-8</sup> HBAR).
	// <p>
	// This value SHALL always be a whole number.
	Balance uint64 `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	// *
	// A boolean indicating that the account requires a receiver signature
	// for inbound token transfer transactions.
	// <p>
	// If this value is `true` then a transaction to transfer tokens to this
	// account SHALL NOT succeed unless this account has signed the
	// transfer transaction.
	ReceiverSigRequired bool `protobuf:"varint,8,opt,name=receiver_sig_required,json=receiverSigRequired,proto3" json:"receiver_sig_required,omitempty"`
	// *
	// The current expiration time for this account.
	// <p>
	// This account SHALL be due standard renewal fees when the network
	// consensus time exceeds this time.<br/>
	// If rent and expiration are enabled for the network, and automatic
	// renewal is enabled for this account, renewal fees SHALL be charged
	// after this time, and, if charged, the expiration time SHALL be
	// extended for another renewal period.<br/>
	// This account MAY be expired and removed from state at any point
	// after this time if not renewed.<br/>
	// An account holder MAY extend this time by submitting an account
	// update transaction to modify expiration time, subject to the current
	// maximum expiration time for the network.
	ExpirationTime *Timestamp `protobuf:"bytes,9,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	// *
	// A duration to extend this account's expiration.
	// <p>
	// The network SHALL extend the account's expiration by this
	// duration, if funds are available, upon automatic renewal.<br/>
	// This SHALL NOT apply if the account is already deleted
	// upon expiration.<br/>
	// If this is not provided in an allowed range on account creation, the
	// transaction SHALL fail with INVALID_AUTO_RENEWAL_PERIOD. The default
	// values for the minimum period and maximum period are currently
	// 30 days and 90 days, respectively.
	AutoRenewPeriod *Duration `protobuf:"bytes,10,opt,name=auto_renew_period,json=autoRenewPeriod,proto3" json:"auto_renew_period,omitempty"`
	// *
	// As of `HIP-367`, which enabled unlimited token associations, the
	// potential scale for this value requires that users consult a mirror
	// node for this information. Only the top `maxRelsPerInfoQuery`
	// (default 1000) relationships will be returned by this query.<br/>
	// A list of tokens to which this account is "associated", enabling the
	// transfer of that token type by this account.
	TokenRelationships []*TokenRelationship `protobuf:"bytes,11,rep,name=token_relationships,json=tokenRelationships,proto3" json:"token_relationships,omitempty"`
	// *
	// A short description of this account.
	// <p>
	// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
	// (default 100) bytes when encoded as UTF-8.
	Memo string `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// The total number of non-fungible/unique tokens owned by this account.
	OwnedNfts int64 `protobuf:"varint,13,opt,name=owned_nfts,json=ownedNfts,proto3" json:"owned_nfts,omitempty"`
	// *
	// The maximum number of tokens that can be auto-associated with the
	// account.
	// <p>
	// If this is less than or equal to `used_auto_associations` (or 0),
	// then this account MUST manually associate with a token before
	// transacting in that token.<br/>
	// Following HIP-904 This value may also be `-1` to indicate no
	// limit.<br/>
	// This value MUST NOT be less than `-1`.
	MaxAutomaticTokenAssociations int32 `protobuf:"varint,14,opt,name=max_automatic_token_associations,json=maxAutomaticTokenAssociations,proto3" json:"max_automatic_token_associations,omitempty"`
	// *
	// An account EVM alias.<br/>
	// This is a value used in some contexts to reference an account when
	// the tripartite account identifier is not available.
	// <p>
	// This field, when set to a non-default value, is immutable and
	// SHALL NOT be changed.
	Alias []byte `protobuf:"bytes,15,opt,name=alias,proto3" json:"alias,omitempty"`
	// *
	// The ledger ID of the network that generated this response.
	// <p>
	// This value SHALL identify the distributed ledger that responded to
	// this query.
	LedgerId []byte `protobuf:"bytes,16,opt,name=ledger_id,json=ledgerId,proto3" json:"ledger_id,omitempty"`
	// *
	// A list of crypto (HBAR) allowances approved by this account.
	// <p>
	// If this is not empty, each allowance SHALL permit a specified
	// "spender" account to spend this account's HBAR balance, up
	// to a designated limit.<br/>
	// This field SHALL permit spending only HBAR balance, not other
	// tokens the account may hold.<br/>
	// Allowances for other tokens SHALL be listed in the
	// `token_allowances` field or the
	// `approve_for_all_nft_allowances` field.
	GrantedCryptoAllowances []*GrantedCryptoAllowance `protobuf:"bytes,17,rep,name=granted_crypto_allowances,json=grantedCryptoAllowances,proto3" json:"granted_crypto_allowances,omitempty"`
	// *
	// A list of non-fungible token (NFT) allowances approved by
	// this account.
	// <p>
	// If this is not empty, each allowance SHALL permit a specified
	// "spender" account to transfer _all_ of this account's
	// non-fungible/unique tokens from a particular collection.<br/>
	// Allowances for a specific serial number MUST be directly
	// associated with that specific non-fungible/unique token, rather
	// than the holding account.
	GrantedNftAllowances []*GrantedNftAllowance `protobuf:"bytes,18,rep,name=granted_nft_allowances,json=grantedNftAllowances,proto3" json:"granted_nft_allowances,omitempty"`
	// *
	// A list of fungible token allowances approved by this account.
	// <p>
	// If this is not empty, each allowance SHALL permit a specified
	// "spender" to spend this account's fungible tokens, of the
	// designated type, up to a designated limit.
	GrantedTokenAllowances []*GrantedTokenAllowance `protobuf:"bytes,19,rep,name=granted_token_allowances,json=grantedTokenAllowances,proto3" json:"granted_token_allowances,omitempty"`
}

func (x *GetAccountDetailsResponse_AccountDetails) Reset() {
	*x = GetAccountDetailsResponse_AccountDetails{}
	mi := &file_get_account_details_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountDetailsResponse_AccountDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountDetailsResponse_AccountDetails) ProtoMessage() {}

func (x *GetAccountDetailsResponse_AccountDetails) ProtoReflect() protoreflect.Message {
	mi := &file_get_account_details_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountDetailsResponse_AccountDetails.ProtoReflect.Descriptor instead.
func (*GetAccountDetailsResponse_AccountDetails) Descriptor() ([]byte, []int) {
	return file_get_account_details_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetAccountDetailsResponse_AccountDetails) GetAccountId() *AccountID {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *GetAccountDetailsResponse_AccountDetails) GetContractAccountId() string {
	if x != nil {
		return x.ContractAccountId
	}
	return ""
}

func (x *GetAccountDetailsResponse_AccountDetails) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

// Deprecated: Marked as deprecated in get_account_details.proto.
func (x *GetAccountDetailsResponse_AccountDetails) GetProxyAccountId() *AccountID {
	if x != nil {
		return x.ProxyAccountId
	}
	return nil
}

func (x *GetAccountDetailsResponse_AccountDetails) GetProxyReceived() int64 {
	if x != nil {
		return x.ProxyReceived
	}
	return 0
}

func (x *GetAccountDetailsResponse_AccountDetails) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetAccountDetailsResponse_AccountDetails) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetAccountDetailsResponse_AccountDetails) GetReceiverSigRequired() bool {
	if x != nil {
		return x.ReceiverSigRequired
	}
	return false
}

func (x *GetAccountDetailsResponse_AccountDetails) GetExpirationTime() *Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

func (x *GetAccountDetailsResponse_AccountDetails) GetAutoRenewPeriod() *Duration {
	if x != nil {
		return x.AutoRenewPeriod
	}
	return nil
}

func (x *GetAccountDetailsResponse_AccountDetails) GetTokenRelationships() []*TokenRelationship {
	if x != nil {
		return x.TokenRelationships
	}
	return nil
}

func (x *GetAccountDetailsResponse_AccountDetails) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *GetAccountDetailsResponse_AccountDetails) GetOwnedNfts() int64 {
	if x != nil {
		return x.OwnedNfts
	}
	return 0
}

func (x *GetAccountDetailsResponse_AccountDetails) GetMaxAutomaticTokenAssociations() int32 {
	if x != nil {
		return x.MaxAutomaticTokenAssociations
	}
	return 0
}

func (x *GetAccountDetailsResponse_AccountDetails) GetAlias() []byte {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *GetAccountDetailsResponse_AccountDetails) GetLedgerId() []byte {
	if x != nil {
		return x.LedgerId
	}
	return nil
}

func (x *GetAccountDetailsResponse_AccountDetails) GetGrantedCryptoAllowances() []*GrantedCryptoAllowance {
	if x != nil {
		return x.GrantedCryptoAllowances
	}
	return nil
}

func (x *GetAccountDetailsResponse_AccountDetails) GetGrantedNftAllowances() []*GrantedNftAllowance {
	if x != nil {
		return x.GrantedNftAllowances
	}
	return nil
}

func (x *GetAccountDetailsResponse_AccountDetails) GetGrantedTokenAllowances() []*GrantedTokenAllowance {
	if x != nil {
		return x.GrantedTokenAllowances
	}
	return nil
}

var File_get_account_details_proto protoreflect.FileDescriptor

var file_get_account_details_proto_rawDesc = []byte{
	0x0a, 0x19, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xfc, 0x08, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a,
	0xd5, 0x07, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x39, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x64,
	0x5f, 0x6e, 0x66, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x77, 0x6e,
	0x65, 0x64, 0x4e, 0x66, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1d, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x59, 0x0a, 0x19, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x50, 0x0a,
	0x16, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4e, 0x66, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x4e, 0x66, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x18, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x16, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x16, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x13, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x4e, 0x66, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x08,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x26, 0x0a, 0x22,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61,
	0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_get_account_details_proto_rawDescOnce sync.Once
	file_get_account_details_proto_rawDescData = file_get_account_details_proto_rawDesc
)

func file_get_account_details_proto_rawDescGZIP() []byte {
	file_get_account_details_proto_rawDescOnce.Do(func() {
		file_get_account_details_proto_rawDescData = protoimpl.X.CompressGZIP(file_get_account_details_proto_rawDescData)
	})
	return file_get_account_details_proto_rawDescData
}

var file_get_account_details_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_get_account_details_proto_goTypes = []any{
	(*GetAccountDetailsQuery)(nil),                   // 0: proto.GetAccountDetailsQuery
	(*GetAccountDetailsResponse)(nil),                // 1: proto.GetAccountDetailsResponse
	(*GrantedCryptoAllowance)(nil),                   // 2: proto.GrantedCryptoAllowance
	(*GrantedNftAllowance)(nil),                      // 3: proto.GrantedNftAllowance
	(*GrantedTokenAllowance)(nil),                    // 4: proto.GrantedTokenAllowance
	(*GetAccountDetailsResponse_AccountDetails)(nil), // 5: proto.GetAccountDetailsResponse.AccountDetails
	(*QueryHeader)(nil),                              // 6: proto.QueryHeader
	(*AccountID)(nil),                                // 7: proto.AccountID
	(*ResponseHeader)(nil),                           // 8: proto.ResponseHeader
	(*TokenID)(nil),                                  // 9: proto.TokenID
	(*Key)(nil),                                      // 10: proto.Key
	(*Timestamp)(nil),                                // 11: proto.Timestamp
	(*Duration)(nil),                                 // 12: proto.Duration
	(*TokenRelationship)(nil),                        // 13: proto.TokenRelationship
}
var file_get_account_details_proto_depIdxs = []int32{
	6,  // 0: proto.GetAccountDetailsQuery.header:type_name -> proto.QueryHeader
	7,  // 1: proto.GetAccountDetailsQuery.account_id:type_name -> proto.AccountID
	8,  // 2: proto.GetAccountDetailsResponse.header:type_name -> proto.ResponseHeader
	5,  // 3: proto.GetAccountDetailsResponse.account_details:type_name -> proto.GetAccountDetailsResponse.AccountDetails
	7,  // 4: proto.GrantedCryptoAllowance.spender:type_name -> proto.AccountID
	9,  // 5: proto.GrantedNftAllowance.token_id:type_name -> proto.TokenID
	7,  // 6: proto.GrantedNftAllowance.spender:type_name -> proto.AccountID
	9,  // 7: proto.GrantedTokenAllowance.token_id:type_name -> proto.TokenID
	7,  // 8: proto.GrantedTokenAllowance.spender:type_name -> proto.AccountID
	7,  // 9: proto.GetAccountDetailsResponse.AccountDetails.account_id:type_name -> proto.AccountID
	7,  // 10: proto.GetAccountDetailsResponse.AccountDetails.proxy_account_id:type_name -> proto.AccountID
	10, // 11: proto.GetAccountDetailsResponse.AccountDetails.key:type_name -> proto.Key
	11, // 12: proto.GetAccountDetailsResponse.AccountDetails.expiration_time:type_name -> proto.Timestamp
	12, // 13: proto.GetAccountDetailsResponse.AccountDetails.auto_renew_period:type_name -> proto.Duration
	13, // 14: proto.GetAccountDetailsResponse.AccountDetails.token_relationships:type_name -> proto.TokenRelationship
	2,  // 15: proto.GetAccountDetailsResponse.AccountDetails.granted_crypto_allowances:type_name -> proto.GrantedCryptoAllowance
	3,  // 16: proto.GetAccountDetailsResponse.AccountDetails.granted_nft_allowances:type_name -> proto.GrantedNftAllowance
	4,  // 17: proto.GetAccountDetailsResponse.AccountDetails.granted_token_allowances:type_name -> proto.GrantedTokenAllowance
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_get_account_details_proto_init() }
func file_get_account_details_proto_init() {
	if File_get_account_details_proto != nil {
		return
	}
	file_timestamp_proto_init()
	file_duration_proto_init()
	file_basic_types_proto_init()
	file_query_header_proto_init()
	file_response_header_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_get_account_details_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_get_account_details_proto_goTypes,
		DependencyIndexes: file_get_account_details_proto_depIdxs,
		MessageInfos:      file_get_account_details_proto_msgTypes,
	}.Build()
	File_get_account_details_proto = out.File
	file_get_account_details_proto_rawDesc = nil
	file_get_account_details_proto_goTypes = nil
	file_get_account_details_proto_depIdxs = nil
}
